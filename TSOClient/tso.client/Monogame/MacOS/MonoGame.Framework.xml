<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoGame.Framework</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
             <summary>
             Create a bounding box from the given list of points.
             </summary>
             <param name="points">The list of Vector3 instances defining the point cloud to bound</param>
             <returns>A bounding box that encapsulates the given point cloud.</returns>
             <exception cref="T:System.ArgumentException">Thrown if the given list has no points.</exception>
            </member>
        <member name="T:Microsoft.Xna.Framework.BoundingFrustum">
             <summary>
             Defines a viewing frustum for intersection operations.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.BoundingFrustum.PlaneCount">
             <summary>
             The number of planes in the frustum.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.BoundingFrustum.CornerCount">
             <summary>
             The number of corner points in the frustum.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Matrix">
             <summary>
             Gets or sets the <see cref="T:Microsoft.Xna.Framework.Matrix" /> of the frustum.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Near">
             <summary>
             Gets the near plane of the frustum.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Far">
             <summary>
             Gets the far plane of the frustum.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Left">
             <summary>
             Gets the left plane of the frustum.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Right">
             <summary>
             Gets the right plane of the frustum.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Top">
             <summary>
             Gets the top plane of the frustum.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Bottom">
             <summary>
             Gets the bottom plane of the frustum.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.#ctor(Microsoft.Xna.Framework.Matrix)">
             <summary>
             Constructs the frustum by extracting the view planes from a matrix.
             </summary>
             <param name="value">Combined matrix which usually is (View * Projection).</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Equality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> instances are equal.
             </summary>
             <param name="a"><see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> instance on the left of the equal sign.</param>
             <param name="b"><see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> instance on the right of the equal sign.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Inequality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> instances are not equal.
             </summary>
             <param name="a"><see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> instance on the left of the not equal sign.</param>
             <param name="b"><see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> instance on the right of the not equal sign.</param>
             <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox)">
             <summary>
             Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.
             </summary>
             <param name="box">A <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> for testing.</param>
             <returns>Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
             <summary>
             Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.
             </summary>
             <param name="box">A <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> for testing.</param>
             <param name="result">Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
             <summary>
             Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.
             </summary>
             <param name="frustum">A <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> for testing.</param>
             <returns>Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere)">
             <summary>
             Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.
             </summary>
             <param name="sphere">A <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> for testing.</param>
             <returns>Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
             <summary>
             Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.
             </summary>
             <param name="sphere">A <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> for testing.</param>
             <param name="result">Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
             <param name="point">A <see cref="T:Microsoft.Xna.Framework.Vector3" /> for testing.</param>
             <returns>Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.Vector3" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
             <summary>
             Containment test between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
             <param name="point">A <see cref="T:Microsoft.Xna.Framework.Vector3" /> for testing.</param>
             <param name="result">Result of testing for containment between this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and specified <see cref="T:Microsoft.Xna.Framework.Vector3" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(Microsoft.Xna.Framework.BoundingFrustum)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.
             </summary>
             <param name="other">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(System.Object)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.
             </summary>
             <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners">
             <summary>
             Returns a copy of internal corners array.
             </summary>
             <returns>The array of corners.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners(Microsoft.Xna.Framework.Vector3[])">
             <summary>
             Returns a copy of internal corners array.
             </summary>
             <param name="corners">The array which values will be replaced to corner values of this instance. It must have size of <see cref="F:Microsoft.Xna.Framework.BoundingFrustum.CornerCount" />.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetHashCode">
             <summary>
             Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.
             </summary>
             <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox)">
             <summary>
             Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.
             </summary>
             <param name="box">A <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> for intersection test.</param>
             <returns><c>true</c> if specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
             <summary>
             Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.
             </summary>
             <param name="box">A <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> for intersection test.</param>
             <param name="result"><c>true</c> if specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />; <c>false</c> otherwise as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
             <summary>
             Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.
             </summary>
             <param name="frustum">An other <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> for intersection test.</param>
             <returns><c>true</c> if other <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
             <summary>
             Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.
             </summary>
             <param name="sphere">A <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> for intersection test.</param>
             <returns><c>true</c> if specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
             <summary>
             Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.
             </summary>
             <param name="sphere">A <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> for intersection test.</param>
             <param name="result"><c>true</c> if specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />; <c>false</c> otherwise as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane)">
             <summary>
             Gets type of intersection between specified <see cref="T:Microsoft.Xna.Framework.Plane" /> and this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.
             </summary>
             <param name="plane">A <see cref="T:Microsoft.Xna.Framework.Plane" /> for intersection test.</param>
             <returns>A plane intersection type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
             <summary>
             Gets type of intersection between specified <see cref="T:Microsoft.Xna.Framework.Plane" /> and this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.
             </summary>
             <param name="plane">A <see cref="T:Microsoft.Xna.Framework.Plane" /> for intersection test.</param>
             <param name="result">A plane intersection type as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray)">
             <summary>
             Gets the distance of intersection of <see cref="T:Microsoft.Xna.Framework.Ray" /> and this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> or null if no intersection happens.
             </summary>
             <param name="ray">A <see cref="T:Microsoft.Xna.Framework.Ray" /> for intersection test.</param>
             <returns>Distance at which ray intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> or null if no intersection happens.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
             <summary>
             Gets the distance of intersection of <see cref="T:Microsoft.Xna.Framework.Ray" /> and this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> or null if no intersection happens.
             </summary>
             <param name="ray">A <see cref="T:Microsoft.Xna.Framework.Ray" /> for intersection test.</param>
             <param name="result">Distance at which ray intersects with this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> or null if no intersection happens as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingFrustum.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> in the format:
             {Near:[nearPlane] Far:[farPlane] Left:[leftPlane] Right:[rightPlane] Top:[topPlane] Bottom:[bottomPlane]}
             </summary>
             <returns><see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.BoundingSphere">
             <summary>
             Describes a sphere in 3D-space for bounding operations.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.BoundingSphere.Center">
             <summary>
             The sphere center.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.BoundingSphere.Radius">
             <summary>
             The sphere radius.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Constructs a bounding sphere with the specified center and radius.  
             </summary>
             <param name="center">The sphere center.</param>
             <param name="radius">The sphere radius.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox)">
             <summary>
             Test if a bounding box is fully inside, outside, or just intersecting the sphere.
             </summary>
             <param name="box">The box for testing.</param>
             <returns>The containment type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
             <summary>
             Test if a bounding box is fully inside, outside, or just intersecting the sphere.
             </summary>
             <param name="box">The box for testing.</param>
             <param name="result">The containment type as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
             <summary>
             Test if a frustum is fully inside, outside, or just intersecting the sphere.
             </summary>
             <param name="frustum">The frustum for testing.</param>
             <returns>The containment type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingFrustum@,Microsoft.Xna.Framework.ContainmentType@)">
             <summary>
             Test if a frustum is fully inside, outside, or just intersecting the sphere.
             </summary>
             <param name="frustum">The frustum for testing.</param>
             <param name="result">The containment type as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere)">
             <summary>
             Test if a sphere is fully inside, outside, or just intersecting the sphere.
             </summary>
             <param name="sphere">The other sphere for testing.</param>
             <returns>The containment type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
             <summary>
             Test if a sphere is fully inside, outside, or just intersecting the sphere.
             </summary>
             <param name="sphere">The other sphere for testing.</param>
             <param name="result">The containment type as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Test if a point is fully inside, outside, or just intersecting the sphere.
             </summary>
             <param name="point">The vector in 3D-space for testing.</param>
             <returns>The containment type.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
             <summary>
             Test if a point is fully inside, outside, or just intersecting the sphere.
             </summary>
             <param name="point">The vector in 3D-space for testing.</param>
             <param name="result">The containment type as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox)">
             <summary>
             Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that can contain a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.
             </summary>
             <param name="box">The box to create the sphere from.</param>
             <returns>The new <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingSphere@)">
             <summary>
             Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that can contain a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.
             </summary>
             <param name="box">The box to create the sphere from.</param>
             <param name="result">The new <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromFrustum(Microsoft.Xna.Framework.BoundingFrustum)">
             <summary>
             Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that can contain a specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.
             </summary>
             <param name="frustum">The frustum to create the sphere from.</param>
             <returns>The new <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromPoints(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
             <summary>
             Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that can contain a specified list of points in 3D-space. 
             </summary>
             <param name="points">List of point to create the sphere from.</param>
             <returns>The new <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
             <summary>
             Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that can contain two spheres.
             </summary>
             <param name="original">First sphere.</param>
             <param name="additional">Second sphere.</param>
             <returns>The new <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingSphere@)">
             <summary>
             Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that can contain two spheres.
             </summary>
             <param name="original">First sphere.</param>
             <param name="additional">Second sphere.</param>
             <param name="result">The new <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(Microsoft.Xna.Framework.BoundingSphere)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.
             </summary>
             <param name="other">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(System.Object)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:System.Object" />.
             </summary>
             <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.GetHashCode">
             <summary>
             Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.
             </summary>
             <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox)">
             <summary>
             Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects with this sphere.
             </summary>
             <param name="box">The box for testing.</param>
             <returns><c>true</c> if <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects with this sphere; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
             <summary>
             Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects with this sphere.
             </summary>
             <param name="box">The box for testing.</param>
             <param name="result"><c>true</c> if <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects with this sphere; <c>false</c> otherwise. As an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
             <summary>
             Gets whether or not the other <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with this sphere.
             </summary>
             <param name="sphere">The other sphere for testing.</param>
             <returns><c>true</c> if other <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with this sphere; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
             <summary>
             Gets whether or not the other <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with this sphere.
             </summary>
             <param name="sphere">The other sphere for testing.</param>
             <param name="result"><c>true</c> if other <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with this sphere; <c>false</c> otherwise. As an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane)">
             <summary>
             Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.Plane" /> intersects with this sphere.
             </summary>
             <param name="plane">The plane for testing.</param>
             <returns>Type of intersection.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
             <summary>
             Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.Plane" /> intersects with this sphere.
             </summary>
             <param name="plane">The plane for testing.</param>
             <param name="result">Type of intersection as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray)">
             <summary>
             Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.Ray" /> intersects with this sphere.
             </summary>
             <param name="ray">The ray for testing.</param>
             <returns>Distance of ray intersection or <c>null</c> if there is no intersection.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
             <summary>
             Gets whether or not a specified <see cref="T:Microsoft.Xna.Framework.Ray" /> intersects with this sphere.
             </summary>
             <param name="ray">The ray for testing.</param>
             <param name="result">Distance of ray intersection or <c>null</c> if there is no intersection as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> in the format:
             {Center:[<see cref="F:Microsoft.Xna.Framework.BoundingSphere.Center" />] Radius:[<see cref="F:Microsoft.Xna.Framework.BoundingSphere.Radius" />]}
             </summary>
             <returns>A <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that contains a transformation of translation and scale from this sphere by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>Transformed <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.BoundingSphere@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that contains a transformation of translation and scale from this sphere by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Equality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> instances are equal.
             </summary>
             <param name="a"><see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> instance on the left of the equal sign.</param>
             <param name="b"><see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> instance on the right of the equal sign.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Inequality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> instances are not equal.
             </summary>
             <param name="a"><see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> instance on the left of the not equal sign.</param>
             <param name="b"><see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> instance on the right of the not equal sign.</param>
             <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Color">
             <summary>
             Describes a 32-bit packed color.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.UInt32)">
             <summary>
             Constructs an RGBA color from a packed value.
             The value is a 32-bit unsigned integer, with R in the least significant octet.
             </summary>
             <param name="packedValue">The packed value.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Constructs an RGBA color from the XYZW unit length components of a vector.
             </summary>
             <param name="color">A <see cref="T:Microsoft.Xna.Framework.Vector4" /> representing color.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Constructs an RGBA color from the XYZ unit length components of a vector. Alpha value will be opaque.
             </summary>
             <param name="color">A <see cref="T:Microsoft.Xna.Framework.Vector3" /> representing color.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(Microsoft.Xna.Framework.Color,System.Int32)">
             <summary>
             Constructs an RGBA color from a <see cref="T:Microsoft.Xna.Framework.Color" /> and an alpha value.
             </summary>
             <param name="color">A <see cref="T:Microsoft.Xna.Framework.Color" /> for RGB values of new <see cref="T:Microsoft.Xna.Framework.Color" /> instance.</param>
             <param name="alpha">The alpha component value from 0 to 255.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(Microsoft.Xna.Framework.Color,System.Single)">
             <summary>
             Constructs an RGBA color from color and alpha value.
             </summary>
             <param name="color">A <see cref="T:Microsoft.Xna.Framework.Color" /> for RGB values of new <see cref="T:Microsoft.Xna.Framework.Color" /> instance.</param>
             <param name="alpha">Alpha component value from 0.0f to 1.0f.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Single,System.Single,System.Single)">
             <summary>
             Constructs an RGBA color from scalars representing red, green and blue values. Alpha value will be opaque.
             </summary>
             <param name="r">Red component value from 0.0f to 1.0f.</param>
             <param name="g">Green component value from 0.0f to 1.0f.</param>
             <param name="b">Blue component value from 0.0f to 1.0f.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Constructs an RGBA color from scalars representing red, green, blue and alpha values.
             </summary>
             <param name="r">Red component value from 0.0f to 1.0f.</param>
             <param name="g">Green component value from 0.0f to 1.0f.</param>
             <param name="b">Blue component value from 0.0f to 1.0f.</param>
             <param name="alpha">Alpha component value from 0.0f to 1.0f.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Int32,System.Int32,System.Int32)">
             <summary>
             Constructs an RGBA color from scalars representing red, green and blue values. Alpha value will be opaque.
             </summary>
             <param name="r">Red component value from 0 to 255.</param>
             <param name="g">Green component value from 0 to 255.</param>
             <param name="b">Blue component value from 0 to 255.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Constructs an RGBA color from scalars representing red, green, blue and alpha values.
             </summary>
             <param name="r">Red component value from 0 to 255.</param>
             <param name="g">Green component value from 0 to 255.</param>
             <param name="b">Blue component value from 0 to 255.</param>
             <param name="alpha">Alpha component value from 0 to 255.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
             <summary>
             Constructs an RGBA color from scalars representing red, green, blue and alpha values.
             </summary>
             <remarks>
             This overload sets the values directly without clamping, and may therefore be faster than the other overloads.
             </remarks>
             <param name="r"></param>
             <param name="g"></param>
             <param name="b"></param>
             <param name="alpha"></param>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.B">
             <summary>
             Gets or sets the blue component.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.G">
             <summary>
             Gets or sets the green component.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.R">
             <summary>
             Gets or sets the red component.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.A">
             <summary>
             Gets or sets the alpha component.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.op_Equality(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Color" /> instances are equal.
             </summary>
             <param name="a"><see cref="T:Microsoft.Xna.Framework.Color" /> instance on the left of the equal sign.</param>
             <param name="b"><see cref="T:Microsoft.Xna.Framework.Color" /> instance on the right of the equal sign.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.op_Inequality(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Color" /> instances are not equal.
             </summary>
             <param name="a"><see cref="T:Microsoft.Xna.Framework.Color" /> instance on the left of the not equal sign.</param>
             <param name="b"><see cref="T:Microsoft.Xna.Framework.Color" /> instance on the right of the not equal sign.</param>
             <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.GetHashCode">
             <summary>
             Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Color" />.
             </summary>
             <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Color" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.Equals(System.Object)">
             <summary>
             Compares whether current instance is equal to specified object.
             </summary>
             <param name="obj">The <see cref="T:Microsoft.Xna.Framework.Color" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.TransparentBlack">
             <summary>
             TransparentBlack color (R:0,G:0,B:0,A:0).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Transparent">
             <summary>
             Transparent color (R:0,G:0,B:0,A:0).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.AliceBlue">
             <summary>
             AliceBlue color (R:240,G:248,B:255,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.AntiqueWhite">
             <summary>
             AntiqueWhite color (R:250,G:235,B:215,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Aqua">
             <summary>
             Aqua color (R:0,G:255,B:255,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Aquamarine">
             <summary>
             Aquamarine color (R:127,G:255,B:212,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Azure">
             <summary>
             Azure color (R:240,G:255,B:255,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Beige">
             <summary>
             Beige color (R:245,G:245,B:220,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Bisque">
             <summary>
             Bisque color (R:255,G:228,B:196,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Black">
             <summary>
             Black color (R:0,G:0,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.BlanchedAlmond">
             <summary>
             BlanchedAlmond color (R:255,G:235,B:205,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Blue">
             <summary>
             Blue color (R:0,G:0,B:255,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.BlueViolet">
             <summary>
             BlueViolet color (R:138,G:43,B:226,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Brown">
             <summary>
             Brown color (R:165,G:42,B:42,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.BurlyWood">
             <summary>
             BurlyWood color (R:222,G:184,B:135,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.CadetBlue">
             <summary>
             CadetBlue color (R:95,G:158,B:160,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Chartreuse">
             <summary>
             Chartreuse color (R:127,G:255,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Chocolate">
             <summary>
             Chocolate color (R:210,G:105,B:30,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Coral">
             <summary>
             Coral color (R:255,G:127,B:80,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.CornflowerBlue">
             <summary>
             CornflowerBlue color (R:100,G:149,B:237,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Cornsilk">
             <summary>
             Cornsilk color (R:255,G:248,B:220,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Crimson">
             <summary>
             Crimson color (R:220,G:20,B:60,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Cyan">
             <summary>
             Cyan color (R:0,G:255,B:255,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkBlue">
             <summary>
             DarkBlue color (R:0,G:0,B:139,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkCyan">
             <summary>
             DarkCyan color (R:0,G:139,B:139,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkGoldenrod">
             <summary>
             DarkGoldenrod color (R:184,G:134,B:11,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkGray">
             <summary>
             DarkGray color (R:169,G:169,B:169,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkGreen">
             <summary>
             DarkGreen color (R:0,G:100,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkKhaki">
             <summary>
             DarkKhaki color (R:189,G:183,B:107,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkMagenta">
             <summary>
             DarkMagenta color (R:139,G:0,B:139,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkOliveGreen">
             <summary>
             DarkOliveGreen color (R:85,G:107,B:47,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkOrange">
             <summary>
             DarkOrange color (R:255,G:140,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkOrchid">
             <summary>
             DarkOrchid color (R:153,G:50,B:204,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkRed">
             <summary>
             DarkRed color (R:139,G:0,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkSalmon">
             <summary>
             DarkSalmon color (R:233,G:150,B:122,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkSeaGreen">
             <summary>
             DarkSeaGreen color (R:143,G:188,B:139,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkSlateBlue">
             <summary>
             DarkSlateBlue color (R:72,G:61,B:139,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkSlateGray">
             <summary>
             DarkSlateGray color (R:47,G:79,B:79,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkTurquoise">
             <summary>
             DarkTurquoise color (R:0,G:206,B:209,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkViolet">
             <summary>
             DarkViolet color (R:148,G:0,B:211,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DeepPink">
             <summary>
             DeepPink color (R:255,G:20,B:147,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DeepSkyBlue">
             <summary>
             DeepSkyBlue color (R:0,G:191,B:255,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DimGray">
             <summary>
             DimGray color (R:105,G:105,B:105,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.DodgerBlue">
             <summary>
             DodgerBlue color (R:30,G:144,B:255,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Firebrick">
             <summary>
             Firebrick color (R:178,G:34,B:34,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.FloralWhite">
             <summary>
             FloralWhite color (R:255,G:250,B:240,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.ForestGreen">
             <summary>
             ForestGreen color (R:34,G:139,B:34,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Fuchsia">
             <summary>
             Fuchsia color (R:255,G:0,B:255,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Gainsboro">
             <summary>
             Gainsboro color (R:220,G:220,B:220,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.GhostWhite">
             <summary>
             GhostWhite color (R:248,G:248,B:255,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Gold">
             <summary>
             Gold color (R:255,G:215,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Goldenrod">
             <summary>
             Goldenrod color (R:218,G:165,B:32,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Gray">
             <summary>
             Gray color (R:128,G:128,B:128,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Green">
             <summary>
             Green color (R:0,G:128,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.GreenYellow">
             <summary>
             GreenYellow color (R:173,G:255,B:47,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Honeydew">
             <summary>
             Honeydew color (R:240,G:255,B:240,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.HotPink">
             <summary>
             HotPink color (R:255,G:105,B:180,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.IndianRed">
             <summary>
             IndianRed color (R:205,G:92,B:92,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Indigo">
             <summary>
             Indigo color (R:75,G:0,B:130,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Ivory">
             <summary>
             Ivory color (R:255,G:255,B:240,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Khaki">
             <summary>
             Khaki color (R:240,G:230,B:140,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Lavender">
             <summary>
             Lavender color (R:230,G:230,B:250,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LavenderBlush">
             <summary>
             LavenderBlush color (R:255,G:240,B:245,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LawnGreen">
             <summary>
             LawnGreen color (R:124,G:252,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LemonChiffon">
             <summary>
             LemonChiffon color (R:255,G:250,B:205,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightBlue">
             <summary>
             LightBlue color (R:173,G:216,B:230,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightCoral">
             <summary>
             LightCoral color (R:240,G:128,B:128,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightCyan">
             <summary>
             LightCyan color (R:224,G:255,B:255,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightGoldenrodYellow">
             <summary>
             LightGoldenrodYellow color (R:250,G:250,B:210,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightGray">
             <summary>
             LightGray color (R:211,G:211,B:211,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightGreen">
             <summary>
             LightGreen color (R:144,G:238,B:144,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightPink">
             <summary>
             LightPink color (R:255,G:182,B:193,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightSalmon">
             <summary>
             LightSalmon color (R:255,G:160,B:122,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightSeaGreen">
             <summary>
             LightSeaGreen color (R:32,G:178,B:170,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightSkyBlue">
             <summary>
             LightSkyBlue color (R:135,G:206,B:250,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightSlateGray">
             <summary>
             LightSlateGray color (R:119,G:136,B:153,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightSteelBlue">
             <summary>
             LightSteelBlue color (R:176,G:196,B:222,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightYellow">
             <summary>
             LightYellow color (R:255,G:255,B:224,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Lime">
             <summary>
             Lime color (R:0,G:255,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.LimeGreen">
             <summary>
             LimeGreen color (R:50,G:205,B:50,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Linen">
             <summary>
             Linen color (R:250,G:240,B:230,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Magenta">
             <summary>
             Magenta color (R:255,G:0,B:255,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Maroon">
             <summary>
             Maroon color (R:128,G:0,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumAquamarine">
             <summary>
             MediumAquamarine color (R:102,G:205,B:170,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumBlue">
             <summary>
             MediumBlue color (R:0,G:0,B:205,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumOrchid">
             <summary>
             MediumOrchid color (R:186,G:85,B:211,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumPurple">
             <summary>
             MediumPurple color (R:147,G:112,B:219,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumSeaGreen">
             <summary>
             MediumSeaGreen color (R:60,G:179,B:113,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumSlateBlue">
             <summary>
             MediumSlateBlue color (R:123,G:104,B:238,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumSpringGreen">
             <summary>
             MediumSpringGreen color (R:0,G:250,B:154,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumTurquoise">
             <summary>
             MediumTurquoise color (R:72,G:209,B:204,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumVioletRed">
             <summary>
             MediumVioletRed color (R:199,G:21,B:133,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MidnightBlue">
             <summary>
             MidnightBlue color (R:25,G:25,B:112,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MintCream">
             <summary>
             MintCream color (R:245,G:255,B:250,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MistyRose">
             <summary>
             MistyRose color (R:255,G:228,B:225,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Moccasin">
             <summary>
             Moccasin color (R:255,G:228,B:181,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.MonoGameOrange">
             <summary>
             MonoGame orange theme color (R:231,G:60,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.NavajoWhite">
             <summary>
             NavajoWhite color (R:255,G:222,B:173,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Navy">
             <summary>
             Navy color (R:0,G:0,B:128,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.OldLace">
             <summary>
             OldLace color (R:253,G:245,B:230,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Olive">
             <summary>
             Olive color (R:128,G:128,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.OliveDrab">
             <summary>
             OliveDrab color (R:107,G:142,B:35,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Orange">
             <summary>
             Orange color (R:255,G:165,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.OrangeRed">
             <summary>
             OrangeRed color (R:255,G:69,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Orchid">
             <summary>
             Orchid color (R:218,G:112,B:214,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.PaleGoldenrod">
             <summary>
             PaleGoldenrod color (R:238,G:232,B:170,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.PaleGreen">
             <summary>
             PaleGreen color (R:152,G:251,B:152,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.PaleTurquoise">
             <summary>
             PaleTurquoise color (R:175,G:238,B:238,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.PaleVioletRed">
             <summary>
             PaleVioletRed color (R:219,G:112,B:147,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.PapayaWhip">
             <summary>
             PapayaWhip color (R:255,G:239,B:213,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.PeachPuff">
             <summary>
             PeachPuff color (R:255,G:218,B:185,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Peru">
             <summary>
             Peru color (R:205,G:133,B:63,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Pink">
             <summary>
             Pink color (R:255,G:192,B:203,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Plum">
             <summary>
             Plum color (R:221,G:160,B:221,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.PowderBlue">
             <summary>
             PowderBlue color (R:176,G:224,B:230,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Purple">
             <summary>
              Purple color (R:128,G:0,B:128,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Red">
             <summary>
             Red color (R:255,G:0,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.RosyBrown">
             <summary>
             RosyBrown color (R:188,G:143,B:143,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.RoyalBlue">
             <summary>
             RoyalBlue color (R:65,G:105,B:225,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.SaddleBrown">
             <summary>
             SaddleBrown color (R:139,G:69,B:19,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Salmon">
             <summary>
             Salmon color (R:250,G:128,B:114,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.SandyBrown">
             <summary>
             SandyBrown color (R:244,G:164,B:96,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.SeaGreen">
             <summary>
             SeaGreen color (R:46,G:139,B:87,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.SeaShell">
             <summary>
             SeaShell color (R:255,G:245,B:238,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Sienna">
             <summary>
             Sienna color (R:160,G:82,B:45,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Silver">
             <summary>
             Silver color (R:192,G:192,B:192,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.SkyBlue">
             <summary>
             SkyBlue color (R:135,G:206,B:235,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.SlateBlue">
             <summary>
             SlateBlue color (R:106,G:90,B:205,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.SlateGray">
             <summary>
             SlateGray color (R:112,G:128,B:144,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Snow">
             <summary>
             Snow color (R:255,G:250,B:250,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.SpringGreen">
             <summary>
             SpringGreen color (R:0,G:255,B:127,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.SteelBlue">
             <summary>
             SteelBlue color (R:70,G:130,B:180,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Tan">
             <summary>
             Tan color (R:210,G:180,B:140,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Teal">
             <summary>
             Teal color (R:0,G:128,B:128,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Thistle">
             <summary>
             Thistle color (R:216,G:191,B:216,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Tomato">
             <summary>
             Tomato color (R:255,G:99,B:71,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Turquoise">
             <summary>
             Turquoise color (R:64,G:224,B:208,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Violet">
             <summary>
             Violet color (R:238,G:130,B:238,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Wheat">
             <summary>
             Wheat color (R:245,G:222,B:179,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.White">
             <summary>
             White color (R:255,G:255,B:255,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.WhiteSmoke">
             <summary>
             WhiteSmoke color (R:245,G:245,B:245,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.Yellow">
             <summary>
             Yellow color (R:255,G:255,B:0,A:255).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.YellowGreen">
             <summary>
             YellowGreen color (R:154,G:205,B:50,A:255).
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
             <summary>
             Performs linear interpolation of <see cref="T:Microsoft.Xna.Framework.Color" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Color" />.</param>
             <param name="value2">Destination <see cref="T:Microsoft.Xna.Framework.Color" />.</param>
             <param name="amount">Interpolation factor.</param>
             <returns>Interpolated <see cref="T:Microsoft.Xna.Framework.Color" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.LerpPrecise(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
             <summary>
             <see cref="M:Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)" /> should be used instead of this function.
             </summary>
             <returns>Interpolated <see cref="T:Microsoft.Xna.Framework.Color" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.Multiply(Microsoft.Xna.Framework.Color,System.Single)">
             <summary>
             Multiply <see cref="T:Microsoft.Xna.Framework.Color" /> by value.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Color" />.</param>
             <param name="scale">Multiplicator.</param>
             <returns>Multiplication result.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.op_Multiply(Microsoft.Xna.Framework.Color,System.Single)">
             <summary>
             Multiply <see cref="T:Microsoft.Xna.Framework.Color" /> by value.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Color" />.</param>
             <param name="scale">Multiplicator.</param>
             <returns>Multiplication result.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.ToVector3">
             <summary>
             Gets a <see cref="T:Microsoft.Xna.Framework.Vector3" /> representation for this object.
             </summary>
             <returns>A <see cref="T:Microsoft.Xna.Framework.Vector3" /> representation for this object.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.ToVector4">
             <summary>
             Gets a <see cref="T:Microsoft.Xna.Framework.Vector4" /> representation for this object.
             </summary>
             <returns>A <see cref="T:Microsoft.Xna.Framework.Vector4" /> representation for this object.</returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Color.PackedValue">
             <summary>
             Gets or sets packed value of this <see cref="T:Microsoft.Xna.Framework.Color" />.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Color" /> in the format:
             {R:[red] G:[green] B:[blue] A:[alpha]}
             </summary>
             <returns><see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Color" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.FromNonPremultiplied(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Translate a non-premultipled alpha <see cref="T:Microsoft.Xna.Framework.Color" /> to a <see cref="T:Microsoft.Xna.Framework.Color" /> that contains premultiplied alpha.
             </summary>
             <param name="vector">A <see cref="T:Microsoft.Xna.Framework.Vector4" /> representing color.</param>
             <returns>A <see cref="T:Microsoft.Xna.Framework.Color" /> which contains premultiplied alpha data.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.FromNonPremultiplied(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Translate a non-premultipled alpha <see cref="T:Microsoft.Xna.Framework.Color" /> to a <see cref="T:Microsoft.Xna.Framework.Color" /> that contains premultiplied alpha.
             </summary>
             <param name="r">Red component value.</param>
             <param name="g">Green component value.</param>
             <param name="b">Blue component value.</param>
             <param name="a">Alpha component value.</param>
             <returns>A <see cref="T:Microsoft.Xna.Framework.Color" /> which contains premultiplied alpha data.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Color.Equals(Microsoft.Xna.Framework.Color)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Color" />.
             </summary>
             <param name="other">The <see cref="T:Microsoft.Xna.Framework.Color" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.ContainmentType">
             <summary>
             Defines how the bounding volumes intersects or contain one another.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.ContainmentType.Disjoint">
             <summary>
             Indicates that there is no overlap between two bounding volumes.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.ContainmentType.Contains">
             <summary>
             Indicates that one bounding volume completely contains another volume.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.ContainmentType.Intersects">
             <summary>
             Indicates that bounding volumes partially overlap one another.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.CurveContinuity">
             <summary>
             Defines the continuity of keys on a <see cref="T:Microsoft.Xna.Framework.Curve" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.CurveContinuity.Smooth">
             <summary>
             Interpolation can be used between this key and the next.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.CurveContinuity.Step">
             <summary>
             Interpolation cannot be used. A position between the two points returns this point.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Curve">
             <summary>
             Contains a collection of <see cref="T:Microsoft.Xna.Framework.CurveKey" /> points in 2D space and provides methods for evaluating features of the curve they define.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Curve.IsConstant">
             <summary>
             Returns <c>true</c> if this curve is constant (has zero or one points); <c>false</c> otherwise.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Curve.Keys">
             <summary>
             The collection of curve keys.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Curve.PostLoop">
             <summary>
             Defines how to handle weighting values that are greater than the last control point in the curve.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Curve.PreLoop">
             <summary>
             Defines how to handle weighting values that are less than the first control point in the curve.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Curve.#ctor">
             <summary>
             Constructs a curve.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Curve.Clone">
             <summary>
             Creates a copy of this curve.
             </summary>
             <returns>A copy of this curve.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Curve.Evaluate(System.Single)">
             <summary>
             Evaluate the value at a position of this <see cref="T:Microsoft.Xna.Framework.Curve" />.
             </summary>
             <param name="position">The position on this <see cref="T:Microsoft.Xna.Framework.Curve" />.</param>
             <returns>Value at the position on this <see cref="T:Microsoft.Xna.Framework.Curve" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangents(Microsoft.Xna.Framework.CurveTangent)">
             <summary>
             Computes tangents for all keys in the collection.
             </summary>
             <param name="tangentType">The tangent type for both in and out.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangents(Microsoft.Xna.Framework.CurveTangent,Microsoft.Xna.Framework.CurveTangent)">
             <summary>
             Computes tangents for all keys in the collection.
             </summary>
             <param name="tangentInType">The tangent in-type. <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn" /> for more details.</param>
             <param name="tangentOutType">The tangent out-type. <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut" /> for more details.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangent(System.Int32,Microsoft.Xna.Framework.CurveTangent)">
             <summary>
             Computes tangent for the specific key in the collection.
             </summary>
             <param name="keyIndex">The index of a key in the collection.</param>
             <param name="tangentType">The tangent type for both in and out.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangent(System.Int32,Microsoft.Xna.Framework.CurveTangent,Microsoft.Xna.Framework.CurveTangent)">
             <summary>
             Computes tangent for the specific key in the collection.
             </summary>
             <param name="keyIndex">The index of key in the collection.</param>
             <param name="tangentInType">The tangent in-type. <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn" /> for more details.</param>
             <param name="tangentOutType">The tangent out-type. <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut" /> for more details.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.CurveKeyCollection">
             <summary>
             The collection of the <see cref="T:Microsoft.Xna.Framework.CurveKey" /> elements and a part of the <see cref="T:Microsoft.Xna.Framework.Curve" /> class.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Item(System.Int32)">
             <summary>
             Indexer.
             </summary>
             <param name="index">The index of key in this collection.</param>
             <returns><see cref="T:Microsoft.Xna.Framework.CurveKey" /> at <paramref name="index" /> position.</returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Count">
             <summary>
             Returns the count of keys in this collection.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.IsReadOnly">
             <summary>
             Returns false because it is not a read-only collection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.#ctor">
             <summary>
             Creates a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" /> class.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Add(Microsoft.Xna.Framework.CurveKey)">
             <summary>
             Adds a key to this collection.
             </summary>
             <param name="item">New key for the collection.</param>
             <exception cref="T:System.ArgumentNullException">Throws if <paramref name="item" /> is null.</exception>
             <remarks>The new key would be added respectively to a position of that key and the position of other keys.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clear">
             <summary>
             Removes all keys from this collection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clone">
             <summary>
             Creates a copy of this collection.
             </summary>
             <returns>A copy of this collection.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Contains(Microsoft.Xna.Framework.CurveKey)">
             <summary>
             Determines whether this collection contains a specific key.
             </summary>
             <param name="item">The key to locate in this collection.</param>
             <returns><c>true</c> if the key is found; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.CopyTo(Microsoft.Xna.Framework.CurveKey[],System.Int32)">
             <summary>
             Copies the keys of this collection to an array, starting at the array index provided.
             </summary>
             <param name="array">Destination array where elements will be copied.</param>
             <param name="arrayIndex">The zero-based index in the array to start copying from.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.GetEnumerator">
             <summary>
             Returns an enumerator that iterates through the collection.
             </summary>
             <returns>An enumerator for the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.IndexOf(Microsoft.Xna.Framework.CurveKey)">
             <summary>
             Finds element in the collection and returns its index.
             </summary>
             <param name="item">Element for the search.</param>
             <returns>Index of the element; or -1 if item is not found.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.RemoveAt(System.Int32)">
             <summary>
             Removes element at the specified index.
             </summary>
             <param name="index">The index which element will be removed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Remove(Microsoft.Xna.Framework.CurveKey)">
             <summary>
             Removes specific element.
             </summary>
             <param name="item">The element</param>
             <returns><c>true</c> if item is successfully removed; <c>false</c> otherwise. This method also returns <c>false</c> if item was not found.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.CurveKey">
             <summary>
             Key point on the <see cref="T:Microsoft.Xna.Framework.Curve" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.CurveKey.Continuity">
             <summary>
             Gets or sets the indicator whether the segment between this point and the next point on the curve is discrete or continuous.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.CurveKey.Position">
             <summary>
             Gets a position of the key on the curve.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.CurveKey.TangentIn">
             <summary>
             Gets or sets a tangent when approaching this point from the previous point on the curve.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.CurveKey.TangentOut">
             <summary>
             Gets or sets a tangent when leaving this point to the next point on the curve.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.CurveKey.Value">
             <summary>
             Gets a value of this point.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor">
             <summary>
             Creates a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKey" /> class with position: 0 and value: 0.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single)">
             <summary>
             Creates a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKey" /> class.
             </summary>
             <param name="position">Position on the curve.</param>
             <param name="value">Value of the control point.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Creates a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKey" /> class.
             </summary>
             <param name="position">Position on the curve.</param>
             <param name="value">Value of the control point.</param>
             <param name="tangentIn">Tangent approaching point from the previous point on the curve.</param>
             <param name="tangentOut">Tangent leaving point toward next point on the curve.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.CurveContinuity)">
             <summary>
             Creates a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKey" /> class.
             </summary>
             <param name="position">Position on the curve.</param>
             <param name="value">Value of the control point.</param>
             <param name="tangentIn">Tangent approaching point from the previous point on the curve.</param>
             <param name="tangentOut">Tangent leaving point toward next point on the curve.</param>
             <param name="continuity">Indicates whether the curve is discrete or continuous.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.op_Inequality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
             <summary>
             
             Compares whether two <see cref="T:Microsoft.Xna.Framework.CurveKey" /> instances are not equal.
             </summary>
             <param name="value1"><see cref="T:Microsoft.Xna.Framework.CurveKey" /> instance on the left of the not equal sign.</param>
             <param name="value2"><see cref="T:Microsoft.Xna.Framework.CurveKey" /> instance on the right of the not equal sign.</param>
             <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.op_Equality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.CurveKey" /> instances are equal.
             </summary>
             <param name="value1"><see cref="T:Microsoft.Xna.Framework.CurveKey" /> instance on the left of the equal sign.</param>
             <param name="value2"><see cref="T:Microsoft.Xna.Framework.CurveKey" /> instance on the right of the equal sign.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.CurveKey.Clone">
             <summary>
             Creates a copy of this key.
             </summary>
             <returns>A copy of this key.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.CurveLoopType">
             <summary>
             Defines how the <see cref="T:Microsoft.Xna.Framework.Curve" /> value is determined for position before first point or after the end point on the <see cref="T:Microsoft.Xna.Framework.Curve" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.CurveLoopType.Constant">
             <summary>
             The value of <see cref="T:Microsoft.Xna.Framework.Curve" /> will be evaluated as first point for positions before the beginning and end point for positions after the end.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.CurveLoopType.Cycle">
             <summary>
             The positions will wrap around from the end to beginning of the <see cref="T:Microsoft.Xna.Framework.Curve" /> for determined the value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.CurveLoopType.CycleOffset">
             <summary>
             The positions will wrap around from the end to beginning of the <see cref="T:Microsoft.Xna.Framework.Curve" />.
             The value will be offset by the difference between the values of first and end <see cref="T:Microsoft.Xna.Framework.CurveKey" /> multiplied by the wrap amount.
             If the position is before the beginning of the <see cref="T:Microsoft.Xna.Framework.Curve" /> the difference will be subtracted from its value; otherwise the difference will be added.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.CurveLoopType.Oscillate">
             <summary>
             The value at the end of the <see cref="T:Microsoft.Xna.Framework.Curve" /> act as an offset from the same side of the <see cref="T:Microsoft.Xna.Framework.Curve" /> toward the opposite side.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.CurveLoopType.Linear">
             <summary>
             The linear interpolation will be performed for determined the value. 
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.CurveTangent">
             <summary>
             Defines the different tangent types to be calculated for <see cref="T:Microsoft.Xna.Framework.CurveKey" /> points in a <see cref="T:Microsoft.Xna.Framework.Curve" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.CurveTangent.Flat">
             <summary>
             The tangent which always has a value equal to zero. 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.CurveTangent.Linear">
             <summary>
             The tangent which contains a difference between current tangent value and the tangent value from the previous <see cref="T:Microsoft.Xna.Framework.CurveKey" />. 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.CurveTangent.Smooth">
             <summary>
             The smoouth tangent which contains the inflection between <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn" /> and <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut" /> by taking into account the values of both neighbors of the <see cref="T:Microsoft.Xna.Framework.CurveKey" />.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.DisplayOrientation">
             <summary>
             Defines the orientation of the display.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.DisplayOrientation.Default">
             <summary>
             The default orientation.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.DisplayOrientation.LandscapeLeft">
             <summary>
             The display is rotated counterclockwise into a landscape orientation. Width is greater than height.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.DisplayOrientation.LandscapeRight">
             <summary>
             The display is rotated clockwise into a landscape orientation. Width is greater than height.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.DisplayOrientation.Portrait">
             <summary>
             The display is rotated as portrait, where height is greater than width.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.DisplayOrientation.PortraitDown">
             <summary>
             The display is rotated as inverted portrait, where height is greater than width.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.DisplayOrientation.Unknown">
             <summary>
             Unknown display orientation.
             </summary>
            </member>
        <member name="E:Microsoft.Xna.Framework.GameComponentCollection.ComponentAdded">
             <summary>
             Event that is triggered when a <see cref="T:Microsoft.Xna.Framework.GameComponent" /> is added
             to this <see cref="T:Microsoft.Xna.Framework.GameComponentCollection" />.
             </summary>
            </member>
        <member name="E:Microsoft.Xna.Framework.GameComponentCollection.ComponentRemoved">
             <summary>
             Event that is triggered when a <see cref="T:Microsoft.Xna.Framework.GameComponent" /> is removed
             from this <see cref="T:Microsoft.Xna.Framework.GameComponentCollection" />.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GameComponentCollection.ClearItems">
             <summary>
             Removes every <see cref="T:Microsoft.Xna.Framework.GameComponent" /> from this <see cref="T:Microsoft.Xna.Framework.GameComponentCollection" />.
             Triggers <see cref="M:Microsoft.Xna.Framework.GameComponentCollection.OnComponentRemoved(Microsoft.Xna.Framework.GameComponentCollectionEventArgs)" /> once for each <see cref="T:Microsoft.Xna.Framework.GameComponent" /> removed.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)">
             <summary>
             Shuts down the component.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GameComponent.Dispose">
             <summary>
             Shuts down the component.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Game.MaxElapsedTime">
             <summary>
             The maximum amount of time we will frameskip over and only perform Update calls with no Draw calls.
             MonoGame extension.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Game.SortingFilteringCollection`1">
             <summary>
             The SortingFilteringCollection class provides efficient, reusable
             sorting and filtering based on a configurable sort comparer, filter
             predicate, and associate change events.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.GamePlatform.DefaultRunBehavior">
             <summary>
             When implemented in a derived class, reports the default
             GameRunBehavior for this platform.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.GamePlatform.Game">
             <summary>
             Gets the Game instance that owns this GamePlatform instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.RaiseAsyncRunLoopEnded">
             <summary>
             Raises the AsyncRunLoopEnded event.  This method must be called by
             derived classes when the asynchronous run loop they start has
             stopped running.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.BeforeInitialize">
             <summary>
             Gives derived classes an opportunity to do work before any
             components are initialized.  Note that the base implementation sets
             IsActive to true, so derived classes should either call the base
             implementation or set IsActive to true by their own means.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.BeforeRun">
             <summary>
             Gives derived classes an opportunity to do work just before the
             run loop is begun.  Implementations may also return false to prevent
             the run loop from starting.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.Exit">
             <summary>
             When implemented in a derived, ends the active run loop.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.RunLoop">
             <summary>
             When implemented in a derived, starts the run loop and blocks
             until it has ended.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.StartRunLoop">
             <summary>
             When implemented in a derived, starts the run loop and returns
             immediately.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.BeforeUpdate(Microsoft.Xna.Framework.GameTime)">
             <summary>
             Gives derived classes an opportunity to do work just before Update
             is called for all IUpdatable components.  Returning false from this
             method will result in this round of Update calls being skipped.
             </summary>
             <param name="gameTime"></param>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.BeforeDraw(Microsoft.Xna.Framework.GameTime)">
             <summary>
             Gives derived classes an opportunity to do work just before Draw
             is called for all IDrawable components.  Returning false from this
             method will result in this round of Draw calls being skipped.
             </summary>
             <param name="gameTime"></param>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.EnterFullScreen">
             <summary>
             When implemented in a derived class, causes the game to enter
             full-screen mode.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.ExitFullScreen">
             <summary>
             When implemented in a derived class, causes the game to exit
             full-screen mode.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.TargetElapsedTimeChanging(System.TimeSpan)">
             <summary>
             Gives derived classes an opportunity to modify
             Game.TargetElapsedTime before it is set.
             </summary>
             <param name="value">The proposed new value of TargetElapsedTime.</param>
             <returns>The new value of TargetElapsedTime that will be set.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.BeginScreenDeviceChange(System.Boolean)">
             <summary>
             Starts a device transition (windowed to full screen or vice versa).
             </summary>
             <param name="willBeFullScreen">
             Specifies whether the device will be in full-screen mode upon completion of the change.
             </param>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.EndScreenDeviceChange(System.String,System.Int32,System.Int32)">
             <summary>
             Completes a device transition.
             </summary>
             <param name="screenDeviceName">
             Screen device name.
             </param>
             <param name="clientWidth">
             The new width of the game's client window.
             </param>
             <param name="clientHeight">
             The new height of the game's client window.
             </param>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.TargetElapsedTimeChanged">
             <summary>
             Gives derived classes an opportunity to take action after
             Game.TargetElapsedTime has been set.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.ResetElapsedTime">
             <summary>
             MSDN: Use this method if your game is recovering from a slow-running state, and ElapsedGameTime is too large to be useful.
             Frame timing is generally handled by the Game class, but some platforms still handle it elsewhere. Once all platforms
             rely on the Game class's functionality, this method and any overrides should be removed.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.OnPresentationChanged">
             <summary>
             Used by the GraphicsDeviceManager to update the platform window
             after the graphics device has changed the presentation.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing,
             releasing, or resetting unmanaged resources.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GamePlatform.Log(System.String)">
             <summary>
             Log the specified Message.
             </summary>
             <param name="Message">
             
             </param>
            </member>
        <member name="T:Microsoft.Xna.Framework.GameRunBehavior">
             <summary>
             Defines how <see cref="T:Microsoft.Xna.Framework.Game" /> should be runned.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.GameRunBehavior.Asynchronous">
             <summary>
             The game loop will be runned asynchronous.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.GameRunBehavior.Synchronous">
             <summary>
             The game loop will be runned synchronous.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.IGraphicsDeviceManager">
             <summary>
             Used by the platform code to control the graphics device.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw">
             <summary>
             Called at the start of rendering a frame.
             </summary>
             <returns>Returns true if the frame should be rendered.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice">
             <summary>
             Called to create the graphics device.
             </summary>
             <remarks>Does nothing if the graphics device is already created.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw">
             <summary>
             Called after rendering to present the frame to the screen.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.MathHelper">
             <summary>
             Contains commonly used precalculated values and mathematical operations.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.E">
             <summary>
             Represents the mathematical constant e(2.71828175).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.Log10E">
             <summary>
             Represents the log base ten of e(0.4342945).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.Log2E">
             <summary>
             Represents the log base two of e(1.442695).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.Pi">
             <summary>
             Represents the value of pi(3.14159274).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver2">
             <summary>
             Represents the value of pi divided by two(1.57079637).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver4">
             <summary>
             Represents the value of pi divided by four(0.7853982).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.MathHelper.TwoPi">
             <summary>
             Represents the value of pi times two(6.28318548).
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.
             </summary>
             <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
             <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
             <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
             <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
             <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
             <returns>Cartesian coordinate of the specified point with respect to the axis being used.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Performs a Catmull-Rom interpolation using the specified positions.
             </summary>
             <param name="value1">The first position in the interpolation.</param>
             <param name="value2">The second position in the interpolation.</param>
             <param name="value3">The third position in the interpolation.</param>
             <param name="value4">The fourth position in the interpolation.</param>
             <param name="amount">Weighting factor.</param>
             <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Clamp(System.Single,System.Single,System.Single)">
             <summary>
             Restricts a value to be within a specified range.
             </summary>
             <param name="value">The value to clamp.</param>
             <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
             <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
             <returns>The clamped value.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)">
             <summary>
             Restricts a value to be within a specified range.
             </summary>
             <param name="value">The value to clamp.</param>
             <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
             <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
             <returns>The clamped value.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Distance(System.Single,System.Single)">
             <summary>
             Calculates the absolute value of the difference of two values.
             </summary>
             <param name="value1">Source value.</param>
             <param name="value2">Source value.</param>
             <returns>Distance between the two values.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Performs a Hermite spline interpolation.
             </summary>
             <param name="value1">Source position.</param>
             <param name="tangent1">Source tangent.</param>
             <param name="value2">Source position.</param>
             <param name="tangent2">Source tangent.</param>
             <param name="amount">Weighting factor.</param>
             <returns>The result of the Hermite spline interpolation.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)">
             <summary>
             Linearly interpolates between two values.
             </summary>
             <param name="value1">Source value.</param>
             <param name="value2">Destination value.</param>
             <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
             <returns>Interpolated value.</returns> 
             <remarks>This method performs the linear interpolation based on the following formula:
             <code>value1 + (value2 - value1) * amount</code>.
             Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned.
             See <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> for a less efficient version with more precision around edge cases.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)">
             <summary>
             Linearly interpolates between two values.
             This method is a less efficient, more precise version of <see cref="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)" />.
             See remarks for more info.
             </summary>
             <param name="value1">Source value.</param>
             <param name="value2">Destination value.</param>
             <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
             <returns>Interpolated value.</returns>
             <remarks>This method performs the linear interpolation based on the following formula:
             <code>((1 - amount) * value1) + (value2 * amount)</code>.
             Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned.
             This method does not have the floating point precision issue that <see cref="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)" /> has.
             i.e. If there is a big gap between value1 and value2 in magnitude (e.g. value1=10000000000000000, value2=1),
             right at the edge of the interpolation range (amount=1), <see cref="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)" /> will return 0 (whereas it should return 1).
             This also holds for value1=10^17, value2=10; value1=10^18,value2=10^2... so on.
             For an in depth explanation of the issue, see below references:
             Relevant Wikipedia Article: https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support
             Relevant StackOverflow Answer: http://stackoverflow.com/questions/4353525/floating-point-linear-interpolation#answer-23716956
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Max(System.Single,System.Single)">
             <summary>
             Returns the greater of two values.
             </summary>
             <param name="value1">Source value.</param>
             <param name="value2">Source value.</param>
             <returns>The greater value.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Max(System.Int32,System.Int32)">
             <summary>
             Returns the greater of two values.
             </summary>
             <param name="value1">Source value.</param>
             <param name="value2">Source value.</param>
             <returns>The greater value.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Min(System.Single,System.Single)">
             <summary>
             Returns the lesser of two values.
             </summary>
             <param name="value1">Source value.</param>
             <param name="value2">Source value.</param>
             <returns>The lesser value.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.Min(System.Int32,System.Int32)">
             <summary>
             Returns the lesser of two values.
             </summary>
             <param name="value1">Source value.</param>
             <param name="value2">Source value.</param>
             <returns>The lesser value.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
             <summary>
             Interpolates between two values using a cubic equation.
             </summary>
             <param name="value1">Source value.</param>
             <param name="value2">Source value.</param>
             <param name="amount">Weighting value.</param>
             <returns>Interpolated value.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.ToDegrees(System.Single)">
             <summary>
             Converts radians to degrees.
             </summary>
             <param name="radians">The angle in radians.</param>
             <returns>The angle in degrees.</returns>
             <remarks>
             This method uses double precission internally,
             though it returns single float
             Factor = 180 / pi
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)">
             <summary>
             Converts degrees to radians.
             </summary>
             <param name="degrees">The angle in degrees.</param>
             <returns>The angle in radians.</returns>
             <remarks>
             This method uses double precission internally,
             though it returns single float
             Factor = pi / 180
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.WrapAngle(System.Single)">
             <summary>
             Reduces a given angle to a value between π and -π.
             </summary>
             <param name="angle">The angle to reduce, in radians.</param>
             <returns>The new angle, in radians.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.MathHelper.IsPowerOfTwo(System.Int32)">
             <summary>
             Determines if value is powered by two.
             </summary>
             <param name="value">A value.</param>
             <returns><c>true</c> if <c>value</c> is powered by two; otherwise <c>false</c>.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Matrix">
             <summary>
             Represents the right-handed 4x4 floating point matrix, which can store translation, scale and rotation information.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Constructs a matrix.
             </summary>
             <param name="m11">A first row and first column value.</param>
             <param name="m12">A first row and second column value.</param>
             <param name="m13">A first row and third column value.</param>
             <param name="m14">A first row and fourth column value.</param>
             <param name="m21">A second row and first column value.</param>
             <param name="m22">A second row and second column value.</param>
             <param name="m23">A second row and third column value.</param>
             <param name="m24">A second row and fourth column value.</param>
             <param name="m31">A third row and first column value.</param>
             <param name="m32">A third row and second column value.</param>
             <param name="m33">A third row and third column value.</param>
             <param name="m34">A third row and fourth column value.</param>
             <param name="m41">A fourth row and first column value.</param>
             <param name="m42">A fourth row and second column value.</param>
             <param name="m43">A fourth row and third column value.</param>
             <param name="m44">A fourth row and fourth column value.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.#ctor(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Constructs a matrix.
             </summary>
             <param name="row1">A first row of the created matrix.</param>
             <param name="row2">A second row of the created matrix.</param>
             <param name="row3">A third row of the created matrix.</param>
             <param name="row4">A fourth row of the created matrix.</param>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M11">
             <summary>
             A first row and first column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M12">
             <summary>
             A first row and second column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M13">
             <summary>
             A first row and third column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M14">
             <summary>
             A first row and fourth column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M21">
             <summary>
             A second row and first column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M22">
             <summary>
             A second row and second column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M23">
             <summary>
             A second row and third column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M24">
             <summary>
             A second row and fourth column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M31">
             <summary>
             A third row and first column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M32">
             <summary>
             A third row and second column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M33">
             <summary>
             A third row and third column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M34">
             <summary>
             A third row and fourth column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M41">
             <summary>
             A fourth row and first column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M42">
             <summary>
             A fourth row and second column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M43">
             <summary>
             A fourth row and third column value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Matrix.M44">
             <summary>
             A fourth row and fourth column value.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Backward">
             <summary>
             The backward vector formed from the third row M31, M32, M33 elements.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Down">
             <summary>
             The down vector formed from the second row -M21, -M22, -M23 elements.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Forward">
             <summary>
             The forward vector formed from the third row -M31, -M32, -M33 elements.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Identity">
             <summary>
             Returns the identity matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Left">
             <summary>
             The left vector formed from the first row -M11, -M12, -M13 elements.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Right">
             <summary>
             The right vector formed from the first row M11, M12, M13 elements.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Rotation">
             <summary>
             Rotation stored in this matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Translation">
             <summary>
             Position stored in this matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Scale">
             <summary>
             Scale stored in this matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Matrix.Up">
             <summary>
             The upper vector formed from the second row M21, M22, M23 elements.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> which contains sum of two matrixes.
             </summary>
             <param name="matrix1">The first matrix to add.</param>
             <param name="matrix2">The second matrix to add.</param>
             <returns>The result of the matrix addition.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> which contains sum of two matrixes.
             </summary>
             <param name="matrix1">The first matrix to add.</param>
             <param name="matrix2">The second matrix to add.</param>
             <param name="result">The result of the matrix addition as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.Vector3})">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> for spherical billboarding that rotates around specified object position.
             </summary>
             <param name="objectPosition">Position of billboard object. It will rotate around that vector.</param>
             <param name="cameraPosition">The camera position.</param>
             <param name="cameraUpVector">The camera up vector.</param>
             <param name="cameraForwardVector">Optional camera forward vector.</param>
             <returns>The <see cref="T:Microsoft.Xna.Framework.Matrix" /> for spherical billboarding.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Nullable{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> for spherical billboarding that rotates around specified object position.
             </summary>
             <param name="objectPosition">Position of billboard object. It will rotate around that vector.</param>
             <param name="cameraPosition">The camera position.</param>
             <param name="cameraUpVector">The camera up vector.</param>
             <param name="cameraForwardVector">Optional camera forward vector.</param>
             <param name="result">The <see cref="T:Microsoft.Xna.Framework.Matrix" /> for spherical billboarding as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.Vector3},System.Nullable{Microsoft.Xna.Framework.Vector3})">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> for cylindrical billboarding that rotates around specified axis.
             </summary>
             <param name="objectPosition">Object position the billboard will rotate around.</param>
             <param name="cameraPosition">Camera position.</param>
             <param name="rotateAxis">Axis of billboard for rotation.</param>
             <param name="cameraForwardVector">Optional camera forward vector.</param>
             <param name="objectForwardVector">Optional object forward vector.</param>
             <returns>The <see cref="T:Microsoft.Xna.Framework.Matrix" /> for cylindrical billboarding.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Nullable{Microsoft.Xna.Framework.Vector3},System.Nullable{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> for cylindrical billboarding that rotates around specified axis.
             </summary>
             <param name="objectPosition">Object position the billboard will rotate around.</param>
             <param name="cameraPosition">Camera position.</param>
             <param name="rotateAxis">Axis of billboard for rotation.</param>
             <param name="cameraForwardVector">Optional camera forward vector.</param>
             <param name="objectForwardVector">Optional object forward vector.</param>
             <param name="result">The <see cref="T:Microsoft.Xna.Framework.Matrix" /> for cylindrical billboarding as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> which contains the rotation moment around specified axis.
             </summary>
             <param name="axis">The axis of rotation.</param>
             <param name="angle">The angle of rotation in radians.</param>
             <returns>The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> which contains the rotation moment around specified axis.
             </summary>
             <param name="axis">The axis of rotation.</param>
             <param name="angle">The angle of rotation in radians.</param>
             <param name="result">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> from a <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="quaternion"><see cref="T:Microsoft.Xna.Framework.Quaternion" /> of rotation moment.</param>
             <returns>The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> from a <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="quaternion"><see cref="T:Microsoft.Xna.Framework.Quaternion" /> of rotation moment.</param>
             <param name="result">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
             <summary>
             Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> from the specified yaw, pitch and roll values.
             </summary>
             <param name="yaw">The yaw rotation value in radians.</param>
             <param name="pitch">The pitch rotation value in radians.</param>
             <param name="roll">The roll rotation value in radians.</param>
             <returns>The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
             <remarks>For more information about yaw, pitch and roll visit http://en.wikipedia.org/wiki/Euler_angles.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> from the specified yaw, pitch and roll values.
             </summary>
             <param name="yaw">The yaw rotation value in radians.</param>
             <param name="pitch">The pitch rotation value in radians.</param>
             <param name="roll">The roll rotation value in radians.</param>
             <param name="result">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> as an output parameter.</param>
             <remarks>For more information about yaw, pitch and roll visit http://en.wikipedia.org/wiki/Euler_angles.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Creates a new viewing <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="cameraPosition">Position of the camera.</param>
             <param name="cameraTarget">Lookup vector of the camera.</param>
             <param name="cameraUpVector">The direction of the upper edge of the camera.</param>
             <returns>The viewing <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new viewing <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="cameraPosition">Position of the camera.</param>
             <param name="cameraTarget">Lookup vector of the camera.</param>
             <param name="cameraUpVector">The direction of the upper edge of the camera.</param>
             <param name="result">The viewing <see cref="T:Microsoft.Xna.Framework.Matrix" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for orthographic view.
             </summary>
             <param name="width">Width of the viewing volume.</param>
             <param name="height">Height of the viewing volume.</param>
             <param name="zNearPlane">Depth of the near plane.</param>
             <param name="zFarPlane">Depth of the far plane.</param>
             <returns>The new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for orthographic view.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for orthographic view.
             </summary>
             <param name="width">Width of the viewing volume.</param>
             <param name="height">Height of the viewing volume.</param>
             <param name="zNearPlane">Depth of the near plane.</param>
             <param name="zFarPlane">Depth of the far plane.</param>
             <param name="result">The new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for orthographic view as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for customized orthographic view.
             </summary>
             <param name="left">Lower x-value at the near plane.</param>
             <param name="right">Upper x-value at the near plane.</param>
             <param name="bottom">Lower y-coordinate at the near plane.</param>
             <param name="top">Upper y-value at the near plane.</param>
             <param name="zNearPlane">Depth of the near plane.</param>
             <param name="zFarPlane">Depth of the far plane.</param>
             <returns>The new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for customized orthographic view.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(Microsoft.Xna.Framework.Rectangle,System.Single,System.Single)">
             <summary>
             Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for customized orthographic view.
             </summary>
             <param name="viewingVolume">The viewing volume.</param>
             <param name="zNearPlane">Depth of the near plane.</param>
             <param name="zFarPlane">Depth of the far plane.</param>
             <returns>The new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for customized orthographic view.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for customized orthographic view.
             </summary>
             <param name="left">Lower x-value at the near plane.</param>
             <param name="right">Upper x-value at the near plane.</param>
             <param name="bottom">Lower y-coordinate at the near plane.</param>
             <param name="top">Upper y-value at the near plane.</param>
             <param name="zNearPlane">Depth of the near plane.</param>
             <param name="zFarPlane">Depth of the far plane.</param>
             <param name="result">The new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for customized orthographic view as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for perspective view.
             </summary>
             <param name="width">Width of the viewing volume.</param>
             <param name="height">Height of the viewing volume.</param>
             <param name="nearPlaneDistance">Distance to the near plane.</param>
             <param name="farPlaneDistance">Distance to the far plane.</param>
             <returns>The new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for perspective view.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for perspective view.
             </summary>
             <param name="width">Width of the viewing volume.</param>
             <param name="height">Height of the viewing volume.</param>
             <param name="nearPlaneDistance">Distance to the near plane.</param>
             <param name="farPlaneDistance">Distance to the far plane.</param>
             <param name="result">The new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for perspective view as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for perspective view with field of view.
             </summary>
             <param name="fieldOfView">Field of view in the y direction in radians.</param>
             <param name="aspectRatio">Width divided by height of the viewing volume.</param>
             <param name="nearPlaneDistance">Distance to the near plane.</param>
             <param name="farPlaneDistance">Distance to the far plane.</param>
             <returns>The new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for perspective view with FOV.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for perspective view with field of view.
             </summary>
             <param name="fieldOfView">Field of view in the y direction in radians.</param>
             <param name="aspectRatio">Width divided by height of the viewing volume.</param>
             <param name="nearPlaneDistance">Distance of the near plane.</param>
             <param name="farPlaneDistance">Distance of the far plane.</param>
             <param name="result">The new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for perspective view with FOV as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for customized perspective view.
             </summary>
             <param name="left">Lower x-value at the near plane.</param>
             <param name="right">Upper x-value at the near plane.</param>
             <param name="bottom">Lower y-coordinate at the near plane.</param>
             <param name="top">Upper y-value at the near plane.</param>
             <param name="nearPlaneDistance">Distance to the near plane.</param>
             <param name="farPlaneDistance">Distance to the far plane.</param>
             <returns>The new <see cref="T:Microsoft.Xna.Framework.Matrix" /> for customized perspective view.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(Microsoft.Xna.Framework.Rectangle,System.Single,System.Single)">
             <summary>
             Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for customized perspective view.
             </summary>
             <param name="viewingVolume">The viewing volume.</param>
             <param name="nearPlaneDistance">Distance to the near plane.</param>
             <param name="farPlaneDistance">Distance to the far plane.</param>
             <returns>The new <see cref="T:Microsoft.Xna.Framework.Matrix" /> for customized perspective view.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new projection <see cref="T:Microsoft.Xna.Framework.Matrix" /> for customized perspective view.
             </summary>
             <param name="left">Lower x-value at the near plane.</param>
             <param name="right">Upper x-value at the near plane.</param>
             <param name="bottom">Lower y-coordinate at the near plane.</param>
             <param name="top">Upper y-value at the near plane.</param>
             <param name="nearPlaneDistance">Distance to the near plane.</param>
             <param name="farPlaneDistance">Distance to the far plane.</param>
             <param name="result">The new <see cref="T:Microsoft.Xna.Framework.Matrix" /> for customized perspective view as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single)">
             <summary>
             Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> around X axis.
             </summary>
             <param name="radians">Angle in radians.</param>
             <returns>The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> around X axis.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> around X axis.
             </summary>
             <param name="radians">Angle in radians.</param>
             <param name="result">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> around X axis as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single)">
             <summary>
             Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> around Y axis.
             </summary>
             <param name="radians">Angle in radians.</param>
             <returns>The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> around Y axis.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> around Y axis.
             </summary>
             <param name="radians">Angle in radians.</param>
             <param name="result">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> around Y axis as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single)">
             <summary>
             Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> around Z axis.
             </summary>
             <param name="radians">Angle in radians.</param>
             <returns>The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> around Z axis.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> around Z axis.
             </summary>
             <param name="radians">Angle in radians.</param>
             <param name="result">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> around Z axis as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single)">
             <summary>
             Creates a new scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="scale">Scale value for all three axises.</param>
             <returns>The scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="scale">Scale value for all three axises.</param>
             <param name="result">The scaling <see cref="T:Microsoft.Xna.Framework.Matrix" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single)">
             <summary>
             Creates a new scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="xScale">Scale value for X axis.</param>
             <param name="yScale">Scale value for Y axis.</param>
             <param name="zScale">Scale value for Z axis.</param>
             <returns>The scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="xScale">Scale value for X axis.</param>
             <param name="yScale">Scale value for Y axis.</param>
             <param name="zScale">Scale value for Z axis.</param>
             <param name="result">The scaling <see cref="T:Microsoft.Xna.Framework.Matrix" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Creates a new scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="scales"><see cref="T:Microsoft.Xna.Framework.Vector3" /> representing x,y and z scale values.</param>
             <returns>The scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="scales"><see cref="T:Microsoft.Xna.Framework.Vector3" /> representing x,y and z scale values.</param>
             <param name="result">The scaling <see cref="T:Microsoft.Xna.Framework.Matrix" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateShadow(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Plane)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that flattens geometry into a specified <see cref="T:Microsoft.Xna.Framework.Plane" /> as if casting a shadow from a specified light source. 
             </summary>
             <param name="lightDirection">A vector specifying the direction from which the light that will cast the shadow is coming.</param>
             <param name="plane">The plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
             <returns>A <see cref="T:Microsoft.Xna.Framework.Matrix" /> that can be used to flatten geometry onto the specified plane from the specified direction. </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateShadow(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that flattens geometry into a specified <see cref="T:Microsoft.Xna.Framework.Plane" /> as if casting a shadow from a specified light source. 
             </summary>
             <param name="lightDirection">A vector specifying the direction from which the light that will cast the shadow is coming.</param>
             <param name="plane">The plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
             <param name="result">A <see cref="T:Microsoft.Xna.Framework.Matrix" /> that can be used to flatten geometry onto the specified plane from the specified direction as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single)">
             <summary>
             Creates a new translation <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="xPosition">X coordinate of translation.</param>
             <param name="yPosition">Y coordinate of translation.</param>
             <param name="zPosition">Z coordinate of translation.</param>
             <returns>The translation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new translation <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="position">X,Y and Z coordinates of translation.</param>
             <param name="result">The translation <see cref="T:Microsoft.Xna.Framework.Matrix" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Creates a new translation <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="position">X,Y and Z coordinates of translation.</param>
             <returns>The translation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new translation <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="xPosition">X coordinate of translation.</param>
             <param name="yPosition">Y coordinate of translation.</param>
             <param name="zPosition">Z coordinate of translation.</param>
             <param name="result">The translation <see cref="T:Microsoft.Xna.Framework.Matrix" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateReflection(Microsoft.Xna.Framework.Plane)">
             <summary>
             Creates a new reflection <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="value">The plane that used for reflection calculation.</param>
             <returns>The reflection <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateReflection(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new reflection <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="value">The plane that used for reflection calculation.</param>
             <param name="result">The reflection <see cref="T:Microsoft.Xna.Framework.Matrix" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateWorld(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Creates a new world <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="position">The position vector.</param>
             <param name="forward">The forward direction vector.</param>
             <param name="up">The upward direction vector. Usually <see cref="P:Microsoft.Xna.Framework.Vector3.Up" />.</param>
             <returns>The world <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.CreateWorld(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new world <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="position">The position vector.</param>
             <param name="forward">The forward direction vector.</param>
             <param name="up">The upward direction vector. Usually <see cref="P:Microsoft.Xna.Framework.Vector3.Up" />.</param>
             <param name="result">The world <see cref="T:Microsoft.Xna.Framework.Matrix" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Decompose(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Decomposes this matrix to translation, rotation and scale elements. Returns <c>true</c> if matrix can be decomposed; <c>false</c> otherwise.
             </summary>
             <param name="scale">Scale vector as an output parameter.</param>
             <param name="rotation">Rotation quaternion as an output parameter.</param>
             <param name="translation">Translation vector as an output parameter.</param>
             <returns><c>true</c> if matrix can be decomposed; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Determinant">
             <summary>
             Returns a determinant of this <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <returns>Determinant of this <see cref="T:Microsoft.Xna.Framework.Matrix" /></returns>
             <remarks>See more about determinant here - http://en.wikipedia.org/wiki/Determinant.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Divides the elements of a <see cref="T:Microsoft.Xna.Framework.Matrix" /> by the elements of another matrix.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="matrix2">Divisor <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>The result of dividing the matrix.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Divides the elements of a <see cref="T:Microsoft.Xna.Framework.Matrix" /> by the elements of another matrix.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="matrix2">Divisor <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">The result of dividing the matrix as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,System.Single)">
             <summary>
             Divides the elements of a <see cref="T:Microsoft.Xna.Framework.Matrix" /> by a scalar.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="divider">Divisor scalar.</param>
             <returns>The result of dividing a matrix by a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Divides the elements of a <see cref="T:Microsoft.Xna.Framework.Matrix" /> by a scalar.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="divider">Divisor scalar.</param>
             <param name="result">The result of dividing a matrix by a scalar as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Equals(Microsoft.Xna.Framework.Matrix)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> without any tolerance.
             </summary>
             <param name="other">The <see cref="T:Microsoft.Xna.Framework.Matrix" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Equals(System.Object)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:System.Object" /> without any tolerance.
             </summary>
             <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.GetHashCode">
             <summary>
             Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> which contains inversion of the specified matrix. 
             </summary>
             <param name="matrix">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>The inverted matrix.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> which contains inversion of the specified matrix. 
             </summary>
             <param name="matrix">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">The inverted matrix as output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that contains linear interpolation of the values in specified matrixes.
             </summary>
             <param name="matrix1">The first <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="matrix2">The second <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <returns>&gt;The result of linear interpolation of the specified matrixes.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that contains linear interpolation of the values in specified matrixes.
             </summary>
             <param name="matrix1">The first <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="matrix2">The second <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <param name="result">The result of linear interpolation of the specified matrixes as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that contains a multiplication of two matrix.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="matrix2">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>Result of the matrix multiplication.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that contains a multiplication of two matrix.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="matrix2">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">Result of the matrix multiplication as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Matrix" /> and a scalar.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="scaleFactor">Scalar value.</param>
             <returns>Result of the matrix multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Matrix" /> and a scalar.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="scaleFactor">Scalar value.</param>
             <param name="result">Result of the matrix multiplication with a scalar as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.ToFloatArray(Microsoft.Xna.Framework.Matrix)">
             <summary>
             Copy the values of specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> to the float array.
             </summary>
             <param name="matrix">The source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>The array which matrix values will be stored.</returns>
             <remarks>
             Required for OpenGL 2.0 projection matrix stuff.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix)">
             <summary>
             Returns a matrix with the all values negated.
             </summary>
             <param name="matrix">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>Result of the matrix negation.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Returns a matrix with the all values negated.
             </summary>
             <param name="matrix">Source <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">Result of the matrix negation as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Addition(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Adds two matrixes.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the left of the add sign.</param>
             <param name="matrix2">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the right of the add sign.</param>
             <returns>Sum of the matrixes.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Divides the elements of a <see cref="T:Microsoft.Xna.Framework.Matrix" /> by the elements of another <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the left of the div sign.</param>
             <param name="matrix2">Divisor <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the right of the div sign.</param>
             <returns>The result of dividing the matrixes.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,System.Single)">
             <summary>
             Divides the elements of a <see cref="T:Microsoft.Xna.Framework.Matrix" /> by a scalar.
             </summary>
             <param name="matrix">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the left of the div sign.</param>
             <param name="divider">Divisor scalar on the right of the div sign.</param>
             <returns>The result of dividing a matrix by a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Equality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Matrix" /> instances are equal without any tolerance.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the left of the equal sign.</param>
             <param name="matrix2">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the right of the equal sign.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Inequality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Matrix" /> instances are not equal without any tolerance.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the left of the not equal sign.</param>
             <param name="matrix2">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the right of the not equal sign.</param>
             <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Multiplies two matrixes.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the left of the mul sign.</param>
             <param name="matrix2">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the right of the mul sign.</param>
             <returns>Result of the matrix multiplication.</returns>
             <remarks>
             Using matrix multiplication algorithm - see http://en.wikipedia.org/wiki/Matrix_multiplication.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
             <summary>
             Multiplies the elements of matrix by a scalar.
             </summary>
             <param name="matrix">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the left of the mul sign.</param>
             <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
             <returns>Result of the matrix multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_Subtraction(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Subtracts the values of one <see cref="T:Microsoft.Xna.Framework.Matrix" /> from another <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="matrix1">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the left of the sub sign.</param>
             <param name="matrix2">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the right of the sub sign.</param>
             <returns>Result of the matrix subtraction.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.op_UnaryNegation(Microsoft.Xna.Framework.Matrix)">
             <summary>
             Inverts values in the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="matrix">Source <see cref="T:Microsoft.Xna.Framework.Matrix" /> on the right of the sub sign.</param>
             <returns>Result of the inversion.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that contains subtraction of one matrix from another.
             </summary>
             <param name="matrix1">The first <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="matrix2">The second <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>The result of the matrix subtraction.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that contains subtraction of one matrix from another.
             </summary>
             <param name="matrix1">The first <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="matrix2">The second <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">The result of the matrix subtraction as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Matrix" /> in the format:
             {M11:[<see cref="F:Microsoft.Xna.Framework.Matrix.M11" />] M12:[<see cref="F:Microsoft.Xna.Framework.Matrix.M12" />] M13:[<see cref="F:Microsoft.Xna.Framework.Matrix.M13" />] M14:[<see cref="F:Microsoft.Xna.Framework.Matrix.M14" />]}
             {M21:[<see cref="F:Microsoft.Xna.Framework.Matrix.M21" />] M12:[<see cref="F:Microsoft.Xna.Framework.Matrix.M22" />] M13:[<see cref="F:Microsoft.Xna.Framework.Matrix.M23" />] M14:[<see cref="F:Microsoft.Xna.Framework.Matrix.M24" />]}
             {M31:[<see cref="F:Microsoft.Xna.Framework.Matrix.M31" />] M32:[<see cref="F:Microsoft.Xna.Framework.Matrix.M32" />] M33:[<see cref="F:Microsoft.Xna.Framework.Matrix.M33" />] M34:[<see cref="F:Microsoft.Xna.Framework.Matrix.M34" />]}
             {M41:[<see cref="F:Microsoft.Xna.Framework.Matrix.M41" />] M42:[<see cref="F:Microsoft.Xna.Framework.Matrix.M42" />] M43:[<see cref="F:Microsoft.Xna.Framework.Matrix.M43" />] M44:[<see cref="F:Microsoft.Xna.Framework.Matrix.M44" />]}
             </summary>
             <returns>A <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix)">
             <summary>
             Swap the matrix rows and columns.
             </summary>
             <param name="matrix">The matrix for transposing operation.</param>
             <returns>The new <see cref="T:Microsoft.Xna.Framework.Matrix" /> which contains the transposing result.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
             <summary>
             Swap the matrix rows and columns.
             </summary>
             <param name="matrix">The matrix for transposing operation.</param>
             <param name="result">The new <see cref="T:Microsoft.Xna.Framework.Matrix" /> which contains the transposing result as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Matrix.FindDeterminants(Microsoft.Xna.Framework.Matrix@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
             <summary>
             Helper method for using the Laplace expansion theorem using two rows expansions to calculate major and 
             minor determinants of a 4x4 matrix. This method is used for inverting a matrix.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.NamespaceDoc">
             <summary>
             Provides functionality to handle input from keyboards, mice, gamepads, etc.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.NamespaceDoc">
             <summary>
             Support for playing sound effects and XACT audio.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.NamespaceDoc">
             <summary>
             The runtime support for loading content pipeline content.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.PlaneHelper.ClassifyPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Plane@)">
             <summary>
             Returns a value indicating what side (positive/negative) of a plane a point is
             </summary>
             <param name="point">The point to check with</param>
             <param name="plane">The plane to check against</param>
             <returns>Greater than zero if on the positive side, less than zero if on the negative size, 0 otherwise</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.PlaneHelper.PerpendicularDistance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Plane@)">
             <summary>
             Returns the perpendicular distance from a point to a plane
             </summary>
             <param name="point">The point to check</param>
             <param name="plane">The place to check</param>
             <returns>The perpendicular distance from the point to the plane</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Transforms a normalized plane by a matrix.
             </summary>
             <param name="plane">The normalized plane to transform.</param>
             <param name="matrix">The transformation matrix.</param>
             <returns>The transformed plane.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Plane@)">
             <summary>
             Transforms a normalized plane by a matrix.
             </summary>
             <param name="plane">The normalized plane to transform.</param>
             <param name="matrix">The transformation matrix.</param>
             <param name="result">The transformed plane.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Transforms a normalized plane by a quaternion rotation.
             </summary>
             <param name="plane">The normalized plane to transform.</param>
             <param name="rotation">The quaternion rotation.</param>
             <returns>The transformed plane.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Plane@)">
             <summary>
             Transforms a normalized plane by a quaternion rotation.
             </summary>
             <param name="plane">The normalized plane to transform.</param>
             <param name="rotation">The quaternion rotation.</param>
             <param name="result">The transformed plane.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.PlaneIntersectionType">
             <summary>
             Defines the intersection between a <see cref="T:Microsoft.Xna.Framework.Plane" /> and a bounding volume.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Front">
             <summary>
             There is no intersection, the bounding volume is in the negative half space of the plane.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Back">
             <summary>
             There is no intersection, the bounding volume is in the positive half space of the plane.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting">
             <summary>
             The plane is intersected.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.PlayerIndex">
             <summary>
             Defines the index of player for various MonoGame components.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.PlayerIndex.One">
             <summary>
             The first player index.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.PlayerIndex.Two">
             <summary>
             The second player index.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.PlayerIndex.Three">
             <summary>
             The third player index.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.PlayerIndex.Four">
             <summary>
             The fourth player index.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Point">
             <summary>
             Describes a 2D-point.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Point.X">
             <summary>
             The x coordinate of this <see cref="T:Microsoft.Xna.Framework.Point" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Point.Y">
             <summary>
             The y coordinate of this <see cref="T:Microsoft.Xna.Framework.Point" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Point.Zero">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Point" /> with coordinates 0, 0.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.#ctor(System.Int32,System.Int32)">
             <summary>
             Constructs a point with X and Y from two values.
             </summary>
             <param name="x">The x coordinate in 2d-space.</param>
             <param name="y">The y coordinate in 2d-space.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.#ctor(System.Int32)">
             <summary>
             Constructs a point with X and Y set to the same value.
             </summary>
             <param name="value">The x and y coordinates in 2d-space.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.op_Addition(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
             <summary>
             Adds two points.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Point" /> on the left of the add sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Point" /> on the right of the add sign.</param>
             <returns>Sum of the points.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.op_Subtraction(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
             <summary>
             Subtracts a <see cref="T:Microsoft.Xna.Framework.Point" /> from a <see cref="T:Microsoft.Xna.Framework.Point" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Point" /> on the left of the sub sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Point" /> on the right of the sub sign.</param>
             <returns>Result of the subtraction.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.op_Multiply(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
             <summary>
             Multiplies the components of two points by each other.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Point" /> on the left of the mul sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Point" /> on the right of the mul sign.</param>
             <returns>Result of the multiplication.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.op_Division(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Point" /> by the components of another <see cref="T:Microsoft.Xna.Framework.Point" />.
             </summary>
             <param name="source">Source <see cref="T:Microsoft.Xna.Framework.Point" /> on the left of the div sign.</param>
             <param name="divisor">Divisor <see cref="T:Microsoft.Xna.Framework.Point" /> on the right of the div sign.</param>
             <returns>The result of dividing the points.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.op_Equality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Point" /> instances are equal.
             </summary>
             <param name="a"><see cref="T:Microsoft.Xna.Framework.Point" /> instance on the left of the equal sign.</param>
             <param name="b"><see cref="T:Microsoft.Xna.Framework.Point" /> instance on the right of the equal sign.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.op_Inequality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Point" /> instances are not equal.
             </summary>
             <param name="a"><see cref="T:Microsoft.Xna.Framework.Point" /> instance on the left of the not equal sign.</param>
             <param name="b"><see cref="T:Microsoft.Xna.Framework.Point" /> instance on the right of the not equal sign.</param>
             <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.Equals(System.Object)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:System.Object" />.
             </summary>
             <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.Equals(Microsoft.Xna.Framework.Point)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Point" />.
             </summary>
             <param name="other">The <see cref="T:Microsoft.Xna.Framework.Point" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.GetHashCode">
             <summary>
             Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Point" />.
             </summary>
             <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Point" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Point" /> in the format:
             {X:[<see cref="F:Microsoft.Xna.Framework.Point.X" />] Y:[<see cref="F:Microsoft.Xna.Framework.Point.Y" />]}
             </summary>
             <returns><see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Point" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Point.ToVector2">
             <summary>
             Gets a <see cref="T:Microsoft.Xna.Framework.Vector2" /> representation for this object.
             </summary>
             <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2" /> representation for this object.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs">
             <summary>
             The arguments to the <see cref="E:Microsoft.Xna.Framework.GraphicsDeviceManager.PreparingDeviceSettings" /> event.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs.#ctor(Microsoft.Xna.Framework.GraphicsDeviceInformation)">
             <summary>
             Create a new instance of the event.
             </summary>
             <param name="graphicsDeviceInformation">The default settings to be used in device creation.</param>
            </member>
        <member name="P:Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs.GraphicsDeviceInformation">
             <summary>
             The default settings that will be used in device creation.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.IPrimaryThreadLoaded">
             <summary>
             Interface used to add an object to be loaded on the primary thread
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.PrimaryThreadLoader">
             <summary>
             Static class that is called before every draw to load resources that need to finish loading on the primary thread
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.PrimaryThreadLoader.DoLoads">
             <summary>
             Loops through list and loads the item.  If successful, it is removed from the list.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Quaternion">
             <summary>
             An efficient mathematical representation for three dimensional rotations.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Quaternion.X">
             <summary>
             The x coordinate of this <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Quaternion.Y">
             <summary>
             The y coordinate of this <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Quaternion.Z">
             <summary>
             The z coordinate of this <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Quaternion.W">
             <summary>
             The rotation component of this <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Constructs a quaternion with X, Y, Z and W from four values.
             </summary>
             <param name="x">The x coordinate in 3d-space.</param>
             <param name="y">The y coordinate in 3d-space.</param>
             <param name="z">The z coordinate in 3d-space.</param>
             <param name="w">The rotation component.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Constructs a quaternion with X, Y, Z from <see cref="T:Microsoft.Xna.Framework.Vector3" /> and rotation component from a scalar.
             </summary>
             <param name="value">The x, y, z coordinates in 3d-space.</param>
             <param name="w">The rotation component.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Constructs a quaternion from <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
             <param name="value">The x, y, z coordinates in 3d-space and the rotation component.</param>
            </member>
        <member name="P:Microsoft.Xna.Framework.Quaternion.Identity">
             <summary>
             Returns a quaternion representing no rotation.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that contains the sum of two quaternions.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <returns>The result of the quaternion addition.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that contains the sum of two quaternions.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="result">The result of the quaternion addition as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that contains concatenation between two quaternion.
             </summary>
             <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to concatenate.</param>
             <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to concatenate.</param>
             <returns>The result of rotation of <paramref name="value1" /> followed by <paramref name="value2" /> rotation.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that contains concatenation between two quaternion.
             </summary>
             <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to concatenate.</param>
             <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to concatenate.</param>
             <param name="result">The result of rotation of <paramref name="value1" /> followed by <paramref name="value2" /> rotation as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate">
             <summary>
             Transforms this quaternion into its conjugated version.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that contains conjugated version of the specified quaternion.
             </summary>
             <param name="value">The quaternion which values will be used to create the conjugated version.</param>
             <returns>The conjugate version of the specified quaternion.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that contains conjugated version of the specified quaternion.
             </summary>
             <param name="value">The quaternion which values will be used to create the conjugated version.</param>
             <param name="result">The conjugated version of the specified quaternion as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from the specified axis and angle.
             </summary>
             <param name="axis">The axis of rotation.</param>
             <param name="angle">The angle in radians.</param>
             <returns>The new quaternion builded from axis and angle.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from the specified axis and angle.
             </summary>
             <param name="axis">The axis of rotation.</param>
             <param name="angle">The angle in radians.</param>
             <param name="result">The new quaternion builded from axis and angle as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="matrix">The rotation matrix.</param>
             <returns>A quaternion composed from the rotation part of the matrix.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="matrix">The rotation matrix.</param>
             <param name="result">A quaternion composed from the rotation part of the matrix as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from the specified yaw, pitch and roll angles.
             </summary>
             <param name="yaw">Yaw around the y axis in radians.</param>
             <param name="pitch">Pitch around the x axis in radians.</param>
             <param name="roll">Roll around the z axis in radians.</param>
             <returns>A new quaternion from the concatenated yaw, pitch, and roll angles.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from the specified yaw, pitch and roll angles.
             </summary>
             <param name="yaw">Yaw around the y axis in radians.</param>
             <param name="pitch">Pitch around the x axis in radians.</param>
             <param name="roll">Roll around the z axis in radians.</param>
             <param name="result">A new quaternion from the concatenated yaw, pitch, and roll angles as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Divides a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> by the other <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="quaternion2">Divisor <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <returns>The result of dividing the quaternions.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Divides a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> by the other <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="quaternion2">Divisor <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="result">The result of dividing the quaternions as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Returns a dot product of two quaternions.
             </summary>
             <param name="quaternion1">The first quaternion.</param>
             <param name="quaternion2">The second quaternion.</param>
             <returns>The dot product of two quaternions.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@)">
             <summary>
             Returns a dot product of two quaternions.
             </summary>
             <param name="quaternion1">The first quaternion.</param>
             <param name="quaternion2">The second quaternion.</param>
             <param name="result">The dot product of two quaternions as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(System.Object)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:System.Object" />.
             </summary>
             <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="other">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.GetHashCode">
             <summary>
             Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Returns the inverse quaternion which represents the opposite rotation.
             </summary>
             <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <returns>The inverse quaternion.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Returns the inverse quaternion which represents the opposite rotation.
             </summary>
             <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="result">The inverse quaternion as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Length">
             <summary>
             Returns the magnitude of the quaternion components.
             </summary>
             <returns>The magnitude of the quaternion components.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.LengthSquared">
             <summary>
             Returns the squared magnitude of the quaternion components.
             </summary>
             <returns>The squared magnitude of the quaternion components.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
             <summary>
             Performs a linear blend between two quaternions.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="amount">The blend amount where 0 returns <paramref name="quaternion1" /> and 1 <paramref name="quaternion2" />.</param>
             <returns>The result of linear blending between two quaternions.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Performs a linear blend between two quaternions.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="amount">The blend amount where 0 returns <paramref name="quaternion1" /> and 1 <paramref name="quaternion2" />.</param>
             <param name="result">The result of linear blending between two quaternions as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
             <summary>
             Performs a spherical linear blend between two quaternions.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="amount">The blend amount where 0 returns <paramref name="quaternion1" /> and 1 <paramref name="quaternion2" />.</param>
             <returns>The result of spherical linear blending between two quaternions.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Performs a spherical linear blend between two quaternions.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="amount">The blend amount where 0 returns <paramref name="quaternion1" /> and 1 <paramref name="quaternion2" />.</param>
             <param name="result">The result of spherical linear blending between two quaternions as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that contains subtraction of one <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from another.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <returns>The result of the quaternion subtraction.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that contains subtraction of one <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from another.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="result">The result of the quaternion subtraction as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that contains a multiplication of two quaternions.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <returns>The result of the quaternion multiplication.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Quaternion" /> and a scalar.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="scaleFactor">Scalar value.</param>
             <returns>The result of the quaternion multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Quaternion" /> and a scalar.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="scaleFactor">Scalar value.</param>
             <param name="result">The result of the quaternion multiplication with a scalar as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that contains a multiplication of two quaternions.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="result">The result of the quaternion multiplication as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Flips the sign of the all the quaternion components.
             </summary>
             <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <returns>The result of the quaternion negation.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Flips the sign of the all the quaternion components.
             </summary>
             <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="result">The result of the quaternion negation as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize">
             <summary>
             Scales the quaternion magnitude to unit length.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Scales the quaternion magnitude to unit length.
             </summary>
             <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <returns>The unit length quaternion.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
             <summary>
             Scales the quaternion magnitude to unit length.
             </summary>
             <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
             <param name="result">The unit length quaternion an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Quaternion" /> in the format:
             {X:[<see cref="F:Microsoft.Xna.Framework.Quaternion.X" />] Y:[<see cref="F:Microsoft.Xna.Framework.Quaternion.Y" />] Z:[<see cref="F:Microsoft.Xna.Framework.Quaternion.Z" />] W:[<see cref="F:Microsoft.Xna.Framework.Quaternion.W" />]}
             </summary>
             <returns>A <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.ToVector4">
             <summary>
             Gets a <see cref="T:Microsoft.Xna.Framework.Vector4" /> representation for this object.
             </summary>
             <returns>A <see cref="T:Microsoft.Xna.Framework.Vector4" /> representation for this object.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Addition(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Adds two quaternions.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" /> on the left of the add sign.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" /> on the right of the add sign.</param>
             <returns>Sum of the vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Division(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Divides a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> by the other <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" /> on the left of the div sign.</param>
             <param name="quaternion2">Divisor <see cref="T:Microsoft.Xna.Framework.Quaternion" /> on the right of the div sign.</param>
             <returns>The result of dividing the quaternions.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Equality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances are equal.
             </summary>
             <param name="quaternion1"><see cref="T:Microsoft.Xna.Framework.Quaternion" /> instance on the left of the equal sign.</param>
             <param name="quaternion2"><see cref="T:Microsoft.Xna.Framework.Quaternion" /> instance on the right of the equal sign.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Inequality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances are not equal.
             </summary>
             <param name="quaternion1"><see cref="T:Microsoft.Xna.Framework.Quaternion" /> instance on the left of the not equal sign.</param>
             <param name="quaternion2"><see cref="T:Microsoft.Xna.Framework.Quaternion" /> instance on the right of the not equal sign.</param>
             <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Multiplies two quaternions.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" /> on the left of the mul sign.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" /> on the right of the mul sign.</param>
             <returns>Result of the quaternions multiplication.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
             <summary>
             Multiplies the components of quaternion by a scalar.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the left of the mul sign.</param>
             <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
             <returns>Result of the quaternion multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_Subtraction(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Subtracts a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from a <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the left of the sub sign.</param>
             <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the right of the sub sign.</param>
             <returns>Result of the quaternion subtraction.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Quaternion.op_UnaryNegation(Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Flips the sign of the all the quaternion components.
             </summary>
             <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" /> on the right of the sub sign.</param>
             <returns>The result of the quaternion negation.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Rectangle">
             <summary>
             Describes a 2D-rectangle. 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Rectangle.X">
             <summary>
             The x coordinate of the top-left corner of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Rectangle.Y">
             <summary>
             The y coordinate of the top-left corner of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Rectangle.Width">
             <summary>
             The width of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Rectangle.Height">
             <summary>
             The height of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Empty">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Rectangle" /> with X=0, Y=0, Width=0, Height=0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Left">
             <summary>
             Returns the x coordinate of the left edge of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Right">
             <summary>
             Returns the x coordinate of the right edge of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Top">
             <summary>
             Returns the y coordinate of the top edge of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Bottom">
             <summary>
             Returns the y coordinate of the bottom edge of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.IsEmpty">
             <summary>
             Whether or not this <see cref="T:Microsoft.Xna.Framework.Rectangle" /> has a <see cref="F:Microsoft.Xna.Framework.Rectangle.Width" /> and
             <see cref="F:Microsoft.Xna.Framework.Rectangle.Height" /> of 0, and a <see cref="P:Microsoft.Xna.Framework.Rectangle.Location" /> of (0, 0).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Location">
             <summary>
             The top-left coordinates of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Size">
             <summary>
             The width-height coordinates of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Rectangle.Center">
             <summary>
             A <see cref="T:Microsoft.Xna.Framework.Point" /> located in the center of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <remarks>
             If <see cref="F:Microsoft.Xna.Framework.Rectangle.Width" /> or <see cref="F:Microsoft.Xna.Framework.Rectangle.Height" /> is an odd number,
             the center point will be rounded down.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Rectangle" /> struct, with the specified
             position, width, and height.
             </summary>
             <param name="x">The x coordinate of the top-left corner of the created <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="y">The y coordinate of the top-left corner of the created <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="width">The width of the created <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="height">The height of the created <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.#ctor(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
             <summary>
             Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Rectangle" /> struct, with the specified
             location and size.
             </summary>
             <param name="location">The x and y coordinates of the top-left corner of the created <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="size">The width and height of the created <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.op_Equality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Rectangle" /> instances are equal.
             </summary>
             <param name="a"><see cref="T:Microsoft.Xna.Framework.Rectangle" /> instance on the left of the equal sign.</param>
             <param name="b"><see cref="T:Microsoft.Xna.Framework.Rectangle" /> instance on the right of the equal sign.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.op_Inequality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Rectangle" /> instances are not equal.
             </summary>
             <param name="a"><see cref="T:Microsoft.Xna.Framework.Rectangle" /> instance on the left of the not equal sign.</param>
             <param name="b"><see cref="T:Microsoft.Xna.Framework.Rectangle" /> instance on the right of the not equal sign.</param>
             <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(System.Int32,System.Int32)">
             <summary>
             Gets whether or not the provided coordinates lie within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="x">The x coordinate of the point to check for containment.</param>
             <param name="y">The y coordinate of the point to check for containment.</param>
             <returns><c>true</c> if the provided coordinates lie inside this <see cref="T:Microsoft.Xna.Framework.Rectangle" />; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(System.Single,System.Single)">
             <summary>
             Gets whether or not the provided coordinates lie within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="x">The x coordinate of the point to check for containment.</param>
             <param name="y">The y coordinate of the point to check for containment.</param>
             <returns><c>true</c> if the provided coordinates lie inside this <see cref="T:Microsoft.Xna.Framework.Rectangle" />; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point)">
             <summary>
             Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Point" /> lies within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="value">The coordinates to check for inclusion in this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <returns><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Point" /> lies inside this <see cref="T:Microsoft.Xna.Framework.Rectangle" />; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Point@,System.Boolean@)">
             <summary>
             Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Point" /> lies within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="value">The coordinates to check for inclusion in this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="result"><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Point" /> lies inside this <see cref="T:Microsoft.Xna.Framework.Rectangle" />; <c>false</c> otherwise. As an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Vector2)">
             <summary>
             Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Vector2" /> lies within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="value">The coordinates to check for inclusion in this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <returns><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Vector2" /> lies inside this <see cref="T:Microsoft.Xna.Framework.Rectangle" />; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Vector2@,System.Boolean@)">
             <summary>
             Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Vector2" /> lies within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="value">The coordinates to check for inclusion in this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="result"><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Vector2" /> lies inside this <see cref="T:Microsoft.Xna.Framework.Rectangle" />; <c>false</c> otherwise. As an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Rectangle" /> lies within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="value">The <see cref="T:Microsoft.Xna.Framework.Rectangle" /> to check for inclusion in this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <returns><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Rectangle" />'s bounds lie entirely inside this <see cref="T:Microsoft.Xna.Framework.Rectangle" />; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Contains(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)">
             <summary>
             Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Rectangle" /> lies within the bounds of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="value">The <see cref="T:Microsoft.Xna.Framework.Rectangle" /> to check for inclusion in this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="result"><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Rectangle" />'s bounds lie entirely inside this <see cref="T:Microsoft.Xna.Framework.Rectangle" />; <c>false</c> otherwise. As an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Equals(System.Object)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:System.Object" />.
             </summary>
             <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Equals(Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="other">The <see cref="T:Microsoft.Xna.Framework.Rectangle" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.GetHashCode">
             <summary>
             Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Inflate(System.Int32,System.Int32)">
             <summary>
             Adjusts the edges of this <see cref="T:Microsoft.Xna.Framework.Rectangle" /> by specified horizontal and vertical amounts. 
             </summary>
             <param name="horizontalAmount">Value to adjust the left and right edges.</param>
             <param name="verticalAmount">Value to adjust the top and bottom edges.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Inflate(System.Single,System.Single)">
             <summary>
             Adjusts the edges of this <see cref="T:Microsoft.Xna.Framework.Rectangle" /> by specified horizontal and vertical amounts. 
             </summary>
             <param name="horizontalAmount">Value to adjust the left and right edges.</param>
             <param name="verticalAmount">Value to adjust the top and bottom edges.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Gets whether or not the other <see cref="T:Microsoft.Xna.Framework.Rectangle" /> intersects with this rectangle.
             </summary>
             <param name="value">The other rectangle for testing.</param>
             <returns><c>true</c> if other <see cref="T:Microsoft.Xna.Framework.Rectangle" /> intersects with this rectangle; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Intersects(Microsoft.Xna.Framework.Rectangle@,System.Boolean@)">
             <summary>
             Gets whether or not the other <see cref="T:Microsoft.Xna.Framework.Rectangle" /> intersects with this rectangle.
             </summary>
             <param name="value">The other rectangle for testing.</param>
             <param name="result"><c>true</c> if other <see cref="T:Microsoft.Xna.Framework.Rectangle" /> intersects with this rectangle; <c>false</c> otherwise. As an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Rectangle" /> that contains overlapping region of two other rectangles.
             </summary>
             <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <returns>Overlapping region of the two rectangles.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Intersect(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Rectangle" /> that contains overlapping region of two other rectangles.
             </summary>
             <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="result">Overlapping region of the two rectangles as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(System.Int32,System.Int32)">
             <summary>
             Changes the <see cref="P:Microsoft.Xna.Framework.Rectangle.Location" /> of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="offsetX">The x coordinate to add to this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="offsetY">The y coordinate to add to this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(System.Single,System.Single)">
             <summary>
             Changes the <see cref="P:Microsoft.Xna.Framework.Rectangle.Location" /> of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="offsetX">The x coordinate to add to this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="offsetY">The y coordinate to add to this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Point)">
             <summary>
             Changes the <see cref="P:Microsoft.Xna.Framework.Rectangle.Location" /> of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="amount">The x and y components to add to this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Vector2)">
             <summary>
             Changes the <see cref="P:Microsoft.Xna.Framework.Rectangle.Location" /> of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
             </summary>
             <param name="amount">The x and y components to add to this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Rectangle" /> in the format:
             {X:[<see cref="F:Microsoft.Xna.Framework.Rectangle.X" />] Y:[<see cref="F:Microsoft.Xna.Framework.Rectangle.Y" />] Width:[<see cref="F:Microsoft.Xna.Framework.Rectangle.Width" />] Height:[<see cref="F:Microsoft.Xna.Framework.Rectangle.Height" />]}
             </summary>
             <returns><see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Rectangle" /> that completely contains two other rectangles.
             </summary>
             <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <returns>The union of the two rectangles.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Rectangle.Union(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Rectangle" /> that completely contains two other rectangles.
             </summary>
             <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Rectangle" />.</param>
             <param name="result">The union of the two rectangles as an output parameter.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.TextInputEventArgs">
             <summary>
             This class is used for the game window's TextInput event as EventArgs.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Threading.IsOnUIThread">
             <summary>
             Checks if the code is currently running on the UI thread.
             </summary>
             <returns>true if the code is currently running on the UI thread.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Threading.EnsureUIThread">
             <summary>
             Throws an exception if the code is not currently running on the UI thread.
             </summary>
             <exception cref="T:System.InvalidOperationException">Thrown if the code is not currently running on the UI thread.</exception>
            </member>
        <member name="M:Microsoft.Xna.Framework.Threading.BlockOnUIThread(System.Action)">
             <summary>
             Runs the given action on the UI thread and blocks the current thread while the action is running.
             If the current thread is the UI thread, the action will run immediately.
             </summary>
             <param name="action">The action to be run on the UI thread</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.TitleContainer.OpenStream(System.String)">
             <summary>
             Returns an open stream to an exsiting file in the title storage area.
             </summary>
             <param name="name">The filepath relative to the title storage area.</param>
             <returns>A open stream or null if the file is not found.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Vector2">
             <summary>
             Describes a 2D-vector.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Vector2.X">
             <summary>
             The x coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector2" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Vector2.Y">
             <summary>
             The y coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector2" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector2.Zero">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector2" /> with components 0, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector2.One">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector2" /> with components 1, 1.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector2.UnitX">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector2" /> with components 1, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector2.UnitY">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector2" /> with components 0, 1.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single,System.Single)">
             <summary>
             Constructs a 2d vector with X and Y from two values.
             </summary>
             <param name="x">The x coordinate in 2d-space.</param>
             <param name="y">The y coordinate in 2d-space.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single)">
             <summary>
             Constructs a 2d vector with X and Y set to the same value.
             </summary>
             <param name="value">The x and y coordinates in 2d-space.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Microsoft.Xna.Framework.Vector2)">
             <summary>
             Inverts values in the specified <see cref="T:Microsoft.Xna.Framework.Vector2" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the right of the sub sign.</param>
             <returns>Result of the inversion.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Adds two vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the left of the add sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the right of the add sign.</param>
             <returns>Sum of the vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Subtracts a <see cref="T:Microsoft.Xna.Framework.Vector2" /> from a <see cref="T:Microsoft.Xna.Framework.Vector2" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the left of the sub sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the right of the sub sign.</param>
             <returns>Result of the vector subtraction.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Multiplies the components of two vectors by each other.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the left of the mul sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the right of the mul sign.</param>
             <returns>Result of the vector multiplication.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
             <summary>
             Multiplies the components of vector by a scalar.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the left of the mul sign.</param>
             <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
             <returns>Result of the vector multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Multiplies the components of vector by a scalar.
             </summary>
             <param name="scaleFactor">Scalar value on the left of the mul sign.</param>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the right of the mul sign.</param>
             <returns>Result of the vector multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector2" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the left of the div sign.</param>
             <param name="value2">Divisor <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the right of the div sign.</param>
             <returns>The result of dividing the vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,System.Single)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector2" /> by a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> on the left of the div sign.</param>
             <param name="divider">Divisor scalar on the right of the div sign.</param>
             <returns>The result of dividing a vector by a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Equality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances are equal.
             </summary>
             <param name="value1"><see cref="T:Microsoft.Xna.Framework.Vector2" /> instance on the left of the equal sign.</param>
             <param name="value2"><see cref="T:Microsoft.Xna.Framework.Vector2" /> instance on the right of the equal sign.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.op_Inequality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances are not equal.
             </summary>
             <param name="value1"><see cref="T:Microsoft.Xna.Framework.Vector2" /> instance on the left of the not equal sign.</param>
             <param name="value2"><see cref="T:Microsoft.Xna.Framework.Vector2" /> instance on the right of the not equal sign.</param>
             <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Performs vector addition on <paramref name="value1" /> and <paramref name="value2" />.
             </summary>
             <param name="value1">The first vector to add.</param>
             <param name="value2">The second vector to add.</param>
             <returns>The result of the vector addition.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Performs vector addition on <paramref name="value1" /> and
             <paramref name="value2" />, storing the result of the
             addition in <paramref name="result" />.
             </summary>
             <param name="value1">The first vector to add.</param>
             <param name="value2">The second vector to add.</param>
             <param name="result">The result of the vector addition.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 2d-triangle.
             </summary>
             <param name="value1">The first vector of 2d-triangle.</param>
             <param name="value2">The second vector of 2d-triangle.</param>
             <param name="value3">The third vector of 2d-triangle.</param>
             <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 2d-triangle.</param>
             <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 2d-triangle.</param>
             <returns>The cartesian translation of barycentric coordinates.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,System.Single,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 2d-triangle.
             </summary>
             <param name="value1">The first vector of 2d-triangle.</param>
             <param name="value2">The second vector of 2d-triangle.</param>
             <param name="value3">The third vector of 2d-triangle.</param>
             <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 2d-triangle.</param>
             <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 2d-triangle.</param>
             <param name="result">The cartesian translation of barycentric coordinates as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains CatmullRom interpolation of the specified vectors.
             </summary>
             <param name="value1">The first vector in interpolation.</param>
             <param name="value2">The second vector in interpolation.</param>
             <param name="value3">The third vector in interpolation.</param>
             <param name="value4">The fourth vector in interpolation.</param>
             <param name="amount">Weighting factor.</param>
             <returns>The result of CatmullRom interpolation.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains CatmullRom interpolation of the specified vectors.
             </summary>
             <param name="value1">The first vector in interpolation.</param>
             <param name="value2">The second vector in interpolation.</param>
             <param name="value3">The third vector in interpolation.</param>
             <param name="value4">The fourth vector in interpolation.</param>
             <param name="amount">Weighting factor.</param>
             <param name="result">The result of CatmullRom interpolation as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Clamps the specified value within a range.
             </summary>
             <param name="value1">The value to clamp.</param>
             <param name="min">The min value.</param>
             <param name="max">The max value.</param>
             <returns>The clamped value.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Clamps the specified value within a range.
             </summary>
             <param name="value1">The value to clamp.</param>
             <param name="min">The min value.</param>
             <param name="max">The max value.</param>
             <param name="result">The clamped value as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Returns the distance between two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The distance between two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
             <summary>
             Returns the distance between two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The distance between two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Returns the squared distance between two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The squared distance between two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
             <summary>
             Returns the squared distance between two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The squared distance between two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector2" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="value2">Divisor <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <returns>The result of dividing the vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector2" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="value2">Divisor <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="result">The result of dividing the vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,System.Single)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector2" /> by a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="divider">Divisor scalar.</param>
             <returns>The result of dividing a vector by a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector2" /> by a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="divider">Divisor scalar.</param>
             <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Returns a dot product of two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The dot product of two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
             <summary>
             Returns a dot product of two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The dot product of two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Equals(System.Object)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:System.Object" />.
             </summary>
             <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Equals(Microsoft.Xna.Framework.Vector2)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Vector2" />.
             </summary>
             <param name="other">The <see cref="T:Microsoft.Xna.Framework.Vector2" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.GetHashCode">
             <summary>
             Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Vector2" />.
             </summary>
             <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Vector2" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains hermite spline interpolation.
             </summary>
             <param name="value1">The first position vector.</param>
             <param name="tangent1">The first tangent vector.</param>
             <param name="value2">The second position vector.</param>
             <param name="tangent2">The second tangent vector.</param>
             <param name="amount">Weighting factor.</param>
             <returns>The hermite spline interpolation vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains hermite spline interpolation.
             </summary>
             <param name="value1">The first position vector.</param>
             <param name="tangent1">The first tangent vector.</param>
             <param name="value2">The second position vector.</param>
             <param name="tangent2">The second tangent vector.</param>
             <param name="amount">Weighting factor.</param>
             <param name="result">The hermite spline interpolation vector as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Length">
             <summary>
             Returns the length of this <see cref="T:Microsoft.Xna.Framework.Vector2" />.
             </summary>
             <returns>The length of this <see cref="T:Microsoft.Xna.Framework.Vector2" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.LengthSquared">
             <summary>
             Returns the squared length of this <see cref="T:Microsoft.Xna.Framework.Vector2" />.
             </summary>
             <returns>The squared length of this <see cref="T:Microsoft.Xna.Framework.Vector2" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains linear interpolation of the specified vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <returns>The result of linear interpolation of the specified vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains linear interpolation of the specified vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.LerpPrecise(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains linear interpolation of the specified vectors.
             Uses <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> on MathHelper for the interpolation.
             Less efficient but more precise compared to <see cref="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)" />.
             See remarks section of <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> on MathHelper for more info.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <returns>The result of linear interpolation of the specified vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.LerpPrecise(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains linear interpolation of the specified vectors.
             Uses <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> on MathHelper for the interpolation.
             Less efficient but more precise compared to <see cref="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)" />.
             See remarks section of <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> on MathHelper for more info.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a maximal values from the two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2" /> with maximal values from the two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a maximal values from the two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector2" /> with maximal values from the two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a minimal values from the two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2" /> with minimal values from the two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a minimal values from the two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector2" /> with minimal values from the two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a multiplication of two vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <returns>The result of the vector multiplication.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a multiplication of two vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="result">The result of the vector multiplication as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Vector2" /> and a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="scaleFactor">Scalar value.</param>
             <returns>The result of the vector multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Vector2" /> and a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="scaleFactor">Scalar value.</param>
             <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains the specified vector inversion.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <returns>The result of the vector inversion.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains the specified vector inversion.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="result">The result of the vector inversion as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Normalize">
             <summary>
             Turns this <see cref="T:Microsoft.Xna.Framework.Vector2" /> to a unit vector with the same direction.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a normalized values from another vector.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <returns>Unit vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a normalized values from another vector.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="result">Unit vector as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains reflect vector of the given vector and normal.
             </summary>
             <param name="vector">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="normal">Reflection normal.</param>
             <returns>Reflected vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains reflect vector of the given vector and normal.
             </summary>
             <param name="vector">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="normal">Reflection normal.</param>
             <param name="result">Reflected vector as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains cubic interpolation of the specified vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="amount">Weighting value.</param>
             <returns>Cubic interpolation of the specified vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains cubic interpolation of the specified vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="amount">Weighting value.</param>
             <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains subtraction of on <see cref="T:Microsoft.Xna.Framework.Vector2" /> from a another.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <returns>The result of the vector subtraction.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains subtraction of on <see cref="T:Microsoft.Xna.Framework.Vector2" /> from a another.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="result">The result of the vector subtraction as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Vector2" /> in the format:
             {X:[<see cref="F:Microsoft.Xna.Framework.Vector2.X" />] Y:[<see cref="F:Microsoft.Xna.Framework.Vector2.Y" />]}
             </summary>
             <returns>A <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Vector2" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.ToPoint">
             <summary>
             Gets a <see cref="T:Microsoft.Xna.Framework.Point" /> representation for this object.
             </summary>
             <returns>A <see cref="T:Microsoft.Xna.Framework.Point" /> representation for this object.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="position">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector2" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="position">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector2" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />, representing the rotation.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector2" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />, representing the rotation.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector2" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
             <summary>
             Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="sourceIndex">The starting index of transformation in the source array.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="destinationArray">Destination array.</param>
             <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector2" /> should be written.</param>
             <param name="length">The number of vectors to be transformed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
             <summary>
             Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="sourceIndex">The starting index of transformation in the source array.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <param name="destinationArray">Destination array.</param>
             <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector2" /> should be written.</param>
             <param name="length">The number of vectors to be transformed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])">
             <summary>
             Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="destinationArray">Destination array.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[])">
             <summary>
             Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <param name="destinationArray">Destination array.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a transformation of the specified normal by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="normal">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> which represents a normal vector.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>Transformed normal.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a transformation of the specified normal by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="normal">Source <see cref="T:Microsoft.Xna.Framework.Vector2" /> which represents a normal vector.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">Transformed normal as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
             <summary>
             Apply transformation on normals within array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="sourceIndex">The starting index of transformation in the source array.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="destinationArray">Destination array.</param>
             <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector2" /> should be written.</param>
             <param name="length">The number of normals to be transformed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])">
             <summary>
             Apply transformation on all normals within array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="destinationArray">Destination array.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Vector3">
             <summary>
             Describes a 3D-vector.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Vector3.X">
             <summary>
             The x coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Vector3.Y">
             <summary>
             The y coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Vector3.Z">
             <summary>
             The z coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Zero">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with components 0, 0, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.One">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with components 1, 1, 1.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.UnitX">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with components 1, 0, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.UnitY">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with components 0, 1, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.UnitZ">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with components 0, 0, 1.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Up">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with components 0, 1, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Down">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with components 0, -1, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Right">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with components 1, 0, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Left">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with components -1, 0, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Forward">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with components 0, 0, -1.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector3.Backward">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with components 0, 0, 1.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single,System.Single,System.Single)">
             <summary>
             Constructs a 3d vector with X, Y and Z from three values.
             </summary>
             <param name="x">The x coordinate in 3d-space.</param>
             <param name="y">The y coordinate in 3d-space.</param>
             <param name="z">The z coordinate in 3d-space.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single)">
             <summary>
             Constructs a 3d vector with X, Y and Z set to the same value.
             </summary>
             <param name="value">The x, y and z coordinates in 3d-space.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
             <summary>
             Constructs a 3d vector with X, Y from <see cref="T:Microsoft.Xna.Framework.Vector2" /> and Z from a scalar.
             </summary>
             <param name="value">The x and y coordinates in 3d-space.</param>
             <param name="z">The z coordinate in 3d-space.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Performs vector addition on <paramref name="value1" /> and <paramref name="value2" />.
             </summary>
             <param name="value1">The first vector to add.</param>
             <param name="value2">The second vector to add.</param>
             <returns>The result of the vector addition.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Performs vector addition on <paramref name="value1" /> and
             <paramref name="value2" />, storing the result of the
             addition in <paramref name="result" />.
             </summary>
             <param name="value1">The first vector to add.</param>
             <param name="value2">The second vector to add.</param>
             <param name="result">The result of the vector addition.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 3d-triangle.
             </summary>
             <param name="value1">The first vector of 3d-triangle.</param>
             <param name="value2">The second vector of 3d-triangle.</param>
             <param name="value3">The third vector of 3d-triangle.</param>
             <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 3d-triangle.</param>
             <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 3d-triangle.</param>
             <returns>The cartesian translation of barycentric coordinates.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 3d-triangle.
             </summary>
             <param name="value1">The first vector of 3d-triangle.</param>
             <param name="value2">The second vector of 3d-triangle.</param>
             <param name="value3">The third vector of 3d-triangle.</param>
             <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 3d-triangle.</param>
             <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 3d-triangle.</param>
             <param name="result">The cartesian translation of barycentric coordinates as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains CatmullRom interpolation of the specified vectors.
             </summary>
             <param name="value1">The first vector in interpolation.</param>
             <param name="value2">The second vector in interpolation.</param>
             <param name="value3">The third vector in interpolation.</param>
             <param name="value4">The fourth vector in interpolation.</param>
             <param name="amount">Weighting factor.</param>
             <returns>The result of CatmullRom interpolation.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains CatmullRom interpolation of the specified vectors.
             </summary>
             <param name="value1">The first vector in interpolation.</param>
             <param name="value2">The second vector in interpolation.</param>
             <param name="value3">The third vector in interpolation.</param>
             <param name="value4">The fourth vector in interpolation.</param>
             <param name="amount">Weighting factor.</param>
             <param name="result">The result of CatmullRom interpolation as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Clamps the specified value within a range.
             </summary>
             <param name="value1">The value to clamp.</param>
             <param name="min">The min value.</param>
             <param name="max">The max value.</param>
             <returns>The clamped value.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Clamps the specified value within a range.
             </summary>
             <param name="value1">The value to clamp.</param>
             <param name="min">The min value.</param>
             <param name="max">The max value.</param>
             <param name="result">The clamped value as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Computes the cross product of two vectors.
             </summary>
             <param name="vector1">The first vector.</param>
             <param name="vector2">The second vector.</param>
             <returns>The cross product of two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Computes the cross product of two vectors.
             </summary>
             <param name="vector1">The first vector.</param>
             <param name="vector2">The second vector.</param>
             <param name="result">The cross product of two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Returns the distance between two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The distance between two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
             <summary>
             Returns the distance between two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The distance between two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Returns the squared distance between two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The squared distance between two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
             <summary>
             Returns the squared distance between two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The squared distance between two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="value2">Divisor <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <returns>The result of dividing the vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="divider">Divisor scalar.</param>
             <returns>The result of dividing a vector by a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="divider">Divisor scalar.</param>
             <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="value2">Divisor <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="result">The result of dividing the vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Returns a dot product of two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The dot product of two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
             <summary>
             Returns a dot product of two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The dot product of two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Equals(System.Object)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:System.Object" />.
             </summary>
             <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Equals(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
             <param name="other">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.GetHashCode">
             <summary>
             Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
             <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Vector3" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains hermite spline interpolation.
             </summary>
             <param name="value1">The first position vector.</param>
             <param name="tangent1">The first tangent vector.</param>
             <param name="value2">The second position vector.</param>
             <param name="tangent2">The second tangent vector.</param>
             <param name="amount">Weighting factor.</param>
             <returns>The hermite spline interpolation vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains hermite spline interpolation.
             </summary>
             <param name="value1">The first position vector.</param>
             <param name="tangent1">The first tangent vector.</param>
             <param name="value2">The second position vector.</param>
             <param name="tangent2">The second tangent vector.</param>
             <param name="amount">Weighting factor.</param>
             <param name="result">The hermite spline interpolation vector as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Length">
             <summary>
             Returns the length of this <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
             <returns>The length of this <see cref="T:Microsoft.Xna.Framework.Vector3" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.LengthSquared">
             <summary>
             Returns the squared length of this <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
             <returns>The squared length of this <see cref="T:Microsoft.Xna.Framework.Vector3" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains linear interpolation of the specified vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <returns>The result of linear interpolation of the specified vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains linear interpolation of the specified vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.LerpPrecise(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains linear interpolation of the specified vectors.
             Uses <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> on MathHelper for the interpolation.
             Less efficient but more precise compared to <see cref="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)" />.
             See remarks section of <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> on MathHelper for more info.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <returns>The result of linear interpolation of the specified vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.LerpPrecise(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains linear interpolation of the specified vectors.
             Uses <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> on MathHelper for the interpolation.
             Less efficient but more precise compared to <see cref="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)" />.
             See remarks section of <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> on MathHelper for more info.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a maximal values from the two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3" /> with maximal values from the two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a maximal values from the two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> with maximal values from the two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a minimal values from the two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3" /> with minimal values from the two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a minimal values from the two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> with minimal values from the two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a multiplication of two vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <returns>The result of the vector multiplication.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Vector3" /> and a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="scaleFactor">Scalar value.</param>
             <returns>The result of the vector multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Vector3" /> and a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="scaleFactor">Scalar value.</param>
             <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a multiplication of two vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="result">The result of the vector multiplication as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains the specified vector inversion.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <returns>The result of the vector inversion.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains the specified vector inversion.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="result">The result of the vector inversion as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Normalize">
             <summary>
             Turns this <see cref="T:Microsoft.Xna.Framework.Vector3" /> to a unit vector with the same direction.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a normalized values from another vector.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <returns>Unit vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a normalized values from another vector.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="result">Unit vector as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains reflect vector of the given vector and normal.
             </summary>
             <param name="vector">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="normal">Reflection normal.</param>
             <returns>Reflected vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains reflect vector of the given vector and normal.
             </summary>
             <param name="vector">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="normal">Reflection normal.</param>
             <param name="result">Reflected vector as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains cubic interpolation of the specified vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="amount">Weighting value.</param>
             <returns>Cubic interpolation of the specified vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains cubic interpolation of the specified vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="amount">Weighting value.</param>
             <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains subtraction of on <see cref="T:Microsoft.Xna.Framework.Vector3" /> from a another.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <returns>The result of the vector subtraction.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains subtraction of on <see cref="T:Microsoft.Xna.Framework.Vector3" /> from a another.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="result">The result of the vector subtraction as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Vector3" /> in the format:
             {X:[<see cref="F:Microsoft.Xna.Framework.Vector3.X" />] Y:[<see cref="F:Microsoft.Xna.Framework.Vector3.Y" />] Z:[<see cref="F:Microsoft.Xna.Framework.Vector3.Z" />]}
             </summary>
             <returns>A <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Vector3" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="position">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector3" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="position">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector3" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />, representing the rotation.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector3" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />, representing the rotation.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector3" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
             <summary>
             Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector3" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="sourceIndex">The starting index of transformation in the source array.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="destinationArray">Destination array.</param>
             <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector3" /> should be written.</param>
             <param name="length">The number of vectors to be transformed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
             <summary>
             Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector3" /> by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="sourceIndex">The starting index of transformation in the source array.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <param name="destinationArray">Destination array.</param>
             <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector3" /> should be written.</param>
             <param name="length">The number of vectors to be transformed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])">
             <summary>
             Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector3" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="destinationArray">Destination array.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[])">
             <summary>
             Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector3" /> by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <param name="destinationArray">Destination array.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a transformation of the specified normal by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="normal">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> which represents a normal vector.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>Transformed normal.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that contains a transformation of the specified normal by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="normal">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> which represents a normal vector.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">Transformed normal as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
             <summary>
             Apply transformation on normals within array of <see cref="T:Microsoft.Xna.Framework.Vector3" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="sourceIndex">The starting index of transformation in the source array.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="destinationArray">Destination array.</param>
             <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector3" /> should be written.</param>
             <param name="length">The number of normals to be transformed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])">
             <summary>
             Apply transformation on all normals within array of <see cref="T:Microsoft.Xna.Framework.Vector3" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="destinationArray">Destination array.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Equality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Vector3" /> instances are equal.
             </summary>
             <param name="value1"><see cref="T:Microsoft.Xna.Framework.Vector3" /> instance on the left of the equal sign.</param>
             <param name="value2"><see cref="T:Microsoft.Xna.Framework.Vector3" /> instance on the right of the equal sign.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Inequality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Vector3" /> instances are not equal.
             </summary>
             <param name="value1"><see cref="T:Microsoft.Xna.Framework.Vector3" /> instance on the left of the not equal sign.</param>
             <param name="value2"><see cref="T:Microsoft.Xna.Framework.Vector3" /> instance on the right of the not equal sign.</param>
             <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Addition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Adds two vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the left of the add sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the right of the add sign.</param>
             <returns>Sum of the vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Inverts values in the specified <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the right of the sub sign.</param>
             <returns>Result of the inversion.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Subtraction(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Subtracts a <see cref="T:Microsoft.Xna.Framework.Vector3" /> from a <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the left of the sub sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the right of the sub sign.</param>
             <returns>Result of the vector subtraction.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Multiplies the components of two vectors by each other.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the left of the mul sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the right of the mul sign.</param>
             <returns>Result of the vector multiplication.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Multiplies the components of vector by a scalar.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the left of the mul sign.</param>
             <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
             <returns>Result of the vector multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Multiplies the components of vector by a scalar.
             </summary>
             <param name="scaleFactor">Scalar value on the left of the mul sign.</param>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the right of the mul sign.</param>
             <returns>Result of the vector multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector3" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the left of the div sign.</param>
             <param name="value2">Divisor <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the right of the div sign.</param>
             <returns>The result of dividing the vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector3" /> on the left of the div sign.</param>
             <param name="divider">Divisor scalar on the right of the div sign.</param>
             <returns>The result of dividing a vector by a scalar.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Vector4">
             <summary>
             Describes a 4D-vector.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Vector4.X">
             <summary>
             The x coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Vector4.Y">
             <summary>
             The y coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Vector4.Z">
             <summary>
             The z coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Vector4.W">
             <summary>
             The w coordinate of this <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector4.Zero">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector4" /> with components 0, 0, 0, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector4.One">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector4" /> with components 1, 1, 1, 1.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector4.UnitX">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector4" /> with components 1, 0, 0, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector4.UnitY">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector4" /> with components 0, 1, 0, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector4.UnitZ">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector4" /> with components 0, 0, 1, 0.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Vector4.UnitW">
             <summary>
             Returns a <see cref="T:Microsoft.Xna.Framework.Vector4" /> with components 0, 0, 0, 1.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Constructs a 3d vector with X, Y, Z and W from four values.
             </summary>
             <param name="x">The x coordinate in 4d-space.</param>
             <param name="y">The y coordinate in 4d-space.</param>
             <param name="z">The z coordinate in 4d-space.</param>
             <param name="w">The w coordinate in 4d-space.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
             <summary>
             Constructs a 3d vector with X and Z from <see cref="T:Microsoft.Xna.Framework.Vector2" /> and Z and W from the scalars.
             </summary>
             <param name="value">The x and y coordinates in 4d-space.</param>
             <param name="z">The z coordinate in 4d-space.</param>
             <param name="w">The w coordinate in 4d-space.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
             <summary>
             Constructs a 3d vector with X, Y, Z from <see cref="T:Microsoft.Xna.Framework.Vector3" /> and W from a scalar.
             </summary>
             <param name="value">The x, y and z coordinates in 4d-space.</param>
             <param name="w">The w coordinate in 4d-space.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single)">
             <summary>
             Constructs a 4d vector with X, Y, Z and W set to the same value.
             </summary>
             <param name="value">The x, y, z and w coordinates in 4d-space.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Performs vector addition on <paramref name="value1" /> and <paramref name="value2" />.
             </summary>
             <param name="value1">The first vector to add.</param>
             <param name="value2">The second vector to add.</param>
             <returns>The result of the vector addition.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Performs vector addition on <paramref name="value1" /> and
             <paramref name="value2" />, storing the result of the
             addition in <paramref name="result" />.
             </summary>
             <param name="value1">The first vector to add.</param>
             <param name="value2">The second vector to add.</param>
             <param name="result">The result of the vector addition.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 4d-triangle.
             </summary>
             <param name="value1">The first vector of 4d-triangle.</param>
             <param name="value2">The second vector of 4d-triangle.</param>
             <param name="value3">The third vector of 4d-triangle.</param>
             <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 4d-triangle.</param>
             <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 4d-triangle.</param>
             <returns>The cartesian translation of barycentric coordinates.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,System.Single,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains the cartesian coordinates of a vector specified in barycentric coordinates and relative to 4d-triangle.
             </summary>
             <param name="value1">The first vector of 4d-triangle.</param>
             <param name="value2">The second vector of 4d-triangle.</param>
             <param name="value3">The third vector of 4d-triangle.</param>
             <param name="amount1">Barycentric scalar <c>b2</c> which represents a weighting factor towards second vector of 4d-triangle.</param>
             <param name="amount2">Barycentric scalar <c>b3</c> which represents a weighting factor towards third vector of 4d-triangle.</param>
             <param name="result">The cartesian translation of barycentric coordinates as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains CatmullRom interpolation of the specified vectors.
             </summary>
             <param name="value1">The first vector in interpolation.</param>
             <param name="value2">The second vector in interpolation.</param>
             <param name="value3">The third vector in interpolation.</param>
             <param name="value4">The fourth vector in interpolation.</param>
             <param name="amount">Weighting factor.</param>
             <returns>The result of CatmullRom interpolation.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains CatmullRom interpolation of the specified vectors.
             </summary>
             <param name="value1">The first vector in interpolation.</param>
             <param name="value2">The second vector in interpolation.</param>
             <param name="value3">The third vector in interpolation.</param>
             <param name="value4">The fourth vector in interpolation.</param>
             <param name="amount">Weighting factor.</param>
             <param name="result">The result of CatmullRom interpolation as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Clamps the specified value within a range.
             </summary>
             <param name="value1">The value to clamp.</param>
             <param name="min">The min value.</param>
             <param name="max">The max value.</param>
             <returns>The clamped value.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Clamps the specified value within a range.
             </summary>
             <param name="value1">The value to clamp.</param>
             <param name="min">The min value.</param>
             <param name="max">The max value.</param>
             <param name="result">The clamped value as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Returns the distance between two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The distance between two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
             <summary>
             Returns the distance between two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The distance between two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Returns the squared distance between two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The squared distance between two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
             <summary>
             Returns the squared distance between two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The squared distance between two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector4" /> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="value2">Divisor <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <returns>The result of dividing the vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,System.Single)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector4" /> by a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="divider">Divisor scalar.</param>
             <returns>The result of dividing a vector by a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector4" /> by a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="divider">Divisor scalar.</param>
             <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector4" /> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="value2">Divisor <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="result">The result of dividing the vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Returns a dot product of two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The dot product of two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
             <summary>
             Returns a dot product of two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The dot product of two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Equals(System.Object)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:System.Object" />.
             </summary>
             <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Equals(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
             <param name="other">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> to compare.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.GetHashCode">
             <summary>
             Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
             <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Vector4" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains hermite spline interpolation.
             </summary>
             <param name="value1">The first position vector.</param>
             <param name="tangent1">The first tangent vector.</param>
             <param name="value2">The second position vector.</param>
             <param name="tangent2">The second tangent vector.</param>
             <param name="amount">Weighting factor.</param>
             <returns>The hermite spline interpolation vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains hermite spline interpolation.
             </summary>
             <param name="value1">The first position vector.</param>
             <param name="tangent1">The first tangent vector.</param>
             <param name="value2">The second position vector.</param>
             <param name="tangent2">The second tangent vector.</param>
             <param name="amount">Weighting factor.</param>
             <param name="result">The hermite spline interpolation vector as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Length">
             <summary>
             Returns the length of this <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
             <returns>The length of this <see cref="T:Microsoft.Xna.Framework.Vector4" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.LengthSquared">
             <summary>
             Returns the squared length of this <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
             <returns>The squared length of this <see cref="T:Microsoft.Xna.Framework.Vector4" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains linear interpolation of the specified vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <returns>The result of linear interpolation of the specified vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains linear interpolation of the specified vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.LerpPrecise(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains linear interpolation of the specified vectors.
             Uses <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> on MathHelper for the interpolation.
             Less efficient but more precise compared to <see cref="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)" />.
             See remarks section of <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> on MathHelper for more info.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <returns>The result of linear interpolation of the specified vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.LerpPrecise(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains linear interpolation of the specified vectors.
             Uses <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> on MathHelper for the interpolation.
             Less efficient but more precise compared to <see cref="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)" />.
             See remarks section of <see cref="M:Microsoft.Xna.Framework.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> on MathHelper for more info.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="amount">Weighting value(between 0.0 and 1.0).</param>
             <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a maximal values from the two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> with maximal values from the two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a maximal values from the two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> with maximal values from the two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a minimal values from the two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> with minimal values from the two vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a minimal values from the two vectors.
             </summary>
             <param name="value1">The first vector.</param>
             <param name="value2">The second vector.</param>
             <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> with minimal values from the two vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a multiplication of two vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <returns>The result of the vector multiplication.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Vector4" /> and a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="scaleFactor">Scalar value.</param>
             <returns>The result of the vector multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a multiplication of <see cref="T:Microsoft.Xna.Framework.Vector4" /> and a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="scaleFactor">Scalar value.</param>
             <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a multiplication of two vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="result">The result of the vector multiplication as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains the specified vector inversion.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <returns>The result of the vector inversion.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains the specified vector inversion.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="result">The result of the vector inversion as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Normalize">
             <summary>
             Turns this <see cref="T:Microsoft.Xna.Framework.Vector4" /> to a unit vector with the same direction.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a normalized values from another vector.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <returns>Unit vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a normalized values from another vector.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="result">Unit vector as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains cubic interpolation of the specified vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="amount">Weighting value.</param>
             <returns>Cubic interpolation of the specified vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains cubic interpolation of the specified vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="amount">Weighting value.</param>
             <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains subtraction of on <see cref="T:Microsoft.Xna.Framework.Vector4" /> from a another.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <returns>The result of the vector subtraction.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains subtraction of on <see cref="T:Microsoft.Xna.Framework.Vector4" /> from a another.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="result">The result of the vector subtraction as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector4" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector4" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector4" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector4" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a transformation of 4d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector4" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Quaternion)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a transformation of 4d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector4" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector4" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector4" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector4" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a transformation of 3d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector4" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a transformation of 4d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector4" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Creates a new <see cref="T:Microsoft.Xna.Framework.Vector4" /> that contains a transformation of 4d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector4" /> as an output parameter.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32)">
             <summary>
             Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector4" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="sourceIndex">The starting index of transformation in the source array.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="destinationArray">Destination array.</param>
             <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector4" /> should be written.</param>
             <param name="length">The number of vectors to be transformed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32)">
             <summary>
             Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector4" /> by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="sourceIndex">The starting index of transformation in the source array.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <param name="destinationArray">Destination array.</param>
             <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector4" /> should be written.</param>
             <param name="length">The number of vectors to be transformed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4[])">
             <summary>
             Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector4" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="destinationArray">Destination array.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4[])">
             <summary>
             Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector4" /> by the specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> and places the results in an another array.
             </summary>
             <param name="sourceArray">Source array.</param>
             <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> which contains rotation transformation.</param>
             <param name="destinationArray">Destination array.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Vector4" /> in the format:
             {X:[<see cref="F:Microsoft.Xna.Framework.Vector4.X" />] Y:[<see cref="F:Microsoft.Xna.Framework.Vector4.Y" />] Z:[<see cref="F:Microsoft.Xna.Framework.Vector4.Z" />] W:[<see cref="F:Microsoft.Xna.Framework.Vector4.W" />]}
             </summary>
             <returns>A <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Vector4" />.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_UnaryNegation(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Inverts values in the specified <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4" /> on the right of the sub sign.</param>
             <returns>Result of the inversion.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Equality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Vector4" /> instances are equal.
             </summary>
             <param name="value1"><see cref="T:Microsoft.Xna.Framework.Vector4" /> instance on the left of the equal sign.</param>
             <param name="value2"><see cref="T:Microsoft.Xna.Framework.Vector4" /> instance on the right of the equal sign.</param>
             <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Inequality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Vector4" /> instances are not equal.
             </summary>
             <param name="value1"><see cref="T:Microsoft.Xna.Framework.Vector4" /> instance on the left of the not equal sign.</param>
             <param name="value2"><see cref="T:Microsoft.Xna.Framework.Vector4" /> instance on the right of the not equal sign.</param>
             <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Addition(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Adds two vectors.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" /> on the left of the add sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector4" /> on the right of the add sign.</param>
             <returns>Sum of the vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Subtraction(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Subtracts a <see cref="T:Microsoft.Xna.Framework.Vector4" /> from a <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" /> on the left of the sub sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector4" /> on the right of the sub sign.</param>
             <returns>Result of the vector subtraction.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Multiplies the components of two vectors by each other.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" /> on the left of the mul sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Vector4" /> on the right of the mul sign.</param>
             <returns>Result of the vector multiplication.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
             <summary>
             Multiplies the components of vector by a scalar.
             </summary>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4" /> on the left of the mul sign.</param>
             <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
             <returns>Result of the vector multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Multiplies the components of vector by a scalar.
             </summary>
             <param name="scaleFactor">Scalar value on the left of the mul sign.</param>
             <param name="value">Source <see cref="T:Microsoft.Xna.Framework.Vector4" /> on the right of the mul sign.</param>
             <returns>Result of the vector multiplication with a scalar.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector4" /> by the components of another <see cref="T:Microsoft.Xna.Framework.Vector4" />.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" /> on the left of the div sign.</param>
             <param name="value2">Divisor <see cref="T:Microsoft.Xna.Framework.Vector4" /> on the right of the div sign.</param>
             <returns>The result of dividing the vectors.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,System.Single)">
             <summary>
             Divides the components of a <see cref="T:Microsoft.Xna.Framework.Vector4" /> by a scalar.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Vector4" /> on the left of the div sign.</param>
             <param name="divider">Divisor scalar on the right of the div sign.</param>
             <returns>The result of dividing a vector by a scalar.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.AudioChannels">
             <summary>
             Represents how many channels are used in the audio data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Audio.AudioChannels.Mono">
             <summary>Single channel.</summary> 
            </member>
        <member name="F:Microsoft.Xna.Framework.Audio.AudioChannels.Stereo">
             <summary>Two channels.</summary> 
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.AudioEmitter">
             <summary>
             Represents a 3D audio emitter. Used to simulate 3D audio effects.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioEmitter.#ctor">
             <summary>Initializes a new AudioEmitter instance.</summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.DopplerScale">
             <summary>Gets or sets a scale applied to the Doppler effect between the AudioEmitter and an AudioListener.</summary>
             <remarks>
             <para>Defaults to 1.0</para>
             <para>A value of 1.0 leaves the Doppler effect unmodified.</para>
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Forward">
             <summary>Gets or sets the emitter's forward vector.</summary>
             <remarks>
             <para>Defaults to Vector3.Forward. (new Vector3(0, 0, -1))</para>
             <para>Used with AudioListener.Velocity to calculate Doppler values.</para>
             <para>The Forward and Up values must be orthonormal.</para>
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Position">
             <summary>Gets or sets the position of this emitter.</summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Up">
             <summary>Gets or sets the emitter's Up vector.</summary>
             <remarks>
             <para>Defaults to Vector3.Up. (new Vector3(0, -1, 1)).</para>
             <para>The Up and Forward vectors must be orthonormal.</para>
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.AudioEmitter.Velocity">
             <summary>Gets or sets the emitter's velocity vector.</summary>
             <remarks>
             <para>Defaults to Vector3.Zero.</para>
             <para>This value is only used when calculating Doppler values.</para>
             </remarks>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.AudioListener">
             <summary>
             Represents a 3D audio listener. Used when simulating 3D Audio.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Forward">
             <summary>Gets or sets the listener's forward vector.</summary>
             <remarks>
             <para>Defaults to Vector3.Forward. (new Vector3(0, 0, -1))</para>
             <para>Used with AudioListener.Velocity and AudioEmitter.Velocity to calculate Doppler values.</para>
             <para>The Forward and Up vectors must be orthonormal.</para>
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Position">
             <summary>Gets or sets the listener's position.</summary>
             <remarks>
             Defaults to Vector3.Zero.
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Up">
             <summary>
             Gets or sets the listener's up vector..
             </summary>
             <remarks>
             <para>Defaults to Vector3.Up (New Vector3(0, -1, 0)).</para>
             <para>Used with AudioListener.Velocity and AudioEmitter.Velocity to calculate Doppler values.</para>
             <para>The values of the Forward and Up vectors must be orthonormal.</para>
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.AudioListener.Velocity">
             <summary>Gets or sets the listener's velocity vector.</summary>
             <remarks>
             <para>Defaults to Vector3.Zero.</para>
             <para>Scaled by DopplerScale to calculate the Doppler effect value applied to a Cue.</para>
             <para>This value is only used to calculate Doppler values.</para>
             </remarks>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance">
             <summary>
             A <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffectInstance" /> for which the audio buffer is provided by the game at run time.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.IsLooped">
             <summary>
             This value has no effect on DynamicSoundEffectInstance.
             It may not be set.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.PendingBufferCount">
             <summary>
             Returns the number of audio buffers queued for playback.
             </summary>
            </member>
        <member name="E:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.BufferNeeded">
             <summary>
             The event that occurs when the number of queued audio buffers is less than or equal to 2.
             </summary>
             <remarks>
             This event may occur when <see cref="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play" /> is called or during playback when a buffer is completed.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.#ctor(System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)">
             <param name="sampleRate">Sample rate, in Hertz (Hz).</param>
             <param name="channels">Number of channels (mono or stereo).</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleDuration(System.Int32)">
             <summary>
             Returns the duration of an audio buffer of the specified size, based on the settings of this instance.
             </summary>
             <param name="sizeInBytes">Size of the buffer, in bytes.</param>
             <returns>The playback length of the buffer.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.GetSampleSizeInBytes(System.TimeSpan)">
             <summary>
             Returns the size, in bytes, of a buffer of the specified duration, based on the settings of this instance.
             </summary>
             <param name="duration">The playback length of the buffer.</param>
             <returns>The data size of the buffer, in bytes.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Play">
             <summary>
             Plays or resumes the DynamicSoundEffectInstance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Pause">
             <summary>
             Pauses playback of the DynamicSoundEffectInstance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Resume">
             <summary>
             Resumes playback of the DynamicSoundEffectInstance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop">
             <summary>
             Immediately stops playing the DynamicSoundEffectInstance.
             </summary>
             <remarks>
             Calling this also releases all queued buffers.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.Stop(System.Boolean)">
             <summary>
             Stops playing the DynamicSoundEffectInstance.
             If the <paramref name="immediate" /> parameter is false, this call has no effect.
             </summary>
             <remarks>
             Calling this also releases all queued buffers.
             </remarks>
             <param name="immediate">When set to false, this call has no effect.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[])">
             <summary>
             Queues an audio buffer for playback.
             </summary>
             <remarks>
             The buffer length must conform to alignment requirements for the audio format.
             </remarks>
             <param name="buffer">The buffer containing PCM audio data.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.SubmitBuffer(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Queues an audio buffer for playback.
             </summary>
             <remarks>
             The buffer length must conform to alignment requirements for the audio format.
             </remarks>
             <param name="buffer">The buffer containing PCM audio data.</param>
             <param name="offset">The starting position of audio data.</param>
             <param name="count">The amount of bytes to use.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstanceManager">
             <summary>
             Handles the buffer events of all DynamicSoundEffectInstance instances.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstanceManager.UpdatePlayingInstances">
             <summary>
             Updates buffer queues of the currently playing instances.
             </summary>
             <remarks>
             XNA posts <see cref="E:Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance.BufferNeeded" /> events always on the main thread.
             </remarks>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.InstancePlayLimitException">
             <summary>
             The exception thrown when the system attempts to play more SoundEffectInstances than allotted.
             </summary>
             <remarks>
             Most platforms have a hard limit on how many sounds can be played simultaneously. This exception is thrown when that limit is exceeded.
             </remarks>
            </member>
        <member name="F:Microsoft.Xna.Framework.Audio.MSADPCMToPCM.AdaptionTable">
            
            
            		 * A bunch of magical numbers that predict the sample data from the
            		 * MSADPCM wavedata. Do not attempt to understand at all costs!
            		 </member>
        <member name="M:Microsoft.Xna.Framework.Audio.MSADPCMToPCM.getNibbleBlock(System.Byte,System.Byte[])">
            
            
            		 * Splits the MSADPCM samples from each byte block.
            		 * @param block An MSADPCM sample byte
            		 * @param nibbleBlock we copy the parsed shorts into here
            		 </member>
        <member name="M:Microsoft.Xna.Framework.Audio.MSADPCMToPCM.calculateSample(System.Byte,System.Byte,System.Int16@,System.Int16@,System.Int16@)">
            
            
            		 * Calculates PCM samples based on previous samples and a nibble input.
            		 * @param nibble A parsed MSADPCM sample we got from getNibbleBlock
            		 * @param predictor The predictor we get from the MSADPCM block's preamble
            		 * @param sample_1 The first sample we use to predict the next sample
            		 * @param sample_2 The second sample we use to predict the next sample
            		 * @param delta Used to calculate the final sample
            		 * @return The calculated PCM sample
            		 </member>
        <member name="M:Microsoft.Xna.Framework.Audio.MSADPCMToPCM.MSADPCM_TO_PCM(System.IO.BinaryReader,System.Int16,System.Int16)">
            
            
            		 * Decodes MSADPCM data to signed 16-bit PCM data.
            		 * @param Source A BinaryReader containing the headerless MSADPCM data
            		 * @param numChannels The number of channels (WAVEFORMATEX nChannels)
            		 * @param blockAlign The ADPCM block size (WAVEFORMATEX nBlockAlign)
            		 * @return A byte array containing the raw 16-bit PCM wavedata
            		 *
            		 * NOTE: The original MSADPCMToPCM class returns as a short[] array!
            		 </member>
        <member name="T:Microsoft.Xna.Framework.Audio.NoAudioHardwareException">
             <summary>
             The exception thrown when no audio hardware is present, or driver issues are detected.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.NoAudioHardwareException.#ctor(System.String)">
             <param name="msg">A message describing the error.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.NoAudioHardwareException.#ctor(System.String,System.Exception)">
             <param name="msg">A message describing the error.</param>
             <param name="innerException">The exception that is the underlying cause of the current exception. If not null, the current exception is raised in a try/catch block that handled the innerException.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.OpenALSoundController.#ctor">
             <summary>
             Sets up the hardware resources used by the controller.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.OpenALSoundController.OpenSoundController">
             <summary>
             Open the sound device, sets up an audio context, and makes the new context
             the current context. Note that this method will stop the playback of
             music that was running prior to the game start. If any error occurs, then
             the state of the controller is reset.
             </summary>
             <returns>True if the sound controller was setup, and false if not.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.OpenALSoundController.CheckALError(System.String)">
             <summary>
             Checks the error state of the OpenAL driver. If a value that is not AlcError.NoError
             is returned, then the operation message and the error code is output to the console.
             </summary>
             <param name="operation">the operation message</param>
             <returns>true if an error occurs, and false if not.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.OpenALSoundController.CleanUpOpenAL">
             <summary>
             Destroys the AL context and closes the device, when they exist.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.OpenALSoundController.Dispose">
             <summary>
             Dispose of the OpenALSoundCOntroller.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.OpenALSoundController.Dispose(System.Boolean)">
             <summary>
             Dispose of the OpenALSoundCOntroller.
             </summary>
             <param name="disposing">If true, the managed resources are to be disposed.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.OpenALSoundController.ReserveSource">
             <summary>
             Reserves the given sound buffer. If there are no available sources then false is
             returned, otherwise true will be returned and the sound buffer can be played. If
             the controller was not able to setup the hardware, then false will be returned.
             </summary>
             <param name="soundBuffer">The sound buffer you want to play</param>
             <returns>True if the buffer can be played, and false if not.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.OpenALSoundController.CheckInitState">
             <summary>
             Checks if the AL controller was initialized properly. If there was an
             exception thrown during the OpenAL init, then that exception is thrown
             inside of NoAudioHardwareException.
             </summary>
             <returns>True if the controller was initialized, false if not.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.OpenALSupport.GetOpenALAudioDataAll(Foundation.NSUrl,System.Int32@,OpenTK.Audio.OpenAL.ALFormat@,System.Double@,System.Double@)">
            
            
            		 * Returns a byte buffer containing all the pcm data.
            		 </member>
        <member name="T:Microsoft.Xna.Framework.Audio.SoundEffect">
             <summary>Represents a loaded sound resource.</summary>
             <remarks>
             <para>A SoundEffect represents the buffer used to hold audio data and metadata. SoundEffectInstances are used to play from SoundEffects. Multiple SoundEffectInstance objects can be created and played from the same SoundEffect object.</para>
             <para>The only limit on the number of loaded SoundEffects is restricted by available memory. When a SoundEffect is disposed, all SoundEffectInstances created from it will become invalid.</para>
             <para>SoundEffect.Play() can be used for 'fire and forget' sounds. If advanced playback controls like volume or pitch is required, use SoundEffect.CreateInstance().</para>
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.#ctor(System.Byte[],System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)">
             <summary>
             Create a sound effect.
             </summary>
             <param name="buffer">The buffer with the sound data.</param>
             <param name="sampleRate">The sound data sample rate in hertz.</param>
             <param name="channels">The number of channels in the sound data.</param>
             <remarks>This only supports uncompressed 16bit PCM wav data.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels,System.Int32,System.Int32)">
             <summary>
             Create a sound effect.
             </summary>
             <param name="buffer">The buffer with the sound data.</param>
             <param name="offset">The offset to the start of the sound data in bytes.</param>
             <param name="count">The length of the sound data in bytes.</param>
             <param name="sampleRate">The sound data sample rate in hertz.</param>
             <param name="channels">The number of channels in the sound data.</param>
             <param name="loopStart">The position where the sound should begin looping in samples.</param>
             <param name="loopLength">The duration of the sound data loop in samples.</param>
             <remarks>This only supports uncompressed 16bit PCM wav data.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Finalize">
             <summary>
             Releases unmanaged resources and performs other cleanup operations before the
             <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffect" /> is reclaimed by garbage collection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.CreateInstance">
             <summary>
             Creates a new SoundEffectInstance for this SoundEffect.
             </summary>
             <returns>A new SoundEffectInstance for this SoundEffect.</returns>
             <remarks>Creating a SoundEffectInstance before calling SoundEffectInstance.Play() allows you to access advanced playback features, such as volume, pitch, and 3D positioning.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.FromStream(System.IO.Stream)">
             <summary>
             Creates a new SoundEffect object based on the specified data stream.
             </summary>
             <param name="stream">A stream containing the PCM wave data.</param>
             <returns>A new SoundEffect object.</returns>
             <remarks>The stream must point to the head of a valid PCM wave file in the RIFF bitstream format.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleDuration(System.Int32,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)">
             <summary>
             Returns the duration for 16bit PCM audio.
             </summary>
             <param name="sizeInBytes">The length of the audio data in bytes.</param>
             <param name="sampleRate">Sample rate, in Hertz (Hz). Must be between 8000 Hz and 48000 Hz</param>
             <param name="channels">Number of channels in the audio data.</param>
             <returns>The duration of the audio data.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.GetSampleSizeInBytes(System.TimeSpan,System.Int32,Microsoft.Xna.Framework.Audio.AudioChannels)">
             <summary>
             Returns the data size in bytes for 16bit PCM audio.
             </summary>
             <param name="duration">The total duration of the audio data.</param>
             <param name="sampleRate">Sample rate, in Hertz (Hz), of audio data. Must be between 8,000 and 48,000 Hz.</param>
             <param name="channels">Number of channels in the audio data.</param>
             <returns>The size in bytes of a single sample of audio data.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Play">
             <summary>Gets an internal SoundEffectInstance and plays it.</summary>
             <returns>True if a SoundEffectInstance was successfully played, false if not.</returns>
             <remarks>
             <para>Play returns false if more SoundEffectInstances are currently playing then the platform allows.</para>
             <para>To loop a sound or apply 3D effects, call SoundEffect.CreateInstance() and SoundEffectInstance.Play() instead.</para>
             <para>SoundEffectInstances used by SoundEffect.Play() are pooled internally.</para>
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Play(System.Single,System.Single,System.Single)">
             <summary>Gets an internal SoundEffectInstance and plays it with the specified volume, pitch, and panning.</summary>
             <returns>True if a SoundEffectInstance was successfully created and played, false if not.</returns>
             <param name="volume">Volume, ranging from 0.0 (silence) to 1.0 (full volume). Volume during playback is scaled by SoundEffect.MasterVolume.</param>
             <param name="pitch">Pitch adjustment, ranging from -1.0 (down an octave) to 0.0 (no change) to 1.0 (up an octave).</param>
             <param name="pan">Panning, ranging from -1.0 (left speaker) to 0.0 (centered), 1.0 (right speaker).</param>
             <remarks>
             <para>Play returns false if more SoundEffectInstances are currently playing then the platform allows.</para>
             <para>To apply looping or simulate 3D audio, call SoundEffect.CreateInstance() and SoundEffectInstance.Play() instead.</para>
             <para>SoundEffectInstances used by SoundEffect.Play() are pooled internally.</para>
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.GetPooledInstance(System.Boolean)">
             <summary>
             Returns a sound effect instance from the pool or null if none are available.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.Duration">
             <summary>Gets the duration of the SoundEffect.</summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.Name">
             <summary>Gets or sets the asset name of the SoundEffect.</summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume">
             <summary>
             Gets or sets the master volume scale applied to all SoundEffectInstances.
             </summary>
             <remarks>
             <para>Each SoundEffectInstance has its own Volume property that is independent to SoundEffect.MasterVolume. During playback SoundEffectInstance.Volume is multiplied by SoundEffect.MasterVolume.</para>
             <para>This property is used to adjust the volume on all current and newly created SoundEffectInstances. The volume of an individual SoundEffectInstance can be adjusted on its own.</para>
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.DistanceScale">
             <summary>
             Gets or sets the scale of distance calculations.
             </summary>
             <remarks> 
             <para>DistanceScale defaults to 1.0 and must be greater than 0.0.</para>
             <para>Higher values reduce the rate of falloff between the sound and listener.</para>
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.DopplerScale">
             <summary>
             Gets or sets the scale of Doppler calculations applied to sounds.
             </summary>
             <remarks>
             <para>DopplerScale defaults to 1.0 and must be greater or equal to 0.0</para>
             <para>Affects the relative velocity of emitters and listeners.</para>
             <para>Higher values more dramatically shift the pitch for the given relative velocity of the emitter and listener.</para>
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.SpeedOfSound">
             <summary>Returns the speed of sound used when calculating the Doppler effect..</summary>
             <remarks>
             <para>Defaults to 343.5. Value is measured in meters per second.</para>
             <para>Has no effect on distance attenuation.</para>
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffect.IsDisposed">
             <summary>Indicates whether the object is disposed.</summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Dispose">
             <summary>Releases the resources held by this <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffect" />.</summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffect.Dispose(System.Boolean)">
             <summary>
             Releases the resources held by this <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffect" />.
             </summary>
             <param name="disposing">If set to <c>true</c>, Dispose was called explicitly.</param>
             <remarks>If the disposing parameter is true, the Dispose method was called explicitly. This
             means that managed objects referenced by this instance should be disposed or released as
             required.  If the disposing parameter is false, Dispose was called by the finalizer and
             no managed objects should be touched because we do not know if they are still valid or
             not at that time.  Unmanaged resources should always be released.</remarks>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.SoundEffectInstance">
             <summary>Represents a single instance of a playing, paused, or stopped sound.</summary>
             <remarks>
             <para>SoundEffectInstances are created through SoundEffect.CreateInstance() and used internally by SoundEffect.Play()</para>
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsLooped">
             <summary>Enables or Disables whether the SoundEffectInstance should repeat after playback.</summary>
             <remarks>This value has no effect on an already playing sound.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pan">
             <summary>Gets or sets the pan, or speaker balance..</summary>
             <value>Pan value ranging from -1.0 (left speaker) to 0.0 (centered), 1.0 (right speaker). Values outside of this range will throw an exception.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pitch">
             <summary>Gets or sets the pitch adjustment.</summary>
             <value>Pitch adjustment, ranging from -1.0 (down an octave) to 0.0 (no change) to 1.0 (up an octave). Values outside of this range will throw an Exception.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Volume">
             <summary>Gets or sets the volume of the SoundEffectInstance.</summary>
             <value>Volume, ranging from 0.0 (silence) to 1.0 (full volume). Volume during playback is scaled by SoundEffect.MasterVolume.</value>
             <remarks>
             This is the volume relative to SoundEffect.MasterVolume. Before playback, this Volume property is multiplied by SoundEffect.MasterVolume when determining the final mix volume.
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.State">
             <summary>Gets the SoundEffectInstance's current playback state.</summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstance.IsDisposed">
             <summary>Indicates whether the object is disposed.</summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Finalize">
             <summary>
             Releases unmanaged resources and performs other cleanup operations before the
             <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffectInstance" /> is reclaimed by garbage collection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
             <summary>Applies 3D positioning to the SoundEffectInstance using a single listener.</summary>
             <param name="listener">Data about the listener.</param>
             <param name="emitter">Data about the source of emission.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener[],Microsoft.Xna.Framework.Audio.AudioEmitter)">
             <summary>Applies 3D positioning to the SoundEffectInstance using multiple listeners.</summary>
             <param name="listeners">Data about each listener.</param>
             <param name="emitter">Data about the source of emission.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Pause">
             <summary>Pauses playback of a SoundEffectInstance.</summary>
             <remarks>Paused instances can be resumed with SoundEffectInstance.Play() or SoundEffectInstance.Resume().</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Play">
             <summary>Plays or resumes a SoundEffectInstance.</summary>
             <remarks>Throws an exception if more sounds are playing than the platform allows.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Resume">
             <summary>Resumes playback for a SoundEffectInstance.</summary>
             <remarks>Only has effect on a SoundEffectInstance in a paused state.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop">
             <summary>Immediately stops playing a SoundEffectInstance.</summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Stop(System.Boolean)">
             <summary>Stops playing a SoundEffectInstance, either immediately or as authored.</summary>
             <param name="immediate">Determined whether the sound stops immediately, or after playing its release phase and/or transitions.</param>
             <remarks>Stopping a sound with the immediate argument set to false will allow it to play any release phases, such as fade, before coming to a stop.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose">
             <summary>Releases the resources held by this <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffectInstance" />.</summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.Dispose(System.Boolean)">
             <summary>
             Releases the resources held by this <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffectInstance" />.
             </summary>
             <param name="disposing">If set to <c>true</c>, Dispose was called explicitly.</param>
             <remarks>If the disposing parameter is true, the Dispose method was called explicitly. This
             means that managed objects referenced by this instance should be disposed or released as
             required.  If the disposing parameter is false, Dispose was called by the finalizer and
             no managed objects should be touched because we do not know if they are still valid or
             not at that time.  Unmanaged resources should always be released.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.PlatformInitialize(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Creates a standalone SoundEffectInstance from given wavedata.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.InitializeSound">
             <summary>
             Gets the OpenAL sound controller, constructs the sound buffer, and sets up the event delegates for
             the reserved and recycled events.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstance.XnaPitchToAlPitch(System.Single)">
             <summary>
             Converts the XNA [-1, 1] pitch range to OpenAL pitch (0, INF) or Android SoundPool playback rate [0.5, 2].
             <param name="xnaPitch">The pitch of the sound in the Microsoft XNA range.</param>
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundEffectInstancePool.SoundsAvailable">
             <summary>
             Gets a value indicating whether the platform has capacity for more sounds to be played at this time.
             </summary>
             <value><c>true</c> if more sounds can be played; otherwise, <c>false</c>.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstancePool.Add(Microsoft.Xna.Framework.Audio.SoundEffectInstance)">
             <summary>
             Add the specified instance to the pool if it is a pooled instance and removes it from the
             list of playing instances.
             </summary>
             <param name="inst">The SoundEffectInstance</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstancePool.Remove(Microsoft.Xna.Framework.Audio.SoundEffectInstance)">
             <summary>
             Adds the SoundEffectInstance to the list of playing instances.
             </summary>
             <param name="inst">The SoundEffectInstance to add to the playing list.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstancePool.GetInstance(System.Boolean)">
             <summary>
             Returns a pooled SoundEffectInstance if one is available, or allocates a new
             SoundEffectInstance if the pool is empty.
             </summary>
             <returns>The SoundEffectInstance.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstancePool.Update">
             <summary>
             Iterates the list of playing instances, returning them to the pool if they
             have stopped playing.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundEffectInstancePool.StopPooledInstances(Microsoft.Xna.Framework.Audio.SoundEffect)">
             <summary>
             Iterates the list of playing instances, stop them and return them to the pool if they are instances of the given SoundEffect.
             </summary>
             <param name="effect">The SoundEffect</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.SoundState">
             <summary>Described the playback state of a SoundEffectInstance.</summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Audio.SoundState.Playing">
             <summary>The SoundEffectInstance is currently playing.</summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Audio.SoundState.Paused">
             <summary>The SoundEffectInstance is currently paused.</summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Audio.SoundState.Stopped">
             <summary>The SoundEffectInstance is currently stopped.</summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.AudioCategory">
             <summary>
             Provides functionality for manipulating multiple sounds at a time.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.AudioCategory.Name">
             <summary>
             Gets the category's friendly name.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Pause">
             <summary>
             Pauses all associated sounds.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Resume">
             <summary>
             Resumes all associated paused sounds.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Stop(Microsoft.Xna.Framework.Audio.AudioStopOptions)">
             <summary>
             Stops all associated sounds.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.op_Equality(Microsoft.Xna.Framework.Audio.AudioCategory,Microsoft.Xna.Framework.Audio.AudioCategory)">
             <summary>
             Determines whether two AudioCategory instances are equal.
             </summary>
             <param name="first">First AudioCategory instance to compare.</param>
             <param name="second">Second AudioCategory instance to compare.</param>
             <returns>true if the objects are equal or false if they aren't.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.op_Inequality(Microsoft.Xna.Framework.Audio.AudioCategory,Microsoft.Xna.Framework.Audio.AudioCategory)">
             <summary>
             Determines whether two AudioCategory instances are not equal.
             </summary>
             <param name="first">First AudioCategory instance to compare.</param>
             <param name="second">Second AudioCategory instance to compare.</param>
             <returns>true if the objects are not equal or false if they are.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Equals(Microsoft.Xna.Framework.Audio.AudioCategory)">
             <summary>
             Determines whether two AudioCategory instances are equal.
             </summary>
             <param name="other">AudioCategory to compare with this instance.</param>
             <returns>true if the objects are equal or false if they aren't</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Equals(System.Object)">
             <summary>
             Determines whether two AudioCategory instances are equal.
             </summary>
             <param name="obj">Object to compare with this instance.</param>
             <returns>true if the objects are equal or false if they aren't.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.GetHashCode">
             <summary>
             Gets the hash code for this instance.
             </summary>
             <returns>Hash code for this object.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.ToString">
             <summary>
             Returns the name of this AudioCategory
             </summary>
             <returns>Friendly name of the AudioCategory</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.AudioEngine">
             <summary>
             Class used to create and manipulate code audio objects.
             </summary> 
            </member>
        <member name="F:Microsoft.Xna.Framework.Audio.AudioEngine.ContentVersion">
             <summary>
             The current content version.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.String)">
             <param name="settingsFile">Path to a XACT settings file.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.String,System.TimeSpan,System.String)">
             <param name="settingsFile">Path to a XACT settings file.</param>
             <param name="lookAheadTime">Determines how many milliseconds the engine will look ahead when determing when to transition to another sound.</param>
             <param name="rendererId">A string that specifies the audio renderer to use.</param>
             <remarks>For the best results, use a lookAheadTime of 250 milliseconds or greater.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Update">
             <summary>
             Performs periodic work required by the audio engine.
             </summary>
             <remarks>Must be called at least once per frame.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.GetCategory(System.String)">
             <summary>Returns an audio category by name.</summary>
             <param name="name">Friendly name of the category to get.</param>
             <returns>The AudioCategory with a matching name. Throws an exception if not found.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.GetGlobalVariable(System.String)">
             <summary>Gets the value of a global variable.</summary>
             <param name="name">Friendly name of the variable.</param>
             <returns>float value of the queried variable.</returns>
             <remarks>A global variable has global scope. It can be accessed by all code within a project.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.SetGlobalVariable(System.String,System.Single)">
             <summary>Sets the value of a global variable.</summary>
             <param name="name">Friendly name of the variable.</param>
             <param name="value">Value of the global variable.</param>
            </member>
        <member name="E:Microsoft.Xna.Framework.Audio.AudioEngine.Disposing">
             <summary>
             This event is triggered when the AudioEngine is disposed.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.AudioEngine.IsDisposed">
             <summary>
             Is true if the AudioEngine has been disposed.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Dispose">
             <summary>
             Disposes the AudioEngine.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.AudioStopOptions">
             <summary>Controls how Cue objects should cease playback when told to stop.</summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Audio.AudioStopOptions.AsAuthored">
             <summary>Stop normally, playing any pending release phases or transitions.</summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Audio.AudioStopOptions.Immediate">
             <summary>Immediately stops the cue, ignoring any pending release phases or transitions.</summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.Cue">
             <summary>Manages the playback of a sound or set of sounds.</summary>
             <remarks>
             <para>Cues are comprised of one or more sounds.</para>
             <para>Cues also define specific properties such as pitch or volume.</para>
             <para>Cues are referenced through SoundBank objects.</para>
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsPaused">
             <summary>Indicates whether or not the cue is currently paused.</summary>
             <remarks>IsPlaying and IsPaused both return true if a cue is paused while playing.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsPlaying">
             <summary>Indicates whether or not the cue is currently playing.</summary>
             <remarks>IsPlaying and IsPaused both return true if a cue is paused while playing.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsStopped">
             <summary>Indicates whether or not the cue is currently stopped.</summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.Cue.Name">
             <summary>Gets the friendly name of the cue.</summary>
             <remarks>The friendly name is a value set from the designer.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.Cue.Pause">
             <summary>Pauses playback.</summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.Cue.Play">
             <summary>Requests playback of a prepared or preparing Cue.</summary>
             <remarks>Calling Play when the Cue already is playing can result in an InvalidOperationException.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.Cue.Resume">
             <summary>Resumes playback of a paused Cue.</summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.Cue.Stop(Microsoft.Xna.Framework.Audio.AudioStopOptions)">
             <summary>Stops playback of a Cue.</summary>
             <param name="options">Specifies if the sound should play any pending release phases or transitions before stopping.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.Cue.SetVariable(System.String,System.Single)">
             <summary>
             Sets the value of a cue-instance variable based on its friendly name.
             </summary>
             <param name="name">Friendly name of the variable to set.</param>
             <param name="value">Value to assign to the variable.</param>
             <remarks>The friendly name is a value set from the designer.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.Cue.GetVariable(System.String)">
             <summary>Gets a cue-instance variable value based on its friendly name.</summary>
             <param name="name">Friendly name of the variable.</param>
             <returns>Value of the variable.</returns>
             <remarks>
             <para>Cue-instance variables are useful when multiple instantiations of a single cue (and its associated sounds) are required (for example, a "car" cue where there may be more than one car at any given time). While a global variable allows multiple audio elements to be controlled in unison, a cue instance variable grants discrete control of each instance of a cue, even for each copy of the same cue.</para>
             <para>The friendly name is a value set from the designer.</para>
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.Cue.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
             <summary>Updates the simulated 3D Audio settings calculated between an AudioEmitter and AudioListener.</summary>
             <param name="listener">The listener to calculate.</param>
             <param name="emitter">The emitter to calculate.</param>
             <remarks>
             <para>This must be called before Play().</para>
             <para>Calling this method automatically converts the sound to monoaural and sets the speaker mix for any sound played by this cue to a value calculated with the listener's and emitter's positions. Any stereo information in the sound will be discarded.</para>
             </remarks>
            </member>
        <member name="E:Microsoft.Xna.Framework.Audio.Cue.Disposing">
             <summary>
             This event is triggered when the Cue is disposed.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsDisposed">
             <summary>
             Is true if the Cue has been disposed.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.Cue.Dispose">
             <summary>
             Disposes the Cue.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.SoundBank">
             <summary>Represents a collection of Cues.</summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundBank.IsInUse">
             <summary>
             Is true if the SoundBank has any live Cues in use.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)">
             <param name="audioEngine">AudioEngine that will be associated with this sound bank.</param>
             <param name="fileName">Path to a .xsb SoundBank file.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.GetCue(System.String)">
             <summary>
             Returns a pooled Cue object.
             </summary>
             <param name="name">Friendly name of the cue to get.</param>
             <returns>a unique Cue object from a pool.</returns>
             <remarks>
             <para>Cue instances are unique, even when sharing the same name. This allows multiple instances to simultaneously play.</para>
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.PlayCue(System.String)">
             <summary>
             Plays a cue.
             </summary>
             <param name="name">Name of the cue to play.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.PlayCue(System.String,Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)">
             <summary>
             Plays a cue with static 3D positional information.
             </summary>
             <remarks>
             Commonly used for short lived effects.  To dynamically change the 3D 
             positional information on a cue over time use <see cref="M:Microsoft.Xna.Framework.Audio.SoundBank.GetCue(System.String)" /> and <see cref="M:Microsoft.Xna.Framework.Audio.Cue.Apply3D(Microsoft.Xna.Framework.Audio.AudioListener,Microsoft.Xna.Framework.Audio.AudioEmitter)" />.</remarks>
             <param name="name">The name of the cue to play.</param>
             <param name="listener">The listener state.</param>
             <param name="emitter">The cue emitter state.</param>
            </member>
        <member name="E:Microsoft.Xna.Framework.Audio.SoundBank.Disposing">
             <summary>
             This event is triggered when the SoundBank is disposed.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.SoundBank.IsDisposed">
             <summary>
             Is true if the SoundBank has been disposed.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.Dispose">
             <summary>
             Disposes the SoundBank.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Audio.WaveBank">
             <summary>Represents a collection of wave files.</summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.WaveBank.IsInUse">
             <summary>
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.WaveBank.IsPrepared">
             <summary>
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)">
             <param name="audioEngine">Instance of the AudioEngine to associate this wave bank with.</param>
             <param name="nonStreamingWaveBankFilename">Path to the .xwb file to load.</param>
             <remarks>This constructor immediately loads all wave data into memory at once.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String,System.Int32,System.Int16)">
             <param name="audioEngine">Instance of the AudioEngine to associate this wave bank with.</param>
             <param name="streamingWaveBankFilename">Path to the .xwb to stream from.</param>
             <param name="offset">DVD sector-aligned offset within the wave bank data file.</param>
             <param name="packetsize">Stream packet size, in sectors, to use for each stream. The minimum value is 2.</param>
             <remarks>
             <para>This constructor streams wave data as needed.</para>
             <para>Note that packetsize is in sectors, which is 2048 bytes.</para>
             <para>AudioEngine.Update() must be called at least once before using data from a streaming wave bank.</para>
             </remarks>
            </member>
        <member name="E:Microsoft.Xna.Framework.Audio.WaveBank.Disposing">
             <summary>
             This event is triggered when the WaveBank is disposed.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Audio.WaveBank.IsDisposed">
             <summary>
             Is true if the WaveBank has been disposed.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.Dispose">
             <summary>
             Disposes the WaveBank.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.XactClip.SetVolumeScale(System.Single)">
             <summary>
             Set the combined volume scale from the parent objects.
             </summary>
             <param name="volume">The volume scale.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Audio.XactClip.SetVolume(System.Single)">
             <summary>
             Set the volume for the clip.
             </summary>
             <param name="volume">The volume level.</param>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.ContentManager.LoadedAssets">
             <summary>
             Virtual property to allow a derived ContentManager to have it's assets reloaded
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.ExternalReferenceReader">
             <summary>
             External reference reader, provided for compatibility with XNA Framework built content
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.#ctor">
             <summary>
             Creates an instance of the attribute.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.CollectionItemName">
             <summary>
             Returns the overriden XML element name or the default "Item".
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerAttribute.HasCollectionItemName">
             <summary>
             Returns true if the default CollectionItemName value was overridden.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute">
             <summary>
             This is used to specify the XML element name to use for each item in a collection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.#ctor(System.String)">
             <summary>
             Creates an instance of the attribute.
             </summary>
             <param name="collectionItemName">The XML element name to use for each item in the collection.</param>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.CollectionItemName">
             <summary>
             The XML element name to use for each item in the collection.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute">
             <summary>
             This is used to specify the type to use when deserializing this object at runtime.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.#ctor(System.String)">
             <summary>
             Creates an instance of the attribute.
             </summary>
             <param name="runtimeType">The name of the type to use at runtime.</param>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.RuntimeType">
             <summary>
             The name of the type to use at runtime.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute">
             <summary>
             This is used to specify the version when deserializing this object at runtime.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.#ctor(System.Int32)">
             <summary>
             Creates an instance of the attribute.
             </summary>
             <param name="typeVersion">The version passed to the type at runtime.</param>
            </member>
        <member name="P:Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.TypeVersion">
             <summary>
             The version passed to the type at runtime.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReaderManager.PrepareType(System.String)">
             <summary>
             Removes Version, Culture and PublicKeyToken from a type string.
             </summary>
             <remarks>
             Supports multiple generic types (e.g. Dictionary&lt;TKey,TValue&gt;) and nested generic types (e.g. List&lt;List&lt;int&gt;&gt;).
             </remarks> 
             <param name="type">
             A <see cref="T:System.String" />
             </param>
             <returns>
             A <see cref="T:System.String" />
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Content.ContentTypeReaderManager.AddTypeCreator(System.String,System.Func{Microsoft.Xna.Framework.Content.ContentTypeReader})">
             <summary>
             Adds the type creator.
             </summary>
             <param name="typeString">
             Type string.
             </param>
             <param name="createFunction">
             Create function.
             </param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ClearOptions">
             <summary>
             Defines the buffers for clearing when calling <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color)" /> operation.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.Target">
             <summary>
             Color buffer.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.DepthBuffer">
             <summary>
             Depth buffer.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.Stencil">
             <summary>
             Stencil buffer.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ColorWriteChannels">
             <summary>
             Defines the color channels for render target blending operations.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.None">
             <summary>
             No channels selected.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Red">
             <summary>
             Red channel selected.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Green">
             <summary>
             Green channel selected.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Blue">
             <summary>
             Blue channel selected.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Alpha">
             <summary>
             Alpha channel selected.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.All">
             <summary>
             All channels selected.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.CubeMapFace">
             <summary>
             Defines the faces in a cube map for the <see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube" /> class.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveX">
             <summary>
             Positive X face in the cube map.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeX">
             <summary>
             Negative X face in the cube map.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveY">
             <summary>
             Positive Y face in the cube map.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeY">
             <summary>
             Negative Y face in the cube map.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveZ">
             <summary>
             Positive Z face in the cube map.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeZ">
             <summary>
             Negative Z face in the cube map.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.GraphicsDeviceInformation">
             <summary>
             The settings used in creation of the graphics device.
             See <see cref="E:Microsoft.Xna.Framework.GraphicsDeviceManager.PreparingDeviceSettings" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.GraphicsDeviceInformation.Adapter">
             <summary>
             The graphics adapter on which the graphics device will be created.
             </summary>
             <remarks>
             This is only valid on desktop systems where multiple graphics 
             adapters are possible.  Defaults to <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DefaultAdapter" />.
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.GraphicsDeviceInformation.GraphicsProfile">
             <summary>
             The requested graphics device feature set. 
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.GraphicsDeviceInformation.PresentationParameters">
             <summary>
             The settings that define how graphics will be presented to the display.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.GraphicsDeviceManager.HardwareModeSwitch">
             <summary>
             Gets or sets the boolean which defines how window switches from windowed to fullscreen state.
             "Hard" mode(true) is slow to switch, but more effecient for performance, while "soft" mode(false) is vice versa.
             The default value is <c>true</c>.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.GraphicsDeviceManager.ResetClientBounds">
             <summary>
             This method is used by MonoGame Android to adjust the game's drawn to area to fill
             as much of the screen as possible whilst retaining the aspect ratio inferred from
             aspectRatio = (PreferredBackBufferWidth / PreferredBackBufferHeight)
            
             NOTE: this is a hack that should be removed if proper back buffer to screen scaling
             is implemented. To disable it's effect, in the game's constructor use:
            
                 graphics.IsFullScreen = true;
                 graphics.PreferredBackBufferHeight = Window.ClientBounds.Height;
                 graphics.PreferredBackBufferWidth = Window.ClientBounds.Width;
            
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsMetrics">
             <summary>
             A snapshot of rendering statistics from <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Metrics" /> to be used for runtime debugging and profiling.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.ClearCount">
             <summary>
             Number of times Clear was called.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.DrawCount">
             <summary>
             Number of times Draw was called.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.PixelShaderCount">
             <summary>
             Number of times the pixel shader was changed on the GPU.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.PrimitiveCount">
             <summary>
             Number of rendered primitives.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.SpriteCount">
             <summary>
             Number of sprites and text characters rendered via <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.TargetCount">
             <summary>
             Number of times a target was changed on the GPU.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.TextureCount">
             <summary>
             Number of times a texture was changed on the GPU.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.VertexShaderCount">
             <summary>
             Number of times the vertex shader was changed on the GPU.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.op_Subtraction(Microsoft.Xna.Framework.Graphics.GraphicsMetrics,Microsoft.Xna.Framework.Graphics.GraphicsMetrics)">
             <summary>
             Returns the difference between two sets of metrics.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsMetrics" /> on the left of the sub sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsMetrics" /> on the right of the sub sign.</param>
             <returns>Difference between two sets of metrics.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.op_Addition(Microsoft.Xna.Framework.Graphics.GraphicsMetrics,Microsoft.Xna.Framework.Graphics.GraphicsMetrics)">
             <summary>
             Returns the combination of two sets of metrics.
             </summary>
             <param name="value1">Source <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsMetrics" /> on the left of the add sign.</param>
             <param name="value2">Source <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsMetrics" /> on the right of the add sign.</param>
             <returns>Combination of two sets of metrics.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.AlphaTestEffect">
             <summary>
             Built-in effect that supports alpha testing.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.World">
             <summary>
             Gets or sets the world matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.View">
             <summary>
             Gets or sets the view matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.Projection">
             <summary>
             Gets or sets the projection matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.DiffuseColor">
             <summary>
             Gets or sets the material diffuse color (range 0 to 1).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.Alpha">
             <summary>
             Gets or sets the material alpha.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.FogEnabled">
             <summary>
             Gets or sets the fog enable flag.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.FogStart">
             <summary>
             Gets or sets the fog start distance.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.FogEnd">
             <summary>
             Gets or sets the fog end distance.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.FogColor">
             <summary>
             Gets or sets the fog color.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.Texture">
             <summary>
             Gets or sets the current texture.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.VertexColorEnabled">
             <summary>
             Gets or sets whether vertex color is enabled.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.AlphaFunction">
             <summary>
             Gets or sets the alpha compare function (default Greater).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.ReferenceAlpha">
             <summary>
             Gets or sets the reference alpha value (default 0).
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
             <summary>
             Creates a new AlphaTestEffect with default parameter settings.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.#ctor(Microsoft.Xna.Framework.Graphics.AlphaTestEffect)">
             <summary>
             Creates a new AlphaTestEffect by cloning parameter settings from an existing instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.Clone">
             <summary>
             Creates a clone of the current AlphaTestEffect instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.CacheEffectParameters">
             <summary>
             Looks up shortcut references to our effect parameters.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.OnApply">
             <summary>
             Lazily computes derived parameter values immediately before applying the effect.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.BasicEffect">
             <summary>
             Built-in effect that supports optional texturing, vertex coloring, fog, and lighting.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.World">
             <summary>
             Gets or sets the world matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.View">
             <summary>
             Gets or sets the view matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Projection">
             <summary>
             Gets or sets the projection matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DiffuseColor">
             <summary>
             Gets or sets the material diffuse color (range 0 to 1).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.EmissiveColor">
             <summary>
             Gets or sets the material emissive color (range 0 to 1).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.SpecularColor">
             <summary>
             Gets or sets the material specular color (range 0 to 1).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.SpecularPower">
             <summary>
             Gets or sets the material specular power.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Alpha">
             <summary>
             Gets or sets the material alpha.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.LightingEnabled">
             <inheritdoc />
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.PreferPerPixelLighting">
             <summary>
             Gets or sets the per-pixel lighting prefer flag.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.AmbientLightColor">
             <inheritdoc />
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight0">
             <inheritdoc />
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight1">
             <inheritdoc />
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight2">
             <inheritdoc />
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogEnabled">
             <inheritdoc />
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogStart">
             <inheritdoc />
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogEnd">
             <inheritdoc />
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogColor">
             <inheritdoc />
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.TextureEnabled">
             <summary>
             Gets or sets whether texturing is enabled.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Texture">
             <summary>
             Gets or sets the current texture.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.VertexColorEnabled">
             <summary>
             Gets or sets whether vertex color is enabled.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
             <summary>
             Creates a new BasicEffect with default parameter settings.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.BasicEffect)">
             <summary>
             Creates a new BasicEffect by cloning parameter settings from an existing instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.Clone">
             <summary>
             Creates a clone of the current BasicEffect instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.EnableDefaultLighting">
             <inheritdoc />
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.CacheEffectParameters(Microsoft.Xna.Framework.Graphics.BasicEffect)">
             <summary>
             Looks up shortcut references to our effect parameters.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.OnApply">
             <summary>
             Lazily computes derived parameter values immediately before applying the effect.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.DualTextureEffect">
             <summary>
             Built-in effect that supports two-layer multitexturing.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.World">
             <summary>
             Gets or sets the world matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.View">
             <summary>
             Gets or sets the view matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Projection">
             <summary>
             Gets or sets the projection matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.DiffuseColor">
             <summary>
             Gets or sets the material diffuse color (range 0 to 1).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Alpha">
             <summary>
             Gets or sets the material alpha.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.FogEnabled">
             <summary>
             Gets or sets the fog enable flag.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.FogStart">
             <summary>
             Gets or sets the fog start distance.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.FogEnd">
             <summary>
             Gets or sets the fog end distance.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.FogColor">
             <summary>
             Gets or sets the fog color.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Texture">
             <summary>
             Gets or sets the current base texture.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Texture2">
             <summary>
             Gets or sets the current overlay texture.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.VertexColorEnabled">
             <summary>
             Gets or sets whether vertex color is enabled.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
             <summary>
             Creates a new DualTextureEffect with default parameter settings.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.#ctor(Microsoft.Xna.Framework.Graphics.DualTextureEffect)">
             <summary>
             Creates a new DualTextureEffect by cloning parameter settings from an existing instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Clone">
             <summary>
             Creates a clone of the current DualTextureEffect instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.CacheEffectParameters">
             <summary>
             Looks up shortcut references to our effect parameters.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.OnApply">
             <summary>
             Lazily computes derived parameter values immediately before applying the effect.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Effect.MGFXHeader.MGFXSignature">
             <summary>
             The MonoGame Effect file format header identifier ("MGFX"). 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Effect.MGFXHeader.MGFXVersion">
             <summary>
             The current MonoGame Effect file format versions
             used to detect old packaged content.
             </summary>
             <remarks>
             We should avoid supporting old versions for very long if at all 
             as users should be rebuilding content when packaging their game.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Clone(Microsoft.Xna.Framework.Graphics.Effect)">
             <summary>
             Clone the source into this existing object.
             </summary>
             <remarks>
             Note this is not overloaded in derived classes on purpose.  This is
             only a reason this exists is for caching effects.
             </remarks>
             <param name="cloneSource">The source effect to clone from.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Clone">
             <summary>
             Returns a deep copy of the effect where immutable types 
             are shared and mutable data is duplicated.
             </summary>
             <remarks>
             See "Cloning an Effect" in MSDN:
             http://msdn.microsoft.com/en-us/library/windows/desktop/ff476138(v=vs.85).aspx
             </remarks>
             <returns>The cloned effect.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.EffectDirtyFlags">
             <summary>
             Track which effect parameters need to be recomputed during the next OnApply.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.EffectHelpers">
             <summary>
             Helper code shared between the various built-in effects.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EffectHelpers.EnableDefaultLighting(Microsoft.Xna.Framework.Graphics.DirectionalLight,Microsoft.Xna.Framework.Graphics.DirectionalLight,Microsoft.Xna.Framework.Graphics.DirectionalLight)">
             <summary>
             Sets up the standard key/fill/back lighting rig.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EffectHelpers.SetWorldViewProjAndFog(Microsoft.Xna.Framework.Graphics.EffectDirtyFlags,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,System.Boolean,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Graphics.EffectParameter)">
             <summary>
             Lazily recomputes the world+view+projection matrix and
             fog vector based on the current effect parameter settings.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EffectHelpers.SetFogVector(Microsoft.Xna.Framework.Matrix@,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.EffectParameter)">
             <summary>
             Sets a vector which can be dotted with the object space vertex position to compute fog amount.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EffectHelpers.SetLightingMatrices(Microsoft.Xna.Framework.Graphics.EffectDirtyFlags,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Graphics.EffectParameter)">
             <summary>
             Lazily recomputes the world inverse transpose matrix and
             eye position based on the current effect parameter settings.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EffectHelpers.SetMaterialColor(System.Boolean,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Graphics.EffectParameter)">
             <summary>
             Sets the diffuse/emissive/alpha material color parameters.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterClass">
             <summary>
             Defines classes for effect parameters and shader constants.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Scalar">
             <summary>
             Scalar class type.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Vector">
             <summary>
             Vector class type.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Matrix">
             <summary>
             Matrix class type.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Object">
             <summary>
             Class type for textures, shaders or strings. 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Struct">
             <summary>
             Structure class type.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.NextStateKey">
             <summary>
             The next state key used when an effect parameter
             is updated by any of the 'set' methods.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.StateKey">
             <summary>
             The current state key which is used to detect
             if the parameter value has been changed.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.DebugDisplayString">
             <summary>
             Property referenced by the DebuggerDisplayAttribute.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterType">
             <summary>
             Defines types for effect parameters and shader constants.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Void">
             <summary>
             Pointer to void type.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Bool">
             <summary>
             Boolean type. Any non-zero will be <c>true</c>; <c>false</c> otherwise.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Int32">
             <summary>
             32-bit integer type.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Single">
             <summary>
             Float type.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.String">
             <summary>
             String type.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Texture">
             <summary>
             Any texture type.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Texture1D">
             <summary>
             1D-texture type.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Texture2D">
             <summary>
             2D-texture type.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Texture3D">
             <summary>
             3D-texture type.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.TextureCube">
             <summary>
             Cubic texture type.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.EffectResource">
             <summary>
             Internal helper for accessing the bytecode for stock effects.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect">
             <summary>
             Built-in effect that supports environment mapping.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.World">
             <summary>
             Gets or sets the world matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.View">
             <summary>
             Gets or sets the view matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Projection">
             <summary>
             Gets or sets the projection matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.DiffuseColor">
             <summary>
             Gets or sets the material diffuse color (range 0 to 1).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EmissiveColor">
             <summary>
             Gets or sets the material emissive color (range 0 to 1).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Alpha">
             <summary>
             Gets or sets the material alpha.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.AmbientLightColor">
             <summary>
             Gets or sets the ambient light color (range 0 to 1).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.DirectionalLight0">
             <summary>
             Gets the first directional light.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.DirectionalLight1">
             <summary>
             Gets the second directional light.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.DirectionalLight2">
             <summary>
             Gets the third directional light.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FogEnabled">
             <summary>
             Gets or sets the fog enable flag.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FogStart">
             <summary>
             Gets or sets the fog start distance.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FogEnd">
             <summary>
             Gets or sets the fog end distance.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FogColor">
             <summary>
             Gets or sets the fog color.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Texture">
             <summary>
             Gets or sets the current texture.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EnvironmentMap">
             <summary>
             Gets or sets the current environment map texture.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EnvironmentMapAmount">
             <summary>
             Gets or sets the amount of the environment map RGB that will be blended over 
             the base texture. Range 0 to 1, default 1. If set to zero, the RGB channels 
             of the environment map will completely ignored (but the environment map alpha 
             may still be visible if EnvironmentMapSpecular is greater than zero).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EnvironmentMapSpecular">
             <summary>
             Gets or sets the amount of the environment map alpha channel that will 
             be added to the base texture. Range 0 to 1, default 0. This can be used 
             to implement cheap specular lighting, by encoding one or more specular 
             highlight patterns into the environment map alpha channel, then setting 
             EnvironmentMapSpecular to the desired specular light color.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FresnelFactor">
             <summary>
             Gets or sets the Fresnel factor used for the environment map blending. 
             Higher values make the environment map only visible around the silhouette 
             edges of the object, while lower values make it visible everywhere. 
             Setting this property to 0 disables Fresnel entirely, making the 
             environment map equally visible regardless of view angle. The default is 
             1. Fresnel only affects the environment map RGB (the intensity of which is 
             controlled by EnvironmentMapAmount). The alpha contribution (controlled by 
             EnvironmentMapSpecular) is not affected by the Fresnel setting.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Microsoft#Xna#Framework#Graphics#IEffectLights#LightingEnabled">
             <summary>
             This effect requires lighting, so we explicitly implement
             IEffectLights.LightingEnabled, and do not allow turning it off.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
             <summary>
             Creates a new EnvironmentMapEffect with default parameter settings.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.#ctor(Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect)">
             <summary>
             Creates a new EnvironmentMapEffect by cloning parameter settings from an existing instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Clone">
             <summary>
             Creates a clone of the current EnvironmentMapEffect instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EnableDefaultLighting">
             <summary>
             Sets up the standard key/fill/back lighting rig.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.CacheEffectParameters(Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect)">
             <summary>
             Looks up shortcut references to our effect parameters.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.OnApply">
             <summary>
             Lazily computes derived parameter values immediately before applying the effect.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.IEffectFog">
             <summary>
             The common effect fog rendering parameters.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectFog.FogColor">
             <summary>
             The floating point fog color.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectFog.FogEnabled">
             <summary>
             Used to toggle the rendering of fog.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectFog.FogEnd">
             <summary>
             The world space distance from the camera at which fogging is fully applied.
             </summary>
             <remarks>
             FogEnd should be greater than FogStart.  If FogEnd and FogStart 
             are the same value everything is fully fogged.
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectFog.FogStart">
             <summary>
             The world space distance from the camera at which fogging begins.
             </summary>
             <remarks>
             FogStart should be less than FogEnd.  If FogEnd and FogStart are the
             same value everything is fully fogged.
             </remarks>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.IEffectLights">
             <summary>
             The common effect light rendering parameters.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.AmbientLightColor">
             <summary>
             The floating point ambient light color.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.DirectionalLight0">
             <summary>
             Returns the first directional light.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.DirectionalLight1">
             <summary>
             Returns the second directional light.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.DirectionalLight2">
             <summary>
             Returns the third directional light.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.LightingEnabled">
             <summary>
             Toggles the rendering of lighting.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.IEffectLights.EnableDefaultLighting">
             <summary>
             Initializes the lights to the standard key/fill/back lighting rig.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SkinnedEffect">
             <summary>
             Built-in effect for rendering skinned character models.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.World">
             <summary>
             Gets or sets the world matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.View">
             <summary>
             Gets or sets the view matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Projection">
             <summary>
             Gets or sets the projection matrix.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.DiffuseColor">
             <summary>
             Gets or sets the material diffuse color (range 0 to 1).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.EmissiveColor">
             <summary>
             Gets or sets the material emissive color (range 0 to 1).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.SpecularColor">
             <summary>
             Gets or sets the material specular color (range 0 to 1).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.SpecularPower">
             <summary>
             Gets or sets the material specular power.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Alpha">
             <summary>
             Gets or sets the material alpha.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.PreferPerPixelLighting">
             <summary>
             Gets or sets the per-pixel lighting prefer flag.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.AmbientLightColor">
             <summary>
             Gets or sets the ambient light color (range 0 to 1).
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.DirectionalLight0">
             <summary>
             Gets the first directional light.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.DirectionalLight1">
             <summary>
             Gets the second directional light.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.DirectionalLight2">
             <summary>
             Gets the third directional light.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.FogEnabled">
             <summary>
             Gets or sets the fog enable flag.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.FogStart">
             <summary>
             Gets or sets the fog start distance.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.FogEnd">
             <summary>
             Gets or sets the fog end distance.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.FogColor">
             <summary>
             Gets or sets the fog color.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Texture">
             <summary>
             Gets or sets the current texture.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.WeightsPerVertex">
             <summary>
             Gets or sets the number of skinning weights to evaluate for each vertex (1, 2, or 4).
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.SetBoneTransforms(Microsoft.Xna.Framework.Matrix[])">
             <summary>
             Sets an array of skinning bone transform matrices.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.GetBoneTransforms(System.Int32)">
             <summary>
             Gets a copy of the current skinning bone transform matrices.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Microsoft#Xna#Framework#Graphics#IEffectLights#LightingEnabled">
             <summary>
             This effect requires lighting, so we explicitly implement
             IEffectLights.LightingEnabled, and do not allow turning it off.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
             <summary>
             Creates a new SkinnedEffect with default parameter settings.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.#ctor(Microsoft.Xna.Framework.Graphics.SkinnedEffect)">
             <summary>
             Creates a new SkinnedEffect by cloning parameter settings from an existing instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Clone">
             <summary>
             Creates a clone of the current SkinnedEffect instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.EnableDefaultLighting">
             <summary>
             Sets up the standard key/fill/back lighting rig.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.CacheEffectParameters(Microsoft.Xna.Framework.Graphics.SkinnedEffect)">
             <summary>
             Looks up shortcut references to our effect parameters.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.OnApply">
             <summary>
             Lazily computes derived parameter values immediately before applying the effect.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SpriteEffect">
             <summary>
             The default effect used by SpriteBatch.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
             <summary>
             Creates a new SpriteEffect.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteEffect.#ctor(Microsoft.Xna.Framework.Graphics.SpriteEffect)">
             <summary>
             Creates a new SpriteEffect by cloning parameter settings from an existing instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteEffect.Clone">
             <summary>
             Creates a clone of the current SpriteEffect instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteEffect.CacheEffectParameters">
             <summary>
             Looks up shortcut references to our effect parameters.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteEffect.OnApply">
             <summary>
             Lazily computes derived parameter values immediately before applying the effect.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverType">
             <summary>
             Defines the driver type for graphics adapter. Usable only on DirectX platforms for now.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverType.Hardware">
             <summary>
             Hardware device been used for rendering. Maximum speed and performance.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverType.Reference">
             <summary>
             Emulates the hardware device on CPU. Slowly, only for testing.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverType.FastSoftware">
             <summary>
             Useful when <see cref="F:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverType.Hardware" /> acceleration does not work.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.UseReferenceDevice">
             <summary>
             Used to request creation of the reference graphics device, 
             or the default hardware accelerated device (when set to false).
             </summary>
             <remarks>
             This only works on DirectX platforms where a reference graphics
             device is available and must be defined before the graphics device
             is created. It defaults to false.
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.UseDriverType">
             <summary>
             Used to request creation of a specific kind of driver.
             </summary>
             <remarks>
             These values only work on DirectX platforms and must be defined before the graphics device
             is created. <see cref="F:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverType.Hardware" /> by default.
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsWideScreen">
             <summary>
             Gets a <see cref="T:System.Boolean" /> indicating whether
             <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CurrentDisplayMode" /> has a
             Width:Height ratio corresponding to a widescreen <see cref="T:Microsoft.Xna.Framework.Graphics.DisplayMode" />.
             Common widescreen modes include 16:9, 16:10 and 2:1.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsCapabilities">
             <summary>
             Provides information about the capabilities of the
             current graphics device. A very useful thread for investigating GL extenion names
             http://stackoverflow.com/questions/3881197/opengl-es-2-0-extensions-on-android-devices
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsCapabilities.SupportsNonPowerOfTwo">
             <summary>
             Whether the device fully supports non power-of-two textures, including
             mip maps and wrap modes other than CLAMP_TO_EDGE
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsCapabilities.SupportsTextureFilterAnisotropic">
             <summary>
             Whether the device supports anisotropic texture filtering
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsCapabilities.SupportsDxt1">
             <summary>
             Gets the support for DXT1
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsCapabilities.SupportsS3tc">
             <summary>
             Gets the support for S3TC (DXT1, DXT3, DXT5)
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsCapabilities.SupportsPvrtc">
             <summary>
             Gets the support for PVRTC
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsCapabilities.SupportsEtc1">
             <summary>
             Gets the support for ETC1
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsCapabilities.SupportsAtitc">
             <summary>
             Gets the support for ATITC
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsCapabilities.SupportsFramebufferObjectARB">
             <summary>
             True, if GL_ARB_framebuffer_object is supported; false otherwise.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsCapabilities.SupportsFramebufferObjectEXT">
             <summary>
             True, if GL_EXT_framebuffer_object is supported; false otherwise.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsCapabilities.MaxTextureAnisotropy">
             <summary>
             Gets the max texture anisotropy. This value typically lies
             between 0 and 16, where 0 means anisotropic filtering is not
             supported.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsCapabilities.SupportsSRgb">
             <summary>
             True, if sRGB is supported. On Direct3D platforms, this is always <code>true</code>.
             On OpenGL platforms, it is <code>true</code> if both framebuffer sRGB
             and texture sRGB are supported.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDevice._vertexShader">
             <summary>
             The active vertex shader.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDevice._pixelShader">
             <summary>
             The active pixel shader.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDevice.EffectCache">
             <summary>
             The cache of effects from unique byte streams.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Metrics">
             <summary>
             The rendering information for debugging and profiling.
             The metrics are reset every frame after draw within <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present" />. 
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.GraphicsProfile,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" /> class.
             </summary>
             <param name="adapter">The graphics adapter.</param>
             <param name="graphicsProfile">The graphics profile.</param>
             <param name="presentationParameters">The presentation options.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="presentationParameters" /> is <see langword="null" />.
             </exception>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.OnDeviceResetting">
             <summary>
             Trigger the DeviceResetting event
             Currently internal to allow the various platforms to send the event at the appropriate time.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.OnDeviceReset">
             <summary>
             Trigger the DeviceReset event to allow games to be notified of a device reset.
             Currently internal to allow the various platforms to send the event at the appropriate time.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawIndexedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Draw geometry by indexing into the vertex buffer.
             </summary>
             <param name="primitiveType">The type of primitives in the index buffer.</param>
             <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
             <param name="minVertexIndex">This is unused and remains here only for XNA API compatibility.</param>
             <param name="numVertices">This is unused and remains here only for XNA API compatibility.</param>
             <param name="startIndex">The index within the index buffer to start drawing from.</param>
             <param name="primitiveCount">The number of primitives to render from the index buffer.</param>
             <remarks>Note that minVertexIndex and numVertices are unused in MonoGame and will be ignored.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.AddDisposeAction(System.Action)">
             <summary>
             Adds a dispose action to the list of pending dispose actions. These are executed at the end of each call to Present().
             This allows GL resources to be disposed from other threads, such as the finalizer.
             </summary>
             <param name="disposeAction">The action to execute for the dispose.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ActivateShaderProgram">
             <summary>
             Activates the Current Vertex/Pixel shader pair into a program.         
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus">
             <summary>
             Describes the status of the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.Normal">
             <summary>
             The device is normal.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.Lost">
             <summary>
             The device has been lost.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.NotReset">
             <summary>
             The device has not been reset.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsProfile">
             <summary>
             Defines a set of graphic capabilities.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsProfile.Reach">
             <summary>
             Use a limited set of graphic features and capabilities, allowing the game to support the widest variety of devices.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsProfile.HiDef">
             <summary>
             Use the largest available set of graphic features and capabilities to target devices, that have more enhanced graphic capabilities.        
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsDeviceResetting">
             <summary>
             Called before the device is reset. Allows graphics resources to 
             invalidate their state so they can be recreated after the device reset.
             Warning: This may be called after a call to Dispose() up until
             the resource is garbage collected.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose(System.Boolean)">
             <summary>
             The method that derived classes should override to implement disposing of managed and native resources.
             </summary>
             <param name="disposing">True if managed objects should be disposed.</param>
             <remarks>Native resources should always be released regardless of the value of the disposing parameter.</remarks>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.IRenderTarget">
             <summary>
             Represents a render target.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IRenderTarget.Width">
             <summary>
             Gets the width of the render target in pixels
             </summary>
             <value>The width of the render target in pixels.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IRenderTarget.Height">
             <summary>
             Gets the height of the render target in pixels
             </summary>
             <value>The height of the render target in pixels.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IRenderTarget.RenderTargetUsage">
             <summary>
             Gets the usage mode of the render target.
             </summary>
             <value>The usage mode of the render target.</value>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ModelBoneCollection">
             <summary>
             Represents a set of bones associated with a model.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Item(System.String)">
             <summary>
             Retrieves a ModelBone from the collection, given the name of the bone.
             </summary>
             <param name="boneName">The name of the bone to retrieve.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.TryGetValue(System.String,Microsoft.Xna.Framework.Graphics.ModelBone@)">
             <summary>
             Finds a bone with a given name if it exists in the collection.
             </summary>
             <param name="boneName">The name of the bone to find.</param>
             <param name="value">The bone named boneName, if found.</param>
             <returns>true if the bone was found</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.GetEnumerator">
             <summary>
             Returns a ModelMeshCollection.Enumerator that can iterate through a ModelMeshCollection.
             </summary>
             <returns></returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator">
             <summary>
             Provides the ability to iterate through the bones in an ModelMeshCollection.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.Current">
             <summary>
             Gets the current element in the ModelMeshCollection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.MoveNext">
             <summary>
             Advances the enumerator to the next element of the ModelMeshCollection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.Dispose">
             <summary>
             Immediately releases the unmanaged resources used by this object.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ModelBone.ModelTransform">
             <summary>
             Transform of this node from the root of the model not from the parent
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.Model">
             <summary>
             A basic 3D model with per mesh parent bones.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Model.Bones">
             <summary>
             A collection of <see cref="T:Microsoft.Xna.Framework.Graphics.ModelBone" /> objects which describe how each mesh in the
             mesh collection for this model relates to its parent mesh.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Model.Meshes">
             <summary>
             A collection of <see cref="T:Microsoft.Xna.Framework.Graphics.ModelMesh" /> objects which compose the model. Each <see cref="T:Microsoft.Xna.Framework.Graphics.ModelMesh" />
             in a model may be moved independently and may be composed of multiple materials
             identified as <see cref="T:Microsoft.Xna.Framework.Graphics.ModelMeshPart" /> objects.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Model.Root">
             <summary>
             Root bone for this model.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Model.Tag">
             <summary>
             Custom attached object.
             <remarks>
             Skinning data is example of attached object for model.
             </remarks>
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Model.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Collections.Generic.List{Microsoft.Xna.Framework.Graphics.ModelBone},System.Collections.Generic.List{Microsoft.Xna.Framework.Graphics.ModelMesh})">
             <summary>
             Constructs a model. 
             </summary>
             <param name="graphicsDevice">A valid reference to <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" />.</param>
             <param name="bones">The collection of bones.</param>
             <param name="meshes">The collection of meshes.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Model.Draw(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Draws the model meshes.
             </summary>
             <param name="world">The world transform.</param>
             <param name="view">The view transform.</param>
             <param name="projection">The projection transform.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Model.CopyAbsoluteBoneTransformsTo(Microsoft.Xna.Framework.Matrix[])">
             <summary>
             Copies bone transforms relative to all parent bones of the each bone from this model to a given array.
             </summary>
             <param name="destinationBoneTransforms">The array receiving the transformed bones.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Model.CopyBoneTransformsFrom(Microsoft.Xna.Framework.Matrix[])">
             <summary>
             Copies bone transforms relative to <see cref="P:Microsoft.Xna.Framework.Graphics.Model.Root" /> bone from a given array to this model.
             </summary>
             <param name="sourceBoneTransforms">The array of prepared bone transform data.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Model.CopyBoneTransformsTo(Microsoft.Xna.Framework.Matrix[])">
             <summary>
             Copies bone transforms relative to <see cref="P:Microsoft.Xna.Framework.Graphics.Model.Root" /> bone from this model to a given array.
             </summary>
             <param name="destinationBoneTransforms">The array receiving the transformed bones.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshCollection">
             <summary>
             Represents a collection of ModelMesh objects.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Item(System.String)">
             <summary>
             Retrieves a ModelMesh from the collection, given the name of the mesh.
             </summary>
             <param name="meshName">The name of the mesh to retrieve.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.TryGetValue(System.String,Microsoft.Xna.Framework.Graphics.ModelMesh@)">
             <summary>
             Finds a mesh with a given name if it exists in the collection.
             </summary>
             <param name="meshName">The name of the mesh to find.</param>
             <param name="value">The mesh named meshName, if found.</param>
             <returns>true if a mesh was found</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.GetEnumerator">
             <summary>
             Returns a ModelMeshCollection.Enumerator that can iterate through a ModelMeshCollection.
             </summary>
             <returns></returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator">
             <summary>
             Provides the ability to iterate through the bones in an ModelMeshCollection.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.Current">
             <summary>
             Gets the current element in the ModelMeshCollection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.MoveNext">
             <summary>
             Advances the enumerator to the next element of the ModelMeshCollection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.Dispose">
             <summary>
             Immediately releases the unmanaged resources used by this object.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.IsComplete">
             <summary>
             Gets a value indicating whether the occlusion query has completed.
             </summary>
             <value>
             <see langword="true" /> if the occlusion query has completed; otherwise,
             <see langword="false" />.
             </value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.PixelCount">
             <summary>
             Gets the number of visible pixels.
             </summary>
             <value>The number of visible pixels.</value>
             <exception cref="T:System.InvalidOperationException">
             The occlusion query has not yet completed. Check <see cref="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.IsComplete" /> before reading
             the result!
             </exception>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.OcclusionQuery" /> class.
             </summary>
             <param name="graphicsDevice">The graphics device.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="graphicsDevice" /> is <see langword="null" />.
             </exception>
             <exception cref="T:System.NotSupportedException">
             The current graphics profile does not support occlusion queries.
             </exception>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Begin">
             <summary>
             Begins the occlusion query.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             <see cref="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Begin" /> is called again before calling <see cref="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.End" />.
             </exception>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.End">
             <summary>
             Ends the occlusion query.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             <see cref="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.End" /> is called before calling <see cref="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Begin" />.
             </exception>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8">
             <summary>
             Packed vector type containing a single 8 bit normalized W values that is ranging from 0 to 1.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.PackedValue">
             <summary>
             Gets and sets the packed value.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.#ctor(System.Single)">
             <summary>
             Creates a new instance of Alpha8.
             </summary>
             <param name="alpha">The alpha component</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToAlpha">
             <summary>
             Gets the packed vector in float format.
             </summary>
             <returns>The packed vector in Vector3 format</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Sets the packed vector from a Vector4.
             </summary>
             <param name="vector">Vector containing the components.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
             <summary>
             Gets the packed vector in Vector4 format.
             </summary>
             <returns>The packed vector in Vector4 format</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Equals(System.Object)">
             <summary>
             Compares an object with the packed vector.
             </summary>
             <param name="obj">The object to compare.</param>
             <returns>True if the object is equal to the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
             <summary>
             Compares another Alpha8 packed vector with the packed vector.
             </summary>
             <param name="other">The Alpha8 packed vector to compare.</param>
             <returns>True if the packed vectors are equal.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToString">
             <summary>
             Gets a string representation of the packed vector.
             </summary>
             <returns>A string representation of the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.GetHashCode">
             <summary>
             Gets a hash code of the packed vector.
             </summary>
             <returns>The hash code for the packed vector.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565">
             <summary>
             Packed vector type containing unsigned normalized values ranging from 0 to 1. The x and z components use 5 bits, and the y component uses 6 bits.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(System.Single,System.Single,System.Single)">
             <summary>
             Creates a new instance of Bgr565.
             </summary>
             <param name="x">The x component</param>
             <param name="y">The y component</param>
             <param name="z">The z component</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(Microsoft.Xna.Framework.Vector3)">
             <summary>
             Creates a new instance of Bgr565.
             </summary>
             <param name="vector">Vector containing the components for the packed vector.</param>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.PackedValue">
             <summary>
             Gets and sets the packed value.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToVector3">
             <summary>
             Gets the packed vector in Vector3 format.
             </summary>
             <returns>The packed vector in Vector3 format</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Sets the packed vector from a Vector4.
             </summary>
             <param name="vector">Vector containing the components.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
             <summary>
             Gets the packed vector in Vector4 format.
             </summary>
             <returns>The packed vector in Vector4 format</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(System.Object)">
             <summary>
             Compares an object with the packed vector.
             </summary>
             <param name="obj">The object to compare.</param>
             <returns>true if the object is equal to the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
             <summary>
             Compares another Bgr565 packed vector with the packed vector.
             </summary>
             <param name="other">The Bgr565 packed vector to compare.</param>
             <returns>true if the packed vectors are equal.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToString">
             <summary>
             Gets a string representation of the packed vector.
             </summary>
             <returns>A string representation of the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.GetHashCode">
             <summary>
             Gets a hash code of the packed vector.
             </summary>
             <returns>The hash code for the packed vector.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444">
             <summary>
             Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 4 bits each for x, y, z, and w.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.#ctor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Creates a new instance of Bgra4444.
             </summary>
             <param name="x">The x component</param>
             <param name="y">The y component</param>
             <param name="z">The z component</param>
             <param name="w">The w component</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.#ctor(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Creates a new instance of Bgra4444.
             </summary>
             <param name="vector">Vector containing the components for the packed vector.</param>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.PackedValue">
             <summary>
             Gets and sets the packed value.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.ToVector4">
             <summary>
             Gets the packed vector in Vector4 format.
             </summary>
             <returns>The packed vector in Vector4 format</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Sets the packed vector from a Vector4.
             </summary>
             <param name="vector">Vector containing the components.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.Equals(System.Object)">
             <summary>
             Compares an object with the packed vector.
             </summary>
             <param name="obj">The object to compare.</param>
             <returns>true if the object is equal to the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444)">
             <summary>
             Compares another Bgra4444 packed vector with the packed vector.
             </summary>
             <param name="other">The Bgra4444 packed vector to compare.</param>
             <returns>true if the packed vectors are equal.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.ToString">
             <summary>
             Gets a string representation of the packed vector.
             </summary>
             <returns>A string representation of the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.GetHashCode">
             <summary>
             Gets a hash code of the packed vector.
             </summary>
             <returns>The hash code for the packed vector.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551">
             <summary>
             Packed vector type containing unsigned normalized values ranging from 0 to 1.
             The x , y and z components use 5 bits, and the w component uses 1 bit.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.PackedValue">
             <summary>
             Gets and sets the packed value.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Creates a new instance of Bgra5551.
             </summary>
             <param name="x">The x component</param>
             <param name="y">The y component</param>
             <param name="z">The z component</param>
             <param name="w">The w component</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Creates a new instance of Bgra5551.
             </summary>
             <param name="vector">
             Vector containing the components for the packed vector.
             </param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToVector4">
             <summary>
             Gets the packed vector in Vector4 format.
             </summary>
             <returns>The packed vector in Vector4 format</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Sets the packed vector from a Vector4.
             </summary>
             <param name="vector">Vector containing the components.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(System.Object)">
             <summary>
             Compares an object with the packed vector.
             </summary>
             <param name="obj">The object to compare.</param>
             <returns>True if the object is equal to the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
             <summary>
             Compares another Bgra5551 packed vector with the packed vector.
             </summary>
             <param name="other">The Bgra5551 packed vector to compare.</param>
             <returns>True if the packed vectors are equal.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToString">
             <summary>
             Gets a string representation of the packed vector.
             </summary>
             <returns>A string representation of the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.GetHashCode">
             <summary>
             Gets a hash code of the packed vector.
             </summary>
             <returns>The hash code for the packed vector.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4">
             <summary>
             Packed vector type containing four 8-bit unsigned integer values, ranging from 0 to 255.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Initializes a new instance of the Byte4 class.
             </summary>
             <param name="vector">A vector containing the initial values for the components of the Byte4 structure.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Initializes a new instance of the Byte4 class.
             </summary>
             <param name="x">Initial value for the x component.</param>
             <param name="y">Initial value for the y component.</param>
             <param name="z">Initial value for the z component.</param>
             <param name="w">Initial value for the w component.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
             <summary>
             Compares the current instance of a class to another instance to determine whether they are different.
             </summary>
             <param name="a">The object to the left of the equality operator.</param>
             <param name="b">The object to the right of the equality operator.</param>
             <returns>true if the objects are different; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
             <summary>
             Compares the current instance of a class to another instance to determine whether they are the same.
             </summary>
             <param name="a">The object to the left of the equality operator.</param>
             <param name="b">The object to the right of the equality operator.</param>
             <returns>true if the objects are the same; false otherwise.</returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.PackedValue">
             <summary>
             Directly gets or sets the packed representation of the value.
             </summary>
             <value>The packed representation of the value.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(System.Object)">
             <summary>
             Returns a value that indicates whether the current instance is equal to a specified object.
             </summary>
             <param name="obj">The object with which to make the comparison.</param>
             <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
             <summary>
             Returns a value that indicates whether the current instance is equal to a specified object.
             </summary>
             <param name="other">The object with which to make the comparison.</param>
             <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.GetHashCode">
             <summary>
             Gets the hash code for the current instance.
             </summary>
             <returns>Hash code for the instance.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToString">
             <summary>
             Returns a string representation of the current instance.
             </summary>
             <returns>String that represents the object.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Pack(Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Packs a vector into a uint.
             </summary>
             <param name="vector">The vector containing the values to pack.</param>
             <returns>The ulong containing the packed values.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Sets the packed representation from a Vector4.
             </summary>
             <param name="vector">The vector to create the packed representation from.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToVector4">
             <summary>
             Expands the packed representation into a Vector4.
             </summary>
             <returns>The expanded vector.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4">
             <summary>
             Packed vector type containing four 16-bit floating-point values.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Initializes a new instance of the HalfVector4 structure.
             </summary>
             <param name="x">Initial value for the x component.</param>
             <param name="y">Initial value for the y component.</param>
             <param name="z">Initial value for the z component.</param>
             <param name="w">Initial value for the q component.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.#ctor(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Initializes a new instance of the HalfVector4 structure.
             </summary>
             <param name="vector">A vector containing the initial values for the components of the HalfVector4 structure.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Sets the packed representation from a Vector4.
             </summary>
             <param name="vector">The vector to create the packed representation from.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.PackHelper(Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Packs a vector into a ulong.
             </summary>
             <param name="vector">The vector containing the values to pack.</param>
             <returns>The ulong containing the packed values.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.ToVector4">
             <summary>
             Expands the packed representation into a Vector4.
             </summary>
             <returns>The expanded vector.</returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.PackedValue">
             <summary>
             Directly gets or sets the packed representation of the value.
             </summary>
             <value>The packed representation of the value.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.ToString">
             <summary>
             Returns a string representation of the current instance.
             </summary>
             <returns>String that represents the object.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.GetHashCode">
             <summary>
             Gets the hash code for the current instance.
             </summary>
             <returns>Hash code for the instance.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Equals(System.Object)">
             <summary>
             Returns a value that indicates whether the current instance is equal to a specified object.
             </summary>
             <param name="obj">The object with which to make the comparison.</param>
             <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
             <summary>
             Returns a value that indicates whether the current instance is equal to a specified object.
             </summary>
             <param name="other">The object with which to make the comparison.</param>
             <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
             <summary>
             Compares the current instance of a class to another instance to determine whether they are the same.
             </summary>
             <param name="a">The object to the left of the equality operator.</param>
             <param name="b">The object to the right of the equality operator.</param>
             <returns>true if the objects are the same; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
             <summary>
             Compares the current instance of a class to another instance to determine whether they are different.
             </summary>
             <param name="a">The object to the left of the equality operator.</param>
             <param name="b">The object to the right of the equality operator.</param>
             <returns>true if the objects are different; false otherwise.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32">
             <summary>
             Packed vector type containing two 16-bit unsigned normalized values ranging from 0 to 1.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.PackedValue">
             <summary>
             Gets and sets the packed value.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.#ctor(System.Single,System.Single)">
             <summary>
             Creates a new instance of Rg32.
             </summary>
             <param name="x">The x component</param>
             <param name="y">The y component</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.#ctor(Microsoft.Xna.Framework.Vector2)">
             <summary>
             Creates a new instance of Rg32.
             </summary>
             <param name="vector">
             Vector containing the components for the packed vector.
             </param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToVector2">
             <summary>
             Gets the packed vector in Vector2 format.
             </summary>
             <returns>The packed vector in Vector2 format</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Sets the packed vector from a Vector4.
             </summary>
             <param name="vector">Vector containing the components.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
             <summary>
             Gets the packed vector in Vector4 format.
             </summary>
             <returns>The packed vector in Vector4 format</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Equals(System.Object)">
             <summary>
             Compares an object with the packed vector.
             </summary>
             <param name="obj">The object to compare.</param>
             <returns>True if the object is equal to the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
             <summary>
             Compares another Rg32 packed vector with the packed vector.
             </summary>
             <param name="other">The Rg32 packed vector to compare.</param>
             <returns>True if the packed vectors are equal.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToString">
             <summary>
             Gets a string representation of the packed vector.
             </summary>
             <returns>A string representation of the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.GetHashCode">
             <summary>
             Gets a hash code of the packed vector.
             </summary>
             <returns>The hash code for the packed vector.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64">
             <summary>
             Packed vector type containing four 16-bit unsigned normalized values ranging from 0 to 1.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.PackedValue">
             <summary>
             Gets and sets the packed value.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.#ctor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Creates a new instance of Rgba64.
             </summary>
             <param name="x">The x component</param>
             <param name="y">The y component</param>
             <param name="z">The z component</param>
             <param name="w">The w component</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.#ctor(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Creates a new instance of Rgba64.
             </summary>
             <param name="vector">
             Vector containing the components for the packed vector.
             </param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.ToVector4">
             <summary>
             Gets the packed vector in Vector4 format.
             </summary>
             <returns>The packed vector in Vector4 format</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Sets the packed vector from a Vector4.
             </summary>
             <param name="vector">Vector containing the components.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Equals(System.Object)">
             <summary>
             Compares an object with the packed vector.
             </summary>
             <param name="obj">The object to compare.</param>
             <returns>True if the object is equal to the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
             <summary>
             Compares another Rgba64 packed vector with the packed vector.
             </summary>
             <param name="other">The Rgba64 packed vector to compare.</param>
             <returns>True if the packed vectors are equal.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.ToString">
             <summary>
             Gets a string representation of the packed vector.
             </summary>
             <returns>A string representation of the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.GetHashCode">
             <summary>
             Gets a hash code of the packed vector.
             </summary>
             <returns>The hash code for the packed vector.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102">
             <summary>
             Packed vector type containing unsigned normalized values ranging from 0 to 1.
             The x, y and z components use 10 bits, and the w component uses 2 bits.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.PackedValue">
             <summary>
             Gets and sets the packed value.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.#ctor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Creates a new instance of Rgba1010102.
             </summary>
             <param name="x">The x component</param>
             <param name="y">The y component</param>
             <param name="z">The z component</param>
             <param name="w">The w component</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.#ctor(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Creates a new instance of Rgba1010102.
             </summary>
             <param name="vector">
             Vector containing the components for the packed vector.
             </param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.ToVector4">
             <summary>
             Gets the packed vector in Vector4 format.
             </summary>
             <returns>The packed vector in Vector4 format</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Sets the packed vector from a Vector4.
             </summary>
             <param name="vector">Vector containing the components.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Equals(System.Object)">
             <summary>
             Compares an object with the packed vector.
             </summary>
             <param name="obj">The object to compare.</param>
             <returns>True if the object is equal to the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
             <summary>
             Compares another Rgba1010102 packed vector with the packed vector.
             </summary>
             <param name="other">The Rgba1010102 packed vector to compare.</param>
             <returns>True if the packed vectors are equal.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.ToString">
             <summary>
             Gets a string representation of the packed vector.
             </summary>
             <returns>A string representation of the packed vector.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.GetHashCode">
             <summary>
             Gets a hash code of the packed vector.
             </summary>
             <returns>The hash code for the packed vector.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short4">
             <summary>
             Packed vector type containing four 16-bit signed integer values.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Initializes a new instance of the Short4 class.
             </summary>
             <param name="vector">A vector containing the initial values for the components of the Short4 structure.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Initializes a new instance of the Short4 class.
             </summary>
             <param name="x">Initial value for the x component.</param>
             <param name="y">Initial value for the y component.</param>
             <param name="z">Initial value for the z component.</param>
             <param name="w">Initial value for the w component.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
             <summary>
             Compares the current instance of a class to another instance to determine whether they are different.
             </summary>
             <param name="a">The object to the left of the equality operator.</param>
             <param name="b">The object to the right of the equality operator.</param>
             <returns>true if the objects are different; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
             <summary>
             Compares the current instance of a class to another instance to determine whether they are the same.
             </summary>
             <param name="a">The object to the left of the equality operator.</param>
             <param name="b">The object to the right of the equality operator.</param>
             <returns>true if the objects are the same; false otherwise.</returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.PackedValue">
             <summary>
             Directly gets or sets the packed representation of the value.
             </summary>
             <value>The packed representation of the value.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(System.Object)">
             <summary>
             Returns a value that indicates whether the current instance is equal to a specified object.
             </summary>
             <param name="obj">The object with which to make the comparison.</param>
             <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
             <summary>
             Returns a value that indicates whether the current instance is equal to a specified object.
             </summary>
             <param name="other">The object with which to make the comparison.</param>
             <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.GetHashCode">
             <summary>
             Gets the hash code for the current instance.
             </summary>
             <returns>Hash code for the instance.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToString">
             <summary>
             Returns a string representation of the current instance.
             </summary>
             <returns>String that represents the object.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Pack(Microsoft.Xna.Framework.Vector4@)">
             <summary>
             Packs a vector into a ulong.
             </summary>
             <param name="vector">The vector containing the values to pack.</param>
             <returns>The ulong containing the packed values.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
             <summary>
             Sets the packed representation from a Vector4.
             </summary>
             <param name="vector">The vector to create the packed representation from.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToVector4">
             <summary>
             Expands the packed representation into a Vector4.
             </summary>
             <returns>The expanded vector.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PresentInterval">
             <summary>
             Defines how <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present" /> updates the game window.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Default">
             <summary>
             Equivalent to <see cref="F:Microsoft.Xna.Framework.Graphics.PresentInterval.One" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.One">
             <summary>
             The driver waits for the vertical retrace period, before updating window client area. Present operations are not affected more frequently than the screen refresh rate.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Two">
             <summary>
             The driver waits for the vertical retrace period, before updating window client area. Present operations are not affected more frequently than every second screen refresh. 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Immediate">
             <summary>
             The driver updates the window client area immediately. Present operations might be affected immediately. There is no limit for framerate.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.RenderTarget2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage,Microsoft.Xna.Framework.Graphics.Texture2D.SurfaceType)">
             <summary>
             Allows child class to specify the surface type, eg: a swap chain.
             </summary>        
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube">
             <summary>
             Represents a texture cube that can be used as a render target.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.DepthStencilFormat">
             <summary>
             Gets the depth-stencil buffer format of this render target.
             </summary>
             <value>The format of the depth-stencil buffer.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.MultiSampleCount">
             <summary>
             Gets the number of multisample locations.
             </summary>
             <value>The number of multisample locations.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.RenderTargetUsage">
             <summary>
             Gets the usage mode of this render target.
             </summary>
             <value>The usage mode of the render target.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.Microsoft#Xna#Framework#Graphics#IRenderTarget#Width">
             <inheritdoc />
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.Microsoft#Xna#Framework#Graphics#IRenderTarget#Height">
             <inheritdoc />
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube" /> class.
             </summary>
             <param name="graphicsDevice">The graphics device.</param>
             <param name="size">The width and height of a texture cube face in pixels.</param>
             <param name="mipMap"><see langword="true" /> to generate a full mipmap chain; otherwise <see langword="false" />.</param>
             <param name="preferredFormat">The preferred format of the surface.</param>
             <param name="preferredDepthFormat">The preferred format of the depth-stencil buffer.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube" /> class.
             </summary>
             <param name="graphicsDevice">The graphics device.</param>
             <param name="size">The width and height of a texture cube face in pixels.</param>
             <param name="mipMap"><see langword="true" /> to generate a full mipmap chain; otherwise <see langword="false" />.</param>
             <param name="preferredFormat">The preferred format of the surface.</param>
             <param name="preferredDepthFormat">The preferred format of the depth-stencil buffer.</param>
             <param name="preferredMultiSampleCount">The preferred number of multisample locations.</param>
             <param name="usage">The usage mode of the render target.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetUsage">
             <summary>
             Defines if the previous content in a render target is preserved when it set on the graphics device.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.DiscardContents">
             <summary>
             The render target content will not be preserved.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PreserveContents">
             <summary>
             The render target content will be preserved even if it is slow or requires extra memory.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PlatformContents">
             <summary>
             The render target content might be preserved if the platform can do so without a penalty in performance or memory usage.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.Resource">
             <summary>
             The newly created resource object.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.Name">
             <summary>
             The name of the destroyed resource.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.Tag">
             <summary>
             The resource manager tag of the destroyed resource.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SamplerStateCollection.Dirty">
             <summary>
             Mark all the sampler slots as dirty.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SetDataOptions">
             <summary>
             Defines how vertex or index buffer data will be flushed during a SetData operation.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.None">
             <summary>
             The SetData can overwrite the portions of existing data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.Discard">
             <summary>
             The SetData will discard the entire buffer. A pointer to a new memory area is returned and rendering from the previous area do not stall.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.NoOverwrite">
             <summary>
             The SetData operation will not overwrite existing data. This allows the driver to return immediately from a SetData operation and continue rendering.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ConstantBuffer.HashKey">
             <summary>
             A hash value which can be used to compare constant buffers.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Shader.Profile">
             <summary>
             Returns the platform specific shader profile identifier.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Shader.HashKey">
             <summary>
             A hash value which can be used to compare shaders.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ShaderProgramCache">
             <summary>
             This class is used to Cache the links between Vertex/Pixel Shaders and Constant Buffers.
             It will be responsible for linking the programs under OpenGL if they have not been linked
             before. If an existing link exists it will be resused.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ShaderProgramCache.Clear">
             <summary>
             Clear the program cache releasing all shader programs.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SpriteBatch">
             <summary>
             Helper class for drawing text strings and sprites in one or more optimized batches.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
             <summary>
             Constructs a <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" />.
             </summary>
             <param name="graphicsDevice">The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" />, which will be used for sprite rendering.</param>
             <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="graphicsDevice" /> is null.</exception>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})">
             <summary>
             Begins a new sprite and text batch with the specified render state.
             </summary>
             <param name="sortMode">The drawing order for sprite and text drawing. <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred" /> by default.</param>
             <param name="blendState">State of the blending. Uses <see cref="F:Microsoft.Xna.Framework.Graphics.BlendState.AlphaBlend" /> if null.</param>
             <param name="samplerState">State of the sampler. Uses <see cref="F:Microsoft.Xna.Framework.Graphics.SamplerState.LinearClamp" /> if null.</param>
             <param name="depthStencilState">State of the depth-stencil buffer. Uses <see cref="F:Microsoft.Xna.Framework.Graphics.DepthStencilState.None" /> if null.</param>
             <param name="rasterizerState">State of the rasterization. Uses <see cref="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullCounterClockwise" /> if null.</param>
             <param name="effect">A custom <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /> to override the default sprite effect. Uses default sprite effect if null.</param>
             <param name="transformMatrix">An optional matrix used to transform the sprite geometry. Uses <see cref="P:Microsoft.Xna.Framework.Matrix.Identity" /> if null.</param>
             <exception cref="T:System.InvalidOperationException">Thrown if <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})" /> is called next time without previous <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End" />.</exception>
             <remarks>This method uses optional parameters.</remarks>
             <remarks>The <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})" /> Begin should be called before drawing commands, and you cannot call it again before subsequent <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End" />.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End">
             <summary>
             Flushes all batched text and sprites to the screen.
             </summary>
             <remarks>This command should be called after <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})" /> and drawing commands.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Vector2},System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Color},Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
             <summary>
             Submit a sprite for drawing in the current batch.
             </summary>
             <param name="texture">A texture.</param>
             <param name="position">The drawing location on screen or null if <paramref name="destinationRectangle"> is used.</paramref></param>
             <param name="destinationRectangle">The drawing bounds on screen or null if <paramref name="position"> is used.</paramref></param>
             <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
             <param name="origin">An optional center of rotation. Uses <see cref="P:Microsoft.Xna.Framework.Vector2.Zero" /> if null.</param>
             <param name="rotation">An optional rotation of this sprite. 0 by default.</param>
             <param name="scale">An optional scale vector. Uses <see cref="P:Microsoft.Xna.Framework.Vector2.One" /> if null.</param>
             <param name="color">An optional color mask. Uses <see cref="P:Microsoft.Xna.Framework.Color.White" /> if null.</param>
             <param name="effects">The optional drawing modificators. <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.None" /> by default.</param>
             <param name="layerDepth">An optional depth of the layer of this sprite. 0 by default.</param>
             <exception cref="T:System.InvalidOperationException">Throwns if both <paramref name="position" /> and <paramref name="destinationRectangle" /> been used.</exception>
             <remarks>This overload uses optional parameters. This overload requires only one of <paramref name="position" /> and <paramref name="destinationRectangle" /> been used.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
             <summary>
             Submit a sprite for drawing in the current batch.
             </summary>
             <param name="texture">A texture.</param>
             <param name="position">The drawing location on screen.</param>
             <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
             <param name="color">A color mask.</param>
             <param name="rotation">A rotation of this sprite.</param>
             <param name="origin">Center of the rotation. 0,0 by default.</param>
             <param name="scale">A scaling of this sprite.</param>
             <param name="effects">Modificators for drawing. Can be combined.</param>
             <param name="layerDepth">A depth of the layer of this sprite.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
             <summary>
             Submit a sprite for drawing in the current batch.
             </summary>
             <param name="texture">A texture.</param>
             <param name="position">The drawing location on screen.</param>
             <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
             <param name="color">A color mask.</param>
             <param name="rotation">A rotation of this sprite.</param>
             <param name="origin">Center of the rotation. 0,0 by default.</param>
             <param name="scale">A scaling of this sprite.</param>
             <param name="effects">Modificators for drawing. Can be combined.</param>
             <param name="layerDepth">A depth of the layer of this sprite.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
             <summary>
             Submit a sprite for drawing in the current batch.
             </summary>
             <param name="texture">A texture.</param>
             <param name="destinationRectangle">The drawing bounds on screen.</param>
             <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
             <param name="color">A color mask.</param>
             <param name="rotation">A rotation of this sprite.</param>
             <param name="origin">Center of the rotation. 0,0 by default.</param>
             <param name="effects">Modificators for drawing. Can be combined.</param>
             <param name="layerDepth">A depth of the layer of this sprite.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
             <summary>
             Submit a sprite for drawing in the current batch.
             </summary>
             <param name="texture">A texture.</param>
             <param name="position">The drawing location on screen.</param>
             <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
             <param name="color">A color mask.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
             <summary>
             Submit a sprite for drawing in the current batch.
             </summary>
             <param name="texture">A texture.</param>
             <param name="destinationRectangle">The drawing bounds on screen.</param>
             <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
             <param name="color">A color mask.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
             <summary>
             Submit a sprite for drawing in the current batch.
             </summary>
             <param name="texture">A texture.</param>
             <param name="position">The drawing location on screen.</param>
             <param name="color">A color mask.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
             <summary>
             Submit a sprite for drawing in the current batch.
             </summary>
             <param name="texture">A texture.</param>
             <param name="destinationRectangle">The drawing bounds on screen.</param>
             <param name="color">A color mask.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
             <summary>
             Submit a text string of sprites for drawing in the current batch.
             </summary>
             <param name="spriteFont">A font.</param>
             <param name="text">The text which will be drawn.</param>
             <param name="position">The drawing location on screen.</param>
             <param name="color">A color mask.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
             <summary>
             Submit a text string of sprites for drawing in the current batch.
             </summary>
             <param name="spriteFont">A font.</param>
             <param name="text">The text which will be drawn.</param>
             <param name="position">The drawing location on screen.</param>
             <param name="color">A color mask.</param>
             <param name="rotation">A rotation of this string.</param>
             <param name="origin">Center of the rotation. 0,0 by default.</param>
             <param name="scale">A scaling of this string.</param>
             <param name="effects">Modificators for drawing. Can be combined.</param>
             <param name="layerDepth">A depth of the layer of this string.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
             <summary>
             Submit a text string of sprites for drawing in the current batch.
             </summary>
             <param name="spriteFont">A font.</param>
             <param name="text">The text which will be drawn.</param>
             <param name="position">The drawing location on screen.</param>
             <param name="color">A color mask.</param>
             <param name="rotation">A rotation of this string.</param>
             <param name="origin">Center of the rotation. 0,0 by default.</param>
             <param name="scale">A scaling of this string.</param>
             <param name="effects">Modificators for drawing. Can be combined.</param>
             <param name="layerDepth">A depth of the layer of this string.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
             <summary>
             Submit a text string of sprites for drawing in the current batch.
             </summary>
             <param name="spriteFont">A font.</param>
             <param name="text">The text which will be drawn.</param>
             <param name="position">The drawing location on screen.</param>
             <param name="color">A color mask.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
             <summary>
             Submit a text string of sprites for drawing in the current batch.
             </summary>
             <param name="spriteFont">A font.</param>
             <param name="text">The text which will be drawn.</param>
             <param name="position">The drawing location on screen.</param>
             <param name="color">A color mask.</param>
             <param name="rotation">A rotation of this string.</param>
             <param name="origin">Center of the rotation. 0,0 by default.</param>
             <param name="scale">A scaling of this string.</param>
             <param name="effects">Modificators for drawing. Can be combined.</param>
             <param name="layerDepth">A depth of the layer of this string.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
             <summary>
             Submit a text string of sprites for drawing in the current batch.
             </summary>
             <param name="spriteFont">A font.</param>
             <param name="text">The text which will be drawn.</param>
             <param name="position">The drawing location on screen.</param>
             <param name="color">A color mask.</param>
             <param name="rotation">A rotation of this string.</param>
             <param name="origin">Center of the rotation. 0,0 by default.</param>
             <param name="scale">A scaling of this string.</param>
             <param name="effects">Modificators for drawing. Can be combined.</param>
             <param name="layerDepth">A depth of the layer of this string.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Dispose(System.Boolean)">
             <summary>
             Immediately releases the unmanaged resources used by this object.
             </summary>
             <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SpriteBatcher">
             <summary>
             This class handles the queueing of batch items into the GPU by creating the triangle tesselations
             that are used to draw the sprite textures. This class supports int.MaxValue number of sprites to be
             batched and will process them into short.MaxValue groups (strided by 6 for the number of vertices
             sent to the GPU). 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteBatcher.InitialBatchSize">
             <summary>
             Initialization size for the batch item list and queue.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteBatcher.MaxBatchSize">
             <summary>
             The maximum number of batch items that can be processed per iteration
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteBatcher.InitialVertexArraySize">
             <summary>
             Initialization size for the vertex array, in batch units.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteBatcher._batchItemList">
             <summary>
             The list of batch items to process.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteBatcher._batchItemCount">
             <summary>
             Index pointer to the next available SpriteBatchItem in _batchItemList.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteBatcher._device">
             <summary>
             The target graphics device.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteBatcher._index">
             <summary>
             Vertex index array. The values in this array never change.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatcher.CreateBatchItem">
             <summary>
             Reuse a previously allocated SpriteBatchItem from the item pool. 
             if there is none available grow the pool and initialize new items.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatcher.EnsureArrayCapacity(System.Int32)">
             <summary>
             Resize and recreate the missing indices for the index and vertex position color buffers.
             </summary>
             <param name="numBatchItems"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatcher.DrawBatch(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.Effect)">
             <summary>
             Sorts the batch items and then groups batch drawing into maximal allowed batch sets that do not
             overflow the 16 bit array indices for vertices.
             </summary>
             <param name="sortMode">The type of depth sorting desired for the rendering.</param>
             <param name="effect">The custom effect to apply to the drawn geometry</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatcher.FlushVertexArray(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.Texture)">
             <summary>
             Sends the triangle list to the graphics device. Here is where the actual drawing starts.
             </summary>
             <param name="start">Start index of vertices to draw. Not used except to compute the count of vertices to draw.</param>
             <param name="end">End index of vertices to draw. Not used except to compute the count of vertices to draw.</param>
             <param name="effect">The custom effect to apply to the geometry</param>
             <param name="texture">The texture to draw.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SpriteEffects">
             <summary>
             Defines sprite visual options for mirroring.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.None">
             <summary>
             No options specified.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally">
             <summary>
             Render the sprite reversed along the X axis.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically">
             <summary>
             Render the sprite reversed along the Y axis.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.Texture">
             <summary>
             Gets the texture that this SpriteFont draws from.
             </summary>
             <remarks>Can be used to implement custom rendering of a SpriteFont</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteFont.GetGlyphs">
             <summary>
             Returns a copy of the dictionary containing the glyphs in this SpriteFont.
             </summary>
             <returns>A new Dictionary containing all of the glyphs inthis SpriteFont</returns>
             <remarks>Can be used to calculate character bounds when implementing custom SpriteFont rendering.</remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.Characters">
             <summary>
             Gets a collection of the characters in the font.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.DefaultCharacter">
             <summary>
             Gets or sets the character that will be substituted when a
             given character is not included in the font.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.LineSpacing">
             <summary>
             Gets or sets the line spacing (the distance from baseline
             to baseline) of the font.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.Spacing">
             <summary>
             Gets or sets the spacing (tracking) between characters in
             the font.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteFont.MeasureString(System.String)">
             <summary>
             Returns the size of a string when rendered in this font.
             </summary>
             <param name="text">The text to measure.</param>
             <returns>The size, in pixels, of 'text' when rendered in
             this font.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder)">
             <summary>
             Returns the size of the contents of a StringBuilder when
             rendered in this font.
             </summary>
             <param name="text">The text to measure.</param>
             <returns>The size, in pixels, of 'text' when rendered in
             this font.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph">
             <summary>
             Struct that defines the spacing, Kerning, and bounds of a character.
             </summary>
             <remarks>Provides the data necessary to implement custom SpriteFont rendering.</remarks>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.Character">
             <summary>
             The char associated with this glyph.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.BoundsInTexture">
             <summary>
             Rectangle in the font texture where this letter exists.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.Cropping">
             <summary>
             Cropping applied to the BoundsInTexture to calculate the bounds of the actual character.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.LeftSideBearing">
             <summary>
             The amount of space between the left side ofthe character and its first pixel in the X dimention.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.RightSideBearing">
             <summary>
             The amount of space between the right side of the character and its last pixel in the X dimention.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.Width">
             <summary>
             Width of the character before kerning is applied. 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.WidthIncludingBearings">
             <summary>
             Width of the character before kerning is applied. 
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SpriteSortMode">
             <summary>
             Defines sprite sort rendering options.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred">
             <summary>
             All sprites are drawing when <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End" /> invokes, in order of draw call sequence. Depth is ignored.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Immediate">
             <summary>
             Each sprite is drawing at individual draw call, instead of <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End" />. Depth is ignored.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Texture">
             <summary>
             Same as <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred" />, except sprites are sorted by texture prior to drawing. Depth is ignored.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.BackToFront">
             <summary>
             Same as <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred" />, except sprites are sorted by depth in back-to-front order prior to drawing.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.FrontToBack">
             <summary>
             Same as <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred" />, except sprites are sorted by depth in front-to-back order prior to drawing.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.Blend">
             <summary>
             Defines a blend mode.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.One">
             <summary>
             Each component of the color is multiplied by {1, 1, 1, 1}.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.Zero">
             <summary>
             Each component of the color is multiplied by {0, 0, 0, 0}.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.SourceColor">
             <summary>
             Each component of the color is multiplied by the source color. 
             {Rs, Gs, Bs, As}, where Rs, Gs, Bs, As are color source values.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseSourceColor">
             <summary>
             Each component of the color is multiplied by the inverse of the source color.
              {1 − Rs, 1 − Gs, 1 − Bs, 1 − As}, where Rs, Gs, Bs, As are color source values.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.SourceAlpha">
             <summary>
             Each component of the color is multiplied by the alpha value of the source. 
             {As, As, As, As}, where As is the source alpha value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseSourceAlpha">
             <summary>
             Each component of the color is multiplied by the inverse of the alpha value of the source. 
             {1 − As, 1 − As, 1 − As, 1 − As}, where As is the source alpha value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.DestinationColor">
             <summary>
             Each component color is multiplied by the destination color. 
             {Rd, Gd, Bd, Ad}, where Rd, Gd, Bd, Ad are color destination values.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseDestinationColor">
             <summary>
             Each component of the color is multiplied by the inversed destination color. 
             {1 − Rd, 1 − Gd, 1 − Bd, 1 − Ad}, where Rd, Gd, Bd, Ad are color destination values.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.DestinationAlpha">
             <summary>
             Each component of the color is multiplied by the alpha value of the destination.
             {Ad, Ad, Ad, Ad}, where Ad is the destination alpha value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseDestinationAlpha">
             <summary>
             Each component of the color is multiplied by the inversed alpha value of the destination. 
             {1 − Ad, 1 − Ad, 1 − Ad, 1 − Ad}, where Ad is the destination alpha value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.BlendFactor">
             <summary>
             Each component of the color is multiplied by a constant in the <see cref="!:GraphicsDevice.BlendFactor" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseBlendFactor">
             <summary>
             Each component of the color is multiplied by a inversed constant in the <see cref="!:GraphicsDevice.BlendFactor" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.SourceAlphaSaturation">
             <summary>
             Each component of the color is multiplied by either the alpha of the source color, or the inverse of the alpha of the source color, whichever is greater. 
             {f, f, f, 1}, where f = min(As, 1 − As), where As is the source alpha value.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.BlendFunction">
             <summary>
             Defines a function for color blending.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Add">
             <summary>
             The function will adds destination to the source. (srcColor * srcBlend) + (destColor * destBlend)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Subtract">
             <summary>
             The function will subtracts destination from source. (srcColor * srcBlend) − (destColor * destBlend)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.ReverseSubtract">
             <summary>
             The function will subtracts source from destination. (destColor * destBlend) - (srcColor * srcBlend) 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Min">
             <summary>
             The function will extracts minimum of the source and destination. min((srcColor * srcBlend),(destColor * destBlend))
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Max">
             <summary>
             The function will extracts maximum of the source and destination. max((srcColor * srcBlend),(destColor * destBlend))
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.Item(System.Int32)">
             <summary>
             Returns the target specific blend state.
             </summary>
             <param name="index">The 0 to 3 target blend state index.</param>
             <returns>A target blend state.</returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.IndependentBlendEnable">
             <summary>
             Enables use of the per-target blend states.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.CompareFunction">
             <summary>
             The comparison function used for depth, stencil, and alpha tests.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Always">
             <summary>
             Always passes the test.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Never">
             <summary>
             Never passes the test.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Less">
             <summary>
             Passes the test when the new pixel value is less than current pixel value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.LessEqual">
             <summary>
             Passes the test when the new pixel value is less than or equal to current pixel value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Equal">
             <summary>
             Passes the test when the new pixel value is equal to current pixel value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.GreaterEqual">
             <summary>
             Passes the test when the new pixel value is greater than or equal to current pixel value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Greater">
             <summary>
             Passes the test when the new pixel value is greater than current pixel value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.NotEqual">
             <summary>
             Passes the test when the new pixel value does not equal to current pixel value.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.CullMode">
             <summary>
             Defines a culling mode for faces in rasterization process.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CullMode.None">
             <summary>
             Do not cull faces.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CullMode.CullClockwiseFace">
             <summary>
             Cull faces with clockwise order.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CullMode.CullCounterClockwiseFace">
             <summary>
             Cull faces with counter clockwise order.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.DepthFormat">
             <summary>
             Defines formats for depth-stencil buffer.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.None">
             <summary>
             Depth-stencil buffer will not be created.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth16">
             <summary>
             16-bit depth buffer.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24">
             <summary>
             24-bit depth buffer. Equivalent of <see cref="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24Stencil8" /> for DirectX platforms.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24Stencil8">
             <summary>
             32-bit depth-stencil buffer. Where 24-bit depth and 8-bit for stencil used.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.FillMode">
             <summary>
             Defines options for filling the primitive.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.FillMode.Solid">
             <summary>
             Draw solid faces for each primitive.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.FillMode.WireFrame">
             <summary>
             Draw lines for each primitive.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.ComparisonFunction">
             <summary>
             When using comparison sampling, also set <see cref="P:Microsoft.Xna.Framework.Graphics.SamplerState.FilterMode" /> to <see cref="F:Microsoft.Xna.Framework.Graphics.TextureFilterMode.Comparison" />.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.StencilOperation">
             <summary>
             Defines stencil buffer operations.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Keep">
             <summary>
             Does not update the stencil buffer entry.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Zero">
             <summary>
             Sets the stencil buffer entry to 0.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Replace">
             <summary>
             Replaces the stencil buffer entry with a reference value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Increment">
             <summary>
             Increments the stencil buffer entry, wrapping to 0 if the new value exceeds the maximum value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Decrement">
             <summary>
             Decrements the stencil buffer entry, wrapping to the maximum value if the new value is less than 0.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.IncrementSaturation">
             <summary>
             Increments the stencil buffer entry, clamping to the maximum value.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.DecrementSaturation">
             <summary>
             Decrements the stencil buffer entry, clamping to 0.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Invert">
             <summary>
             Inverts the bits in the stencil buffer entry.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.TextureAddressMode">
             <summary>
             Defines modes for addressing texels using texture coordinates that are outside of the range of 0.0 to 1.0.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Wrap">
             <summary>
             Texels outside range will form the tile at every integer junction.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Clamp">
             <summary>
             Texels outside range will be set to color of 0.0 or 1.0 texel.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Mirror">
             <summary>
             Same as <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Wrap" /> but tiles will also flipped at every integer junction.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Border">
             <summary>
             Texels outside range will be set to the border color.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.TextureFilter">
             <summary>
             Defines filtering types for texture sampler.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Linear">
             <summary>
             Use linear filtering.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Point">
             <summary>
             Use point filtering.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Anisotropic">
             <summary>
             Use anisotropic filtering.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.LinearMipPoint">
             <summary>
             Use linear filtering to shrink or expand, and point filtering between mipmap levels (mip).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.PointMipLinear">
             <summary>
             Use point filtering to shrink (minify) or expand (magnify), and linear filtering between mipmap levels.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinLinearMagPointMipLinear">
             <summary>
             Use linear filtering to shrink, point filtering to expand, and linear filtering between mipmap levels.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinLinearMagPointMipPoint">
             <summary>
             Use linear filtering to shrink, point filtering to expand, and point filtering between mipmap levels.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinPointMagLinearMipLinear">
             <summary>
             Use point filtering to shrink, linear filtering to expand, and linear filtering between mipmap levels.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinPointMagLinearMipPoint">
             <summary>
             Use point filtering to shrink, linear filtering to expand, and point filtering between mipmap levels.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.TextureFilterMode">
             <summary>
             Filtering modes for texture samplers.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SurfaceFormat">
             <summary>
             Defines types of surface formats.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Color">
             <summary>
             Unsigned 32-bit ARGB pixel format for store 8 bits per channel. 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr565">
             <summary>
             Unsigned 16-bit BGR pixel format for store 5 bits for blue, 6 bits for green, and 5 bits for red.   
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra5551">
             <summary>
             Unsigned 16-bit BGRA pixel format where 5 bits reserved for each color and last bit is reserved for alpha.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra4444">
             <summary>
             Unsigned 16-bit BGRA pixel format for store 4 bits per channel.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt1">
             <summary>
             DXT1. Texture format with compression. Surface dimensions must be a multiple 4.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt3">
             <summary>
             DXT3. Texture format with compression. Surface dimensions must be a multiple 4.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt5">
             <summary>
             DXT5. Texture format with compression. Surface dimensions must be a multiple 4.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedByte2">
             <summary>
             Signed 16-bit bump-map format for store 8 bits for <c>u</c> and <c>v</c> data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedByte4">
             <summary>
             Signed 16-bit bump-map format for store 8 bits per channel.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba1010102">
             <summary>
             Unsigned 32-bit RGBA pixel format for store 10 bits for each color and 2 bits for alpha.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rg32">
             <summary>
             Unsigned 32-bit RG pixel format using 16 bits per channel.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba64">
             <summary>
             Unsigned 64-bit RGBA pixel format using 16 bits per channel.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Alpha8">
             <summary>
             Unsigned A 8-bit format for store 8 bits to alpha channel.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Single">
             <summary>
             IEEE 32-bit R float format for store 32 bits to red channel.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector2">
             <summary>
             IEEE 64-bit RG float format for store 32 bits per channel.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector4">
             <summary>
             IEEE 128-bit RGBA float format for store 32 bits per channel.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfSingle">
             <summary>
             Float 16-bit R format for store 16 bits to red channel.   
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector2">
             <summary>
             Float 32-bit RG format for store 16 bits per channel. 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector4">
             <summary>
             Float 64-bit ARGB format for store 16 bits per channel. 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HdrBlendable">
             <summary>
             Float pixel format for high dynamic range data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr32">
             <summary>
             For compatibility with WPF D3DImage.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra32">
             <summary>
             For compatibility with WPF D3DImage.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.ColorSRgb">
             <summary>
             Unsigned 32-bit RGBA sRGB pixel format that supports 8 bits per channel.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr32SRgb">
             <summary>
             Unsigned 32-bit sRGB pixel format that supports 8 bits per channel. 8 bits are unused.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra32SRgb">
             <summary>
             Unsigned 32-bit sRGB pixel format that supports 8 bits per channel.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt1SRgb">
             <summary>
             DXT1. sRGB texture format with compression. Surface dimensions must be a multiple of 4.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt3SRgb">
             <summary>
             DXT3. sRGB texture format with compression. Surface dimensions must be a multiple of 4.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt5SRgb">
             <summary>
             DXT5. sRGB texture format with compression. Surface dimensions must be a multiple of 4.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbPvrtc2Bpp">
             <summary>
             PowerVR texture compression format (iOS and Android).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbPvrtc4Bpp">
             <summary>
             PowerVR texture compression format (iOS and Android).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbaPvrtc2Bpp">
             <summary>
             PowerVR texture compression format (iOS and Android).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbaPvrtc4Bpp">
             <summary>
             PowerVR texture compression format (iOS and Android).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbEtc1">
             <summary>
             Ericcson Texture Compression (Android)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt1a">
             <summary>
             DXT1 version where 1-bit alpha is used.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbaAtcExplicitAlpha">
             <summary>
             ATC/ATITC compression (Android)
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbaAtcInterpolatedAlpha">
             <summary>
             ATC/ATITC compression (Android)
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Bounds">
             <summary>
             Gets the dimensions of the texture
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
             <summary>
             Creates a new texture of the given size
             </summary>
             <param name="graphicsDevice"></param>
             <param name="width"></param>
             <param name="height"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
             <summary>
             Creates a new texture of a given size with a surface format and optional mipmaps 
             </summary>
             <param name="graphicsDevice"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="mipmap"></param>
             <param name="format"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Int32)">
             <summary>
             Creates a new texture array of a given size with a surface format and optional mipmaps.
             Throws ArgumentException if the current GraphicsDevice can't work with texture arrays
             </summary>
             <param name="graphicsDevice"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="mipmap"></param>
             <param name="format"></param>
             <param name="arraySize"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.Texture2D.SurfaceType)">
             <summary>
              Creates a new texture of a given size with a surface format and optional mipmaps.
             </summary>
             <param name="graphicsDevice"></param>
             <param name="width"></param>
             <param name="height"></param>
             <param name="mipmap"></param>
             <param name="format"></param>
             <param name="type"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
             <summary>
             Changes the pixels of the texture
             Throws ArgumentNullException if data is null
             Throws ArgumentException if arraySlice is greater than 0, and the GraphicsDevice does not support texture arrays
             </summary>
             <typeparam name="T"></typeparam>
             <param name="level">Layer of the texture to modify</param>
             <param name="arraySlice">Index inside the texture array</param>
             <param name="rect">Area to modify</param>
             <param name="data">New data for the texture</param>
             <param name="startIndex">Start position of data</param>
             <param name="elementCount"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
             <summary>
             Changes the pixels of the texture
             </summary>
             <typeparam name="T"></typeparam>
             <param name="level">Layer of the texture to modify</param>
             <param name="rect">Area to modify</param>
             <param name="data">New data for the texture</param>
             <param name="startIndex">Start position of data</param>
             <param name="elementCount"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(``0[],System.Int32,System.Int32)">
             <summary>
             Changes the texture's pixels
             </summary>
             <typeparam name="T"></typeparam>
             <param name="data">New data for the texture</param>
             <param name="startIndex">Start position of data</param>
             <param name="elementCount"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(``0[])">
             <summary>
             Changes the texture's pixels
             </summary>
             <typeparam name="T">New data for the texture</typeparam>
             <param name="data"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
             <summary>
             Retrieves the contents of the texture
             Throws ArgumentException if data is null, data.length is too short or
             if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays
             </summary>
             <typeparam name="T"></typeparam>
             <param name="level">Layer of the texture</param>
             <param name="arraySlice">Index inside the texture array</param>
             <param name="rect">Area of the texture to retrieve</param>
             <param name="data">Destination array for the data</param>
             <param name="startIndex">Starting index of data where to write the pixel data</param>
             <param name="elementCount">Number of pixels to read</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
             <summary>
             Retrieves the contents of the texture
             Throws ArgumentException if data is null, data.length is too short or
             if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays
             </summary>
             <typeparam name="T"></typeparam>
             <param name="level">Layer of the texture</param>
             <param name="rect">Area of the texture</param>
             <param name="data">Destination array for the texture data</param>
             <param name="startIndex">First position in data where to write the pixel data</param>
             <param name="elementCount">Number of pixels to read</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(``0[],System.Int32,System.Int32)">
             <summary>
             Retrieves the contents of the texture
             Throws ArgumentException if data is null, data.length is too short or
             if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays
             </summary>
             <typeparam name="T"></typeparam>
             <param name="data">Destination array for the texture data</param>
             <param name="startIndex">First position in data where to write the pixel data</param>
             <param name="elementCount">Number of pixels to read</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(``0[])">
             <summary>
             Retrieves the contents of the texture
             Throws ArgumentException if data is null, data.length is too short or
             if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays
             </summary>
             <typeparam name="T"></typeparam>
             <param name="data">Destination array for the texture data</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromStream(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)">
             <summary>
             Creates a Texture2D from a stream, supported formats bmp, gif, jpg, png, tif and dds (only for simple textures).
             May work with other formats, but will not work with tga files.
             </summary>
             <param name="graphicsDevice"></param>
             <param name="stream"></param>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SaveAsJpeg(System.IO.Stream,System.Int32,System.Int32)">
             <summary>
             Converts the texture to a JPG image
             </summary>
             <param name="stream">Destination for the image</param>
             <param name="width"></param>
             <param name="height"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SaveAsPng(System.IO.Stream,System.Int32,System.Int32)">
             <summary>
             Converts the texture to a PNG image
             </summary>
             <param name="stream">Destination for the image</param>
             <param name="width"></param>
             <param name="height"></param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[],System.Int32,System.Int32)">
             <summary>
             Gets a copy of 3D texture data, specifying a mipmap level, source box, start index, and number of elements.
             </summary>
             <typeparam name="T">The type of the elements in the array.</typeparam>
             <param name="level">Mipmap level.</param>
             <param name="left">Position of the left side of the box on the x-axis.</param>
             <param name="top">Position of the top of the box on the y-axis.</param>
             <param name="right">Position of the right side of the box on the x-axis.</param>
             <param name="bottom">Position of the bottom of the box on the y-axis.</param>
             <param name="front">Position of the front of the box on the z-axis.</param>
             <param name="back">Position of the back of the box on the z-axis.</param>
             <param name="data">Array of data.</param>
             <param name="startIndex">Index of the first element to get.</param>
             <param name="elementCount">Number of elements to get.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(``0[],System.Int32,System.Int32)">
             <summary>
             Gets a copy of 3D texture data, specifying a start index and number of elements.
             </summary>
             <typeparam name="T">The type of the elements in the array.</typeparam>
             <param name="data">Array of data.</param>
             <param name="startIndex">Index of the first element to get.</param>
             <param name="elementCount">Number of elements to get.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(``0[])">
             <summary>
             Gets a copy of 3D texture data.
             </summary>
             <typeparam name="T">The type of the elements in the array.</typeparam>
             <param name="data">Array of data.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.TextureCollection.Dirty">
             <summary>
             Marks all texture slots as dirty.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Texture.SortingKey">
             <summary>
             Gets a unique identifier of this texture for sorting purposes.
             </summary>
             <remarks>
             <para>For example, this value is used by <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch" /> when drawing with <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Texture" />.</para>
             <para>The value is an implementation detail and may change between application launches or MonoGame versions.
             It is only guaranteed to stay consistent during application lifetime.</para>
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.Size">
             <summary>
             Gets the width and height of the cube map face in pixels.
             </summary>
             <value>The width and height of a cube map face in pixels.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,``0[])">
             <summary>
             Gets a copy of cube texture data specifying a cubemap face.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="cubeMapFace">The cube map face.</param>
             <param name="data">The data.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.BufferUsage">
             <summary>
             A usage hint for optimizing memory placement of graphics buffers.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BufferUsage.None">
             <summary>
             No special usage.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BufferUsage.WriteOnly">
             <summary>
             The buffer will not be readable and will be optimized for rendering and writing.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.UserOffset">
             <summary>
             Special offset used internally by GraphicsDevice.DrawUserXXX() methods.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.UserOffset">
             <summary>
             Special offset used internally by GraphicsDevice.DrawUserXXX() methods.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SizeForType(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type)">
             <summary>
             Gets the relevant IndexElementSize enum value for the given type.
             </summary>
             <param name="graphicsDevice">The graphics device.</param>
             <param name="type">The type to use for the index buffer</param>
             <returns>The IndexElementSize enum value that matches the type</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.GraphicsDeviceResetting">
             <summary>
             The GraphicsDevice is resetting, so GPU resources must be recreated.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.GenerateIfRequired">
             <summary>
             If the IBO does not exist, create it.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.IndexElementSize">
             <summary>
             Defines size for index in <see cref="T:Microsoft.Xna.Framework.Graphics.IndexBuffer" /> and <see cref="T:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.IndexElementSize.SixteenBits">
             <summary>
             16-bit short/ushort value been used.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.IndexElementSize.ThirtyTwoBits">
             <summary>
             32-bit int/uint value been used.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PrimitiveType">
             <summary>
             Defines how vertex data is ordered.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.TriangleList">
             <summary>
             Renders the specified vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. Back-face culling is affected by the current winding-order render state.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.TriangleStrip">
             <summary>
             Renders the vertices as a triangle strip. The back-face culling flag is flipped automatically on even-numbered triangles.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.LineList">
             <summary>
             Renders the vertices as a list of isolated straight line segments; the count may be any positive integer.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.LineStrip">
             <summary>
             Renders the vertices as a single polyline; the count may be any positive integer.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GraphicsDeviceResetting">
             <summary>
             The GraphicsDevice is resetting, so GPU resources must be recreated.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)">
             <summary>
             Sets the vertex buffer data, specifying the index at which to start copying from the source data array,
             the number of elements to copy from the source data array, 
             and how far apart elements from the source data array should be when they are copied into the vertex buffer.
             </summary>
             <typeparam name="T">Type of elements in the data array.</typeparam>
             <param name="offsetInBytes">Offset in bytes from the beginning of the vertex buffer to the start of the copied data.</param>
             <param name="data">Data array.</param>
             <param name="startIndex">Index at which to start copying from <paramref name="data" />.
             Must be within the <paramref name="data" /> array bounds.</param>
             <param name="elementCount">Number of elements to copy from <paramref name="data" />.
             The combination of <paramref name="startIndex" /> and <paramref name="elementCount" /> 
             must be within the <paramref name="data" /> array bounds.</param>
             <param name="vertexStride">Specifies how far apart, in bytes, elements from <paramref name="data" /> should be when 
             they are copied into the vertex buffer.
             In almost all cases this should be <c>sizeof(T)</c>, to create a tightly-packed vertex buffer.
             If you specify <c>sizeof(T)</c>, elements from <paramref name="data" /> will be copied into the 
             vertex buffer with no padding between each element.
             If you specify a value greater than <c>sizeof(T)</c>, elements from <paramref name="data" /> will be copied 
             into the vertex buffer with padding between each element.
             If you specify <c>0</c> for this parameter, it will be treated as if you had specified <c>sizeof(T)</c>.
             With the exception of <c>0</c>, you must specify a value greater than or equal to <c>sizeof(T)</c>.</param>
             <example>
             If <c>T</c> is <c>VertexPositionTexture</c>, but you want to set only the position component of the vertex data,
             you would call this method as follows:
             <code>
             Vector3[] positions = new Vector3[numVertices];
             vertexBuffer.SetData(0, positions, 0, numVertices, vertexBuffer.VertexDeclaration.VertexStride);
             </code>
             
             Continuing from the previous example, if you want to set only the texture coordinate component of the vertex data,
             you would call this method as follows (note the use of <paramref name="offsetInBytes" />:
             <code>
             Vector2[] texCoords = new Vector2[numVertices];
             vertexBuffer.SetData(12, texCoords, 0, numVertices, vertexBuffer.VertexDeclaration.VertexStride);
             </code>
             </example>
             <remarks>
             If you provide a <c>byte[]</c> in the <paramref name="data" /> parameter, then you should almost certainly
             set <paramref name="vertexStride" /> to <c>1</c>, to avoid leaving any padding between the <c>byte</c> values
             when they are copied into the vertex buffer.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[],System.Int32,System.Int32)">
             <summary>
             Sets the vertex buffer data, specifying the index at which to start copying from the source data array,
             and the number of elements to copy from the source data array. This is the same as calling 
             <see cref="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)" />  with <c>offsetInBytes</c> equal to <c>0</c>,
             and <c>vertexStride</c> equal to <c>sizeof(T)</c>.
             </summary>
             <typeparam name="T">Type of elements in the data array.</typeparam>
             <param name="data">Data array.</param>
             <param name="startIndex">Index at which to start copying from <paramref name="data" />.
             Must be within the <paramref name="data" /> array bounds.</param>
             <param name="elementCount">Number of elements to copy from <paramref name="data" />.
             The combination of <paramref name="startIndex" /> and <paramref name="elementCount" /> 
             must be within the <paramref name="data" /> array bounds.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[])">
             <summary>
             Sets the vertex buffer data. This is the same as calling <see cref="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)" /> 
             with <c>offsetInBytes</c> and <c>startIndex</c> equal to <c>0</c>, <c>elementCount</c> equal to <c>data.Length</c>, 
             and <c>vertexStride</c> equal to <c>sizeof(T)</c>.
             </summary>
             <typeparam name="T">Type of elements in the data array.</typeparam>
             <param name="data">Data array.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GenerateIfRequired">
             <summary>
             If the VBO does not exist, create it.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexBufferBinding">
             <summary>
             Defines how a vertex buffer is bound to the graphics device for rendering.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.VertexBuffer">
             <summary>
             Gets the vertex buffer.
             </summary>
             <value>The vertex buffer.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.VertexOffset">
             <summary>
             Gets the index of the first vertex in the vertex buffer to use.
             </summary>
             <value>The index of the first vertex in the vertex buffer to use.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.InstanceFrequency">
             <summary>
             Gets the number of instances to draw using the same per-instance data before advancing
             in the buffer by one element.
             </summary>
             <value>
             The number of instances to draw using the same per-instance data before advancing in the
             buffer by one element. This value must be 0 for an element that contains per-vertex
             data and greater than 0 for per-instance data.
             </value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.#ctor(Microsoft.Xna.Framework.Graphics.VertexBuffer)">
             <summary>
             Creates an instance of <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBufferBinding" />.
             </summary>
             <param name="vertexBuffer">The vertex buffer to bind.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.#ctor(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32)">
             <summary>
             Creates an instance of <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBufferBinding" />.
             </summary>
             <param name="vertexBuffer">The vertex buffer to bind.</param>
             <param name="vertexOffset">
             The index of the first vertex in the vertex buffer to use.
             </param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.#ctor(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32,System.Int32)">
             <summary>
             Creates an instance of VertexBufferBinding.
             </summary>
             <param name="vertexBuffer">The vertex buffer to bind.</param>
             <param name="vertexOffset">
             The index of the first vertex in the vertex buffer to use.
             </param>
             <param name="instanceFrequency">
             The number of instances to draw using the same per-instance data before advancing in the
             buffer by one element. This value must be 0 for an element that contains per-vertex data
             and greater than 0 for per-instance data.
             </param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="vertexBuffer" /> is <see langword="null" />.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="vertexOffset" /> or <paramref name="instanceFrequency" /> is invalid.
             </exception>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexBufferBindings">
             <summary>
             Stores the vertex buffers to be bound to the input assembler stage.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBindings.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBufferBindings" /> class.
             </summary>
             <param name="maxVertexBufferSlots">The maximum number of vertex buffer slots.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBindings.Clear">
             <summary>
             Clears the vertex buffer slots.
             </summary>
             <returns>
             <see langword="true" /> if the input layout was changed; otherwise,
             <see langword="false" />.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBindings.Set(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32)">
             <summary>
             Binds the specified vertex buffer to the first input slot.
             </summary>
             <param name="vertexBuffer">The vertex buffer.</param>
             <param name="vertexOffset">
             The offset (in vertices) from the beginning of the vertex buffer to the first vertex to 
             use.
             </param>
             <returns>
             <see langword="true" /> if the input layout was changed; otherwise,
             <see langword="false" />.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBindings.Set(Microsoft.Xna.Framework.Graphics.VertexBufferBinding[])">
             <summary>
             Binds the the specified vertex buffers to the input slots.
             </summary>
             <param name="vertexBufferBindings">The vertex buffer bindings.</param>
             <returns>
             <see langword="true" /> if the input layout was changed; otherwise,
             <see langword="false" />.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBindings.Get(System.Int32)">
             <summary>
             Gets vertex buffer bound to the specified input slots.
             </summary>
             <returns>The vertex buffer binding.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBindings.Get">
             <summary>
             Gets vertex buffers bound to the input slots.
             </summary>
             <returns>The vertex buffer bindings.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexDeclarationCache`1">
             <summary>
             Helper class which ensures we only lookup a vertex 
             declaration for a particular type once.
             </summary>
             <typeparam name="T">A vertex structure which implements IVertexType.</typeparam>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration">
             <summary>
             Defines per-vertex data of a vertex buffer.
             </summary>
             <remarks>
             <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration" /> implements <see cref="T:System.IEquatable`1" /> and can be used as
             a key in a dictionary. Two vertex declarations are considered equal if the vertices are
             structurally equivalent, i.e. the vertex elements and the vertex stride are identical. (The
             properties <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Name" /> and <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Tag" /> are
             ignored in <see cref="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetHashCode" /> and <see cref="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Equals(Microsoft.Xna.Framework.Graphics.VertexDeclaration)" />!)
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.InternalVertexElements">
             <summary>
             Gets the internal vertex elements array.
             </summary>
             <value>The internal vertex elements array.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.#ctor(Microsoft.Xna.Framework.Graphics.VertexElement[])">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration" /> class.
             </summary>
             <param name="elements">The vertex elements.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="elements" /> is <see langword="null" /> or empty.
             </exception>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElement[])">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration" /> class.
             </summary>
             <param name="vertexStride">The size of a vertex (including padding) in bytes.</param>
             <param name="elements">The vertex elements.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="elements" /> is <see langword="null" /> or empty.
             </exception>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.FromType(System.Type)">
             <summary>
             Returns the VertexDeclaration for Type.
             </summary>
             <param name="vertexType">A value type which implements the IVertexType interface.</param>
             <returns>The VertexDeclaration.</returns>
             <remarks>
             Prefer to use VertexDeclarationCache when the declaration lookup
             can be performed with a templated type.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetVertexElements">
             <summary>
             Gets a copy of the vertex elements.
             </summary>
             <returns>A copy of the vertex elements.</returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.VertexStride">
             <summary>
             Gets the size of a vertex (including padding) in bytes.
             </summary>
             <value>The size of a vertex (including padding) in bytes.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Equals(System.Object)">
             <summary>
             Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
             <param name="obj">The object to compare with the current object.</param>
             <returns>
             <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this instance;
             otherwise, <see langword="false" />.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Equals(Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
             <summary>
             Determines whether the specified <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration" /> is equal to this
             instance.
             </summary>
             <param name="other">The object to compare with the current object.</param>
             <returns>
             <see langword="true" /> if the specified <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration" /> is equal to this
             instance; otherwise, <see langword="false" />.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
             <returns>
             A hash code for this instance, suitable for use in hashing algorithms and data
             structures like a hash table.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.op_Equality(Microsoft.Xna.Framework.Graphics.VertexDeclaration,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
             <summary>
             Compares two <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement" /> instances to determine whether they are the
             same.
             </summary>
             <param name="left">The first instance.</param>
             <param name="right">The second instance.</param>
             <returns>
             <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> are
             the same; otherwise, <see langword="false" />.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexDeclaration,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
             <summary>
             Compares two <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement" /> instances to determine whether they are
             different.
             </summary>
             <param name="left">The first instance.</param>
             <param name="right">The second instance.</param>
             <returns>
             <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> are
             the different; otherwise, <see langword="false" />.
             </returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration.VertexDeclarationAttributeInfo">
             <summary>
             Vertex attribute information for a particular shader/vertex declaration combination.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexElement">
             <summary>
             Defines a single element in a vertex.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.Offset">
             <summary>
             Gets or sets the offset in bytes from the beginning of the stream to the vertex element.
             </summary>
             <value>The offset in bytes.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat">
             <summary>
             Gets or sets the data format.
             </summary>
             <value>The data format.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage">
             <summary>
             Gets or sets the HLSL semantic of the element in the vertex shader input.
             </summary>
             <value>The HLSL semantic of the element in the vertex shader input.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex">
             <summary>
             Gets or sets the semantic index.
             </summary>
             <value>
             The semantic index, which is required if the semantic is used for more than one vertex
             element.
             </value>
             <remarks>
             Usage indices in a vertex declaration usually start with 0. When multiple vertex buffers
             are bound to the input assembler stage (see <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexBuffers(Microsoft.Xna.Framework.Graphics.VertexBufferBinding[])" />),
             MonoGame internally adjusts the usage indices based on the order in which the vertex
             buffers are bound.
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementFormat,Microsoft.Xna.Framework.Graphics.VertexElementUsage,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement" /> struct.
             </summary>
             <param name="offset">The offset in bytes from the beginning of the stream to the vertex element.</param>
             <param name="elementFormat">The element format.</param>
             <param name="elementUsage">The HLSL semantic of the element in the vertex shader input-signature.</param>
             <param name="usageIndex">The semantic index, which is required if the semantic is used for more than one vertex element.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
             <returns>
             A hash code for this instance, suitable for use in hashing algorithms and data
             structures like a hash table.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> that represents this instance.
             </summary>
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.Equals(System.Object)">
             <summary>
             Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
             <param name="obj">The object to compare with the current object.</param>
             <returns>
             <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this instance;
             otherwise, <see langword="false" />.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.Equals(Microsoft.Xna.Framework.Graphics.VertexElement)">
             <summary>
             Determines whether the specified <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement" /> is equal to this
             instance.
             </summary>
             <param name="other">The object to compare with the current object.</param>
             <returns>
             <see langword="true" /> if the specified <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement" /> is equal to this
             instance; otherwise, <see langword="false" />.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)">
             <summary>
             Compares two <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement" /> instances to determine whether they are the
             same.
             </summary>
             <param name="left">The first instance.</param>
             <param name="right">The second instance.</param>
             <returns>
             <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> are
             the same; otherwise, <see langword="false" />.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)">
             <summary>
             Compares two <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement" /> instances to determine whether they are
             different.
             </summary>
             <param name="left">The first instance.</param>
             <param name="right">The second instance.</param>
             <returns>
             <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> are
             the different; otherwise, <see langword="false" />.
             </returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementFormat">
             <summary>
             Defines vertex element formats.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Single">
             <summary>
             Single 32-bit floating point number.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector2">
             <summary>
             Two component 32-bit floating point number.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector3">
             <summary>
             Three component 32-bit floating point number.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector4">
             <summary>
             Four component 32-bit floating point number.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Color">
             <summary>
             Four component, packed unsigned byte, mapped to 0 to 1 range. 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Byte4">
             <summary>
             Four component unsigned byte.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Short2">
             <summary>
             Two component signed 16-bit integer.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Short4">
             <summary>
             Four component signed 16-bit integer.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.NormalizedShort2">
             <summary>
             Normalized, two component signed 16-bit integer.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.NormalizedShort4">
             <summary>
             Normalized, four component signed 16-bit integer.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.HalfVector2">
             <summary>
             Two component 16-bit floating point number.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.HalfVector4">
             <summary>
             Four component 16-bit floating point number.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementUsage">
             <summary>
             Defines usage for vertex elements.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position">
             <summary>
             Position data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Color">
             <summary>
             Color data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.TextureCoordinate">
             <summary>
             Texture coordinate data or can be used for user-defined data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Normal">
             <summary>
             Normal data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Binormal">
             <summary>
             Binormal data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Tangent">
             <summary>
             Tangent data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.BlendIndices">
             <summary>
             Blending indices data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.BlendWeight">
             <summary>
             Blending weight data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Depth">
             <summary>
             Depth data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Fog">
             <summary>
             Fog data.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.PointSize">
             <summary>
             Point size data. Usable for drawing point sprites.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Sample">
             <summary>
             Sampler data for specifies the displacement value to look up.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.TessellateFactor">
             <summary>
             Single, positive float value, specifies a tessellation factor used in the tessellation unit to control the rate of tessellation.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexInputLayout">
             <summary>
             Stores the vertex layout (input elements) for the input assembler stage.
             </summary>
             <remarks>
             In the DirectX version the input layouts are cached in a dictionary. The
             <see cref="T:Microsoft.Xna.Framework.Graphics.VertexInputLayout" /> is used as the key in the dictionary and therefore needs to
             implement <see cref="T:System.IEquatable`1" />. Two <see cref="T:Microsoft.Xna.Framework.Graphics.VertexInputLayout" /> instance are
             considered equal if the vertex layouts are structurally identical.
             </remarks>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexInputLayout.Count">
             <summary>
             Gets or sets the number of used input slots.
             </summary>
             <value>The number of used input slots.</value>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexInputLayout.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexInputLayout" /> class.
             </summary>
             <param name="maxVertexBufferSlots">The maximum number of vertex buffer slots.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexInputLayout.#ctor(Microsoft.Xna.Framework.Graphics.VertexDeclaration[],System.Int32[],System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexInputLayout" /> class.
             </summary>
             <param name="vertexDeclarations">The array for storing vertex declarations.</param>
             <param name="instanceFrequencies">The array for storing instance frequencies.</param>
             <param name="count">The number of used slots.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexInputLayout.Equals(System.Object)">
             <summary>
             Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
             <param name="obj">The object to compare with the current object.</param>
             <returns>
             <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to this instance;
             otherwise, <see langword="false" />.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexInputLayout.Equals(Microsoft.Xna.Framework.Graphics.VertexInputLayout)">
             <summary>
             Determines whether the specified <see cref="T:Microsoft.Xna.Framework.Graphics.VertexInputLayout" /> is equal to this
             instance.
             </summary>
             <param name="other">The object to compare with the current object.</param>
             <returns>
             <see langword="true" /> if the specified <see cref="T:Microsoft.Xna.Framework.Graphics.VertexInputLayout" /> is equal to this
             instance; otherwise, <see langword="false" />.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexInputLayout.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
             <returns>
             A hash code for this instance, suitable for use in hashing algorithms and data
             structures like a hash table.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexInputLayout.op_Equality(Microsoft.Xna.Framework.Graphics.VertexInputLayout,Microsoft.Xna.Framework.Graphics.VertexInputLayout)">
             <summary>
             Compares two <see cref="T:Microsoft.Xna.Framework.Graphics.VertexInputLayout" /> instances to determine whether they are the
             same.
             </summary>
             <param name="left">The first instance.</param>
             <param name="right">The second instance.</param>
             <returns>
             <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> are
             the same; otherwise, <see langword="false" />.
             </returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexInputLayout.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexInputLayout,Microsoft.Xna.Framework.Graphics.VertexInputLayout)">
             <summary>
             Compares two <see cref="T:Microsoft.Xna.Framework.Graphics.VertexInputLayout" /> instances to determine whether they are
             different.
             </summary>
             <param name="left">The first instance.</param>
             <param name="right">The second instance.</param>
             <returns>
             <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> are
             the different; otherwise, <see langword="false" />.
             </returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.Viewport">
             <summary>
             Describes the view bounds for render-target surface.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Height">
             <summary>
             The height of the bounds in pixels.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth">
             <summary>
             The upper limit of depth of this viewport.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth">
             <summary>
             The lower limit of depth of this viewport.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Width">
             <summary>
             The width of the bounds in pixels.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Y">
             <summary>
             The y coordinate of the beginning of this viewport.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.X">
             <summary>
             The x coordinate of the beginning of this viewport.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.AspectRatio">
             <summary>
             Gets the aspect ratio of this <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport" />, which is width / height. 
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Bounds">
             <summary>
             Gets or sets a boundary of this <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport" />.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.TitleSafeArea">
             <summary>
             Returns the subset of the viewport that is guaranteed to be visible on a lower quality display.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Constructs a viewport from the given values. The <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth" /> will be 0.0 and <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth" /> will be 1.0.
             </summary>
             <param name="x">The x coordinate of the upper-left corner of the view bounds in pixels.</param>
             <param name="y">The y coordinate of the upper-left corner of the view bounds in pixels.</param>
             <param name="width">The width of the view bounds in pixels.</param>
             <param name="height">The height of the view bounds in pixels.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
             <summary>
             Constructs a viewport from the given values.
             </summary>
             <param name="x">The x coordinate of the upper-left corner of the view bounds in pixels.</param>
             <param name="y">The y coordinate of the upper-left corner of the view bounds in pixels.</param>
             <param name="width">The width of the view bounds in pixels.</param>
             <param name="height">The height of the view bounds in pixels.</param>
             <param name="minDepth">The lower limit of depth.</param>
             <param name="maxDepth">The upper limit of depth.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.#ctor(Microsoft.Xna.Framework.Rectangle)">
             <summary>
             Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport" /> struct.
             </summary>
             <param name="bounds">A <see cref="T:Microsoft.Xna.Framework.Rectangle" /> that defines the location and size of the <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport" /> in a render target.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.Project(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Projects a <see cref="T:Microsoft.Xna.Framework.Vector3" /> from world space into screen space.
             </summary>
             <param name="source">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to project.</param>
             <param name="projection">The projection <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="view">The view <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="world">The world <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.Unproject(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
             <summary>
             Unprojects a <see cref="T:Microsoft.Xna.Framework.Vector3" /> from screen space into world space.
             </summary>
             <param name="source">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to unproject.</param>
             <param name="projection">The projection <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="view">The view <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <param name="world">The world <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.ToString">
             <summary>
             Returns a <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport" /> in the format:
             {X:[<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.X" />] Y:[<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.Y" />] Width:[<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.Width" />] Height:[<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.Height" />] MinDepth:[<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth" />] MaxDepth:[<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth" />]}
             </summary>
             <returns>A <see cref="T:System.String" /> representation of this <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport" />.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.Buttons">
             <summary>
             Defines the buttons on gamepad.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.DPadUp">
             <summary>
             Directional pad up.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.DPadDown">
             <summary>
             Directional pad down.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.DPadLeft">
             <summary>
             Directional pad left.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.DPadRight">
             <summary>
             Directional pad right.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.Start">
             <summary>
             START button.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.Back">
             <summary>
             BACK button.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftStick">
             <summary>
             Left stick button (pressing the left stick).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightStick">
             <summary>
             Right stick button (pressing the right stick).
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftShoulder">
             <summary>
             Left bumper (shoulder) button.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightShoulder">
             <summary>
             Right bumper (shoulder) button.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.BigButton">
             <summary>
             Big button.
             </summary>    
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.A">
             <summary>
             A button.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.B">
             <summary>
             B button.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.X">
             <summary>
             X button.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.Y">
             <summary>
             Y button.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickLeft">
             <summary>
             Left stick is towards the left.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightTrigger">
             <summary>
             Right trigger.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftTrigger">
             <summary>
             Left trigger.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightThumbstickUp">
             <summary>
             Right stick is towards up.
             </summary>   
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightThumbstickDown">
             <summary>
             Right stick is towards down.
             </summary>   
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightThumbstickRight">
             <summary>
             Right stick is towards the right.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.RightThumbstickLeft">
             <summary>
             Right stick is towards the left.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickUp">
             <summary>
             Left stick is towards up.
             </summary>  
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickDown">
             <summary>
             Left stick is towards down.
             </summary>  
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickRight">
             <summary>
             Left stick is towards the right.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.ButtonState">
             <summary>
             Defines a button state for buttons of mouse, gamepad or joystick.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.ButtonState.Released">
             <summary>
             The button is released.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.ButtonState.Pressed">
             <summary>
             The button is pressed.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.GamePad">
             <summary> 
             Supports querying the game controllers and setting the vibration motors.
             </summary>
             <summary> 
             Supports querying the game controllers and setting the vibration motors.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(Microsoft.Xna.Framework.PlayerIndex)">
             <summary>
             Returns the capabilites of the connected controller.
             </summary>
             <param name="playerIndex">Player index for the controller you want to query.</param>
             <returns>The capabilites of the controller.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(System.Int32)">
             <summary>
             Returns the capabilites of the connected controller.
             </summary>
             <param name="index">Index for the controller you want to query.</param>
             <returns>The capabilites of the controller.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex)">
             <summary>
             Gets the current state of a game pad controller with an independent axes dead zone.
             </summary>
             <param name="playerIndex">Player index for the controller you want to query.</param>
             <returns>The state of the controller.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetState(System.Int32)">
             <summary>
             Gets the current state of a game pad controller with an independent axes dead zone.
             </summary>
             <param name="index">Index for the controller you want to query.</param>
             <returns>The state of the controller.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.GamePadDeadZone)">
             <summary>
             Gets the current state of a game pad controller, using a specified dead zone
             on analog stick positions.
             </summary>
             <param name="playerIndex">Player index for the controller you want to query.</param>
             <param name="deadZoneMode">Enumerated value that specifies what dead zone type to use.</param>
             <returns>The state of the controller.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetState(System.Int32,Microsoft.Xna.Framework.Input.GamePadDeadZone)">
             <summary>
             Gets the current state of a game pad controller, using a specified dead zone
             on analog stick positions.
             </summary>
             <param name="index">Index for the controller you want to query.</param>
             <param name="deadZoneMode">Enumerated value that specifies what dead zone type to use.</param>
             <returns>The state of the controller.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePad.SetVibration(Microsoft.Xna.Framework.PlayerIndex,System.Single,System.Single)">
             <summary>
             Sets the vibration motor speeds on the controller device if supported.
             </summary>
             <param name="playerIndex">Player index that identifies the controller to set.</param>
             <param name="leftMotor">The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.</param>
             <param name="rightMotor">The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
             <returns>Returns true if the vibration motors were set.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePad.SetVibration(System.Int32,System.Single,System.Single)">
             <summary>
             Sets the vibration motor speeds on the controller device if supported.
             </summary>
             <param name="index">Index for the controller you want to query.</param>
             <param name="leftMotor">The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.</param>
             <param name="rightMotor">The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
             <returns>Returns true if the vibration motors were set.</returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.GamePad.MaximumGamePadCount">
             <summary>
             The maximum number of game pads supported on this system.  Attempting to
             access a gamepad index higher than this number will result in an <see cref="T:System.InvalidOperationException" />
             being thrown by the API.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)">
             <summary>
             Determines whether two specified instances of <see cref="T:Microsoft.Xna.Framework.Input.GamePadButtons" /> are equal.
             </summary>
             <param name="left">The first object to compare.</param>
             <param name="right">The second object to compare.</param>
             <returns>true if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, false.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)">
             <summary>
             Determines whether two specified instances of <see cref="T:Microsoft.Xna.Framework.Input.GamePadButtons" /> are not equal.
             </summary>
             <param name="left">The first object to compare.</param>
             <param name="right">The second object to compare.</param>
             <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.Equals(System.Object)">
             <summary>
             Returns a value indicating whether this instance is equal to a specified object.
             </summary>
             <param name="obj">An object to compare to this instance.</param>
             <returns>true if <paramref name="obj" /> is a <see cref="T:Microsoft.Xna.Framework.Input.GamePadButtons" /> and has the same value as this instance; otherwise, false.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)">
             <summary>
             Determines whether two specified instances of <see cref="T:Microsoft.Xna.Framework.Input.GamePadDPad" /> are equal.
             </summary>
             <param name="left">The first object to compare.</param>
             <param name="right">The second object to compare.</param>
             <returns>true if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, false.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)">
             <summary>
             Determines whether two specified instances of <see cref="T:Microsoft.Xna.Framework.Input.GamePadDPad" /> are not equal.
             </summary>
             <param name="left">The first object to compare.</param>
             <param name="right">The second object to compare.</param>
             <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.Equals(System.Object)">
             <summary>
             Returns a value indicating whether this instance is equal to a specified object.
             </summary>
             <param name="obj">An object to compare to this instance.</param>
             <returns>true if <paramref name="obj" /> is a <see cref="T:Microsoft.Xna.Framework.Input.GamePadDPad" /> and has the same value as this instance; otherwise, false.</returns>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.GamePadState.Default">
             <summary>
             The default initialized gamepad state.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadState.PlatformConstruct">
             <summary>
             Define this method in platform partial classes to initialize default
             values for platform-specific fields.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadState.GetVirtualButtons">
             <summary>
             Gets the button mask along with 'virtual buttons' like LeftThumbstickLeft.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Equality(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadThumbSticks)">
             <summary>
             Determines whether two specified instances of <see cref="T:Microsoft.Xna.Framework.Input.GamePadThumbSticks" /> are equal.
             </summary>
             <param name="left">The first object to compare.</param>
             <param name="right">The second object to compare.</param>
             <returns>true if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, false.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Inequality(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadThumbSticks)">
             <summary>
             Determines whether two specified instances of <see cref="T:Microsoft.Xna.Framework.Input.GamePadThumbSticks" /> are not equal.
             </summary>
             <param name="left">The first object to compare.</param>
             <param name="right">The second object to compare.</param>
             <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Equals(System.Object)">
             <summary>
             Returns a value indicating whether this instance is equal to a specified object.
             </summary>
             <param name="obj">An object to compare to this instance.</param>
             <returns>true if <paramref name="obj" /> is a <see cref="T:Microsoft.Xna.Framework.Input.GamePadThumbSticks" /> and has the same value as this instance; otherwise, false.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)">
             <summary>
             Determines whether two specified instances of <see cref="T:Microsoft.Xna.Framework.Input.GamePadTriggers" /> are equal.
             </summary>
             <param name="left">The first object to compare.</param>
             <param name="right">The second object to compare.</param>
             <returns>true if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, false.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)">
             <summary>
             Determines whether two specified instances of <see cref="T:Microsoft.Xna.Framework.Input.GamePadTriggers" /> are not equal.
             </summary>
             <param name="left">The first object to compare.</param>
             <param name="right">The second object to compare.</param>
             <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.Equals(System.Object)">
             <summary>
             Returns a value indicating whether this instance is equal to a specified object.
             </summary>
             <param name="obj">An object to compare to this instance.</param>
             <returns>true if <paramref name="obj" /> is a <see cref="T:Microsoft.Xna.Framework.Input.GamePadTriggers" /> and has the same value as this instance; otherwise, false.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.GamePadType">
             <summary>
             Defines a type of gamepad.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.GamePadType.Unknown">
             <summary>
             Unknown.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.GamePadType.GamePad">
             <summary>
             GamePad is the XBOX controller.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.GamePadType.Wheel">
             <summary>
             GamePad is a wheel.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.GamePadType.ArcadeStick">
             <summary>
             GamePad is an arcade stick.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.GamePadType.FlightStick">
             <summary>
             GamePad is a flight stick.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.GamePadType.DancePad">
             <summary>
             GamePad is a dance pad.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.GamePadType.Guitar">
             <summary>
             GamePad is a guitar.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.GamePadType.AlternateGuitar">
             <summary>
             GamePad is an alternate guitar.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.GamePadType.DrumKit">
             <summary>
             GamePad is a drum kit.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.GamePadType.BigButtonPad">
             <summary>
             GamePad is a big button pad.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.Joystick">
             <summary> 
             Allows interaction with joysticks. Unlike <see cref="T:Microsoft.Xna.Framework.Input.GamePad" /> the number of Buttons/Axes/DPads is not limited.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Joystick.GetCapabilities(System.Int32)">
             <summary>
             Gets the capabilites of the joystick.
             </summary>
             <param name="index">Index of the joystick you want to access.</param>
             <returns>The capabilites of the joystick.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Joystick.GetState(System.Int32)">
             <summary>
             Gets the current state of the joystick.
             </summary>
             <param name="index">Index of the joystick you want to access.</param>
             <returns>The state of the joystick.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.JoystickCapabilities">
             <summary>
             Describes joystick capabilities.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickCapabilities.IsConnected">
             <summary>
             Gets a value indicating whether the joystick is connected.
             </summary>
             <value><c>true</c> if the joystick is connected; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickCapabilities.Id">
             <summary>
             Gets the unique identifier of the joystick.
             </summary>
             <value>String representing the unique identifier of the joystick.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickCapabilities.AxisCount">
             <summary>
             Gets the axis count.
             </summary>
             <value>The number of axes that the joystick possesses.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickCapabilities.ButtonCount">
             <summary>
             Gets the button count.
             </summary>
             <value>The number of buttons that the joystick possesses.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickCapabilities.HatCount">
             <summary>
             Gets the hat count.
             </summary>
             <value>The number of hats/dpads that the joystick possesses.</value>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.JoystickHat">
             <summary>
             Describes joystick hat state.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickHat.Down">
             <summary>
             Gets if joysticks hat "down" is pressed.
             </summary>
             <value><see cref="F:Microsoft.Xna.Framework.Input.ButtonState.Pressed" /> if the button is pressed otherwise, <see cref="F:Microsoft.Xna.Framework.Input.ButtonState.Released" />.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickHat.Left">
             <summary>
             Gets if joysticks hat "left" is pressed.
             </summary>
             <value><see cref="F:Microsoft.Xna.Framework.Input.ButtonState.Pressed" /> if the button is pressed otherwise, <see cref="F:Microsoft.Xna.Framework.Input.ButtonState.Released" />.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickHat.Right">
             <summary>
             Gets if joysticks hat "right" is pressed.
             </summary>
             <value><see cref="F:Microsoft.Xna.Framework.Input.ButtonState.Pressed" /> if the button is pressed otherwise, <see cref="F:Microsoft.Xna.Framework.Input.ButtonState.Released" />.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickHat.Up">
             <summary>
             Gets if joysticks hat "up" is pressed.
             </summary>
             <value><see cref="F:Microsoft.Xna.Framework.Input.ButtonState.Pressed" /> if the button is pressed otherwise, <see cref="F:Microsoft.Xna.Framework.Input.ButtonState.Released" />.</value>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.JoystickState">
             <summary>
             Describes current joystick state.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickState.IsConnected">
             <summary>
             Gets a value indicating whether the joystick is connected.
             </summary>
             <value><c>true</c> if the joystick is connected; otherwise, <c>false</c>.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickState.Axes">
             <summary>
             Gets the joystick axis values.
             </summary>
             <value>An array list of floats that indicate axis values.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickState.Buttons">
             <summary>
             Gets the joystick button values.
             </summary>
             <value>An array list of ButtonState that indicate button values.</value>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.JoystickState.Hats">
             <summary>
             Gets the joystick hat values.
             </summary>
             <value>An array list of <see cref="T:Microsoft.Xna.Framework.Input.JoystickHat" /> that indicate hat values.</value>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.Keyboard">
             <summary>
             Allows getting keystrokes from keyboard.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Keyboard.GetState">
             <summary>
             Returns the current keyboard state.
             </summary>
             <returns>Current keyboard state.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Keyboard.GetState(Microsoft.Xna.Framework.PlayerIndex)">
             <summary>
             Returns the current keyboard state for a given player.
             </summary>
             <param name="playerIndex">Player index of the keyboard.</param>
             <returns>Current keyboard state.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.KeyboardState">
             <summary>
             Holds the state of keystrokes by a keyboard.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.KeyboardState.CapsLock">
             <summary>
             Gets the current state of the Caps Lock key.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.KeyboardState.NumLock">
             <summary>
             Gets the current state of the Num Lock key.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.#ctor(Microsoft.Xna.Framework.Input.Keys[],System.Boolean,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Input.KeyboardState" /> class.
             </summary>
             <param name="keys">List of keys to be flagged as pressed on initialization.</param>
             <param name="capsLock">Caps Lock state.</param>
             <param name="numLock">Num Lock state.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.#ctor(Microsoft.Xna.Framework.Input.Keys[])">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Input.KeyboardState" /> class.
             </summary>
             <param name="keys">List of keys to be flagged as pressed on initialization.</param>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.KeyboardState.Item(Microsoft.Xna.Framework.Input.Keys)">
             <summary>
             Returns the state of a specified key.
             </summary>
             <param name="key">The key to query.</param>
             <returns>The state of the key.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
             <summary>
             Gets whether given key is currently being pressed.
             </summary>
             <param name="key">The key to query.</param>
             <returns>true if the key is pressed; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)">
             <summary>
             Gets whether given key is currently being not pressed.
             </summary>
             <param name="key">The key to query.</param>
             <returns>true if the key is not pressed; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.GetPressedKeys">
             <summary>
             Returns an array of values holding keys that are currently being pressed.
             </summary>
             <returns>The keys that are currently being pressed.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.GetHashCode">
             <summary>
             Gets the hash code for <see cref="T:Microsoft.Xna.Framework.Input.KeyboardState" /> instance.
             </summary>
             <returns>Hash code of the object.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.op_Equality(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.KeyboardState)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Input.KeyboardState" /> instances are equal.
             </summary>
             <param name="a"><see cref="T:Microsoft.Xna.Framework.Input.KeyboardState" /> instance to the left of the equality operator.</param>
             <param name="b"><see cref="T:Microsoft.Xna.Framework.Input.KeyboardState" /> instance to the right of the equality operator.</param>
             <returns>true if the instances are equal; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.op_Inequality(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.KeyboardState)">
             <summary>
             Compares whether two <see cref="T:Microsoft.Xna.Framework.Input.KeyboardState" /> instances are not equal.
             </summary>
             <param name="a"><see cref="T:Microsoft.Xna.Framework.Input.KeyboardState" /> instance to the left of the inequality operator.</param>
             <param name="b"><see cref="T:Microsoft.Xna.Framework.Input.KeyboardState" /> instance to the right of the inequality operator.</param>
             <returns>true if the instances are different; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.Equals(System.Object)">
             <summary>
             Compares whether current instance is equal to specified object.
             </summary>
             <param name="obj">The <see cref="T:Microsoft.Xna.Framework.Input.KeyboardState" /> to compare.</param>
             <returns>true if the provided <see cref="T:Microsoft.Xna.Framework.Input.KeyboardState" /> instance is same with current; false otherwise.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.Keys">
             <summary>
             Defines the keys on a keyboard.
             </summary>	
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.None">
             <summary>
             Reserved.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Back">
             <summary>
             BACKSPACE key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Tab">
             <summary>
             TAB key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Enter">
             <summary>
             ENTER key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.CapsLock">
             <summary>
             CAPS LOCK key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Escape">
             <summary>
             ESC key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Space">
             <summary>
             SPACEBAR key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.PageUp">
             <summary>
             PAGE UP key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.PageDown">
             <summary>
             PAGE DOWN key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.End">
             <summary>
             END key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Home">
             <summary>
             HOME key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Left">
             <summary>
             LEFT ARROW key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Up">
             <summary>
             UP ARROW key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Right">
             <summary>
             RIGHT ARROW key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Down">
             <summary>
             DOWN ARROW key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Select">
             <summary>
             SELECT key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Print">
             <summary>
             PRINT key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Execute">
             <summary>
             EXECUTE key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.PrintScreen">
             <summary>
             PRINT SCREEN key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Insert">
             <summary>
             INS key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Delete">
             <summary>
             DEL key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Help">
             <summary>
             HELP key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.D0">
             <summary>
             Used for miscellaneous characters; it can vary by keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.D1">
             <summary>
             Used for miscellaneous characters; it can vary by keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.D2">
             <summary>
             Used for miscellaneous characters; it can vary by keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.D3">
             <summary>
             Used for miscellaneous characters; it can vary by keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.D4">
             <summary>
             Used for miscellaneous characters; it can vary by keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.D5">
             <summary>
             Used for miscellaneous characters; it can vary by keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.D6">
             <summary>
             Used for miscellaneous characters; it can vary by keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.D7">
             <summary>
             Used for miscellaneous characters; it can vary by keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.D8">
             <summary>
             Used for miscellaneous characters; it can vary by keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.D9">
             <summary>
             Used for miscellaneous characters; it can vary by keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.A">
             <summary>
             A key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.B">
             <summary>
             B key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.C">
             <summary>
             C key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.D">
             <summary>
             D key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.E">
             <summary>
             E key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F">
             <summary>
             F key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.G">
             <summary>
             G key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.H">
             <summary>
             H key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.I">
             <summary>
             I key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.J">
             <summary>
             J key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.K">
             <summary>
             K key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.L">
             <summary>
             L key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.M">
             <summary>
             M key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.N">
             <summary>
             N key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.O">
             <summary>
             O key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.P">
             <summary>
             P key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Q">
             <summary>
             Q key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.R">
             <summary>
             R key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.S">
             <summary>
             S key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.T">
             <summary>
             T key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.U">
             <summary>
             U key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.V">
             <summary>
             V key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.W">
             <summary>
             W key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.X">
             <summary>
             X key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Y">
             <summary>
             Y key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Z">
             <summary>
             Z key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.LeftWindows">
             <summary>
             Left Windows key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.RightWindows">
             <summary>
             Right Windows key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Apps">
             <summary>
             Applications key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Sleep">
             <summary>
             Computer Sleep key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad0">
             <summary>
             Numeric keypad 0 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad1">
             <summary>
             Numeric keypad 1 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad2">
             <summary>
             Numeric keypad 2 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad3">
             <summary>
             Numeric keypad 3 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad4">
             <summary>
             Numeric keypad 4 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad5">
             <summary>
             Numeric keypad 5 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad6">
             <summary>
             Numeric keypad 6 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad7">
             <summary>
             Numeric keypad 7 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad8">
             <summary>
             Numeric keypad 8 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.NumPad9">
             <summary>
             Numeric keypad 9 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Multiply">
             <summary>
             Multiply key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Add">
             <summary>
             Add key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Separator">
             <summary>
             Separator key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Subtract">
             <summary>
             Subtract key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Decimal">
             <summary>
             Decimal key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Divide">
             <summary>
             Divide key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F1">
             <summary>
             F1 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F2">
             <summary>
             F2 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F3">
             <summary>
             F3 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F4">
             <summary>
             F4 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F5">
             <summary>
             F5 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F6">
             <summary>
             F6 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F7">
             <summary>
             F7 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F8">
             <summary>
             F8 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F9">
             <summary>
             F9 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F10">
             <summary>
             F10 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F11">
             <summary>
             F11 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F12">
             <summary>
             F12 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F13">
             <summary>
             F13 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F14">
             <summary>
             F14 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F15">
             <summary>
             F15 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F16">
             <summary>
             F16 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F17">
             <summary>
             F17 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F18">
             <summary>
             F18 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F19">
             <summary>
             F19 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F20">
             <summary>
             F20 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F21">
             <summary>
             F21 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F22">
             <summary>
             F22 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F23">
             <summary>
             F23 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.F24">
             <summary>
             F24 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.NumLock">
             <summary>
             NUM LOCK key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Scroll">
             <summary>
             SCROLL LOCK key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.LeftShift">
             <summary>
             Left SHIFT key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.RightShift">
             <summary>
             Right SHIFT key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.LeftControl">
             <summary>
             Left CONTROL key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.RightControl">
             <summary>
             Right CONTROL key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.LeftAlt">
             <summary>
             Left ALT key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.RightAlt">
             <summary>
             Right ALT key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserBack">
             <summary>
             Browser Back key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserForward">
             <summary>
             Browser Forward key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserRefresh">
             <summary>
             Browser Refresh key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserStop">
             <summary>
             Browser Stop key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserSearch">
             <summary>
             Browser Search key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserFavorites">
             <summary>
             Browser Favorites key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.BrowserHome">
             <summary>
             Browser Start and Home key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.VolumeMute">
             <summary>
             Volume Mute key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.VolumeDown">
             <summary>
             Volume Down key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.VolumeUp">
             <summary>
             Volume Up key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.MediaNextTrack">
             <summary>
             Next Track key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.MediaPreviousTrack">
             <summary>
             Previous Track key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.MediaStop">
             <summary>
             Stop Media key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.MediaPlayPause">
             <summary>
             Play/Pause Media key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.LaunchMail">
             <summary>
             Start Mail key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.SelectMedia">
             <summary>
             Select Media key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.LaunchApplication1">
             <summary>
             Start Application 1 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.LaunchApplication2">
             <summary>
             Start Application 2 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemSemicolon">
             <summary>
             The OEM Semicolon key on a US standard keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemPlus">
             <summary>
             For any country/region, the '+' key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemComma">
             <summary>
             For any country/region, the ',' key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemMinus">
             <summary>
             For any country/region, the '-' key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemPeriod">
             <summary>
             For any country/region, the '.' key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemQuestion">
             <summary>
             The OEM question mark key on a US standard keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemTilde">
             <summary>
             The OEM tilde key on a US standard keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemOpenBrackets">
             <summary>
             The OEM open bracket key on a US standard keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemPipe">
             <summary>
             The OEM pipe key on a US standard keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemCloseBrackets">
             <summary>
             The OEM close bracket key on a US standard keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemQuotes">
             <summary>
             The OEM singled/double quote key on a US standard keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Oem8">
             <summary>
             Used for miscellaneous characters; it can vary by keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemBackslash">
             <summary>
             The OEM angle bracket or backslash key on the RT 102 key keyboard.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.ProcessKey">
             <summary>
             IME PROCESS key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Attn">
             <summary>
             Attn key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Crsel">
             <summary>
             CrSel key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Exsel">
             <summary>
             ExSel key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.EraseEof">
             <summary>
             Erase EOF key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Play">
             <summary>
             Play key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Zoom">
             <summary>
             Zoom key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Pa1">
             <summary>
             PA1 key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemClear">
             <summary>
             CLEAR key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.ChatPadGreen">
             <summary>
             Green ChatPad key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.ChatPadOrange">
             <summary>
             Orange ChatPad key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Pause">
             <summary>
             PAUSE key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.ImeConvert">
             <summary>
             IME Convert key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.ImeNoConvert">
             <summary>
             IME NoConvert key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Kana">
             <summary>
             Kana key on Japanese keyboards.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.Kanji">
             <summary>
             Kanji key on Japanese keyboards.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemAuto">
             <summary>
             OEM Auto key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemCopy">
             <summary>
             OEM Copy key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Keys.OemEnlW">
             <summary>
             OEM Enlarge Window key.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.KeyState">
             <summary>
             Identifies the state of a keyboard key.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.KeyState.Up">
             <summary>
             Key is released.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.KeyState.Down">
             <summary>
             Key is pressed.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.Mouse">
             <summary>
             Allows reading position and button click information from mouse.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Mouse.WindowHandle">
             <summary>
             Gets or sets the window handle for current mouse processing.
             </summary> 
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Mouse.GetState(Microsoft.Xna.Framework.GameWindow)">
             <summary>
             This API is an extension to XNA.
             Gets mouse state information that includes position and button
             presses for the provided window
             </summary>
             <returns>Current state of the mouse.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Mouse.GetState">
             <summary>
             Gets mouse state information that includes position and button presses
             for the primary window
             </summary>
             <returns>Current state of the mouse.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Mouse.SetPosition(System.Int32,System.Int32)">
             <summary>
             Sets mouse cursor's relative position to game-window.
             </summary>
             <param name="x">Relative horizontal position of the cursor.</param>
             <param name="y">Relative vertical position of the cursor.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Mouse.SetCursor(Microsoft.Xna.Framework.Input.MouseCursor)">
             <summary>
             Sets the cursor image to the specified MouseCursor.
             </summary>
             <param name="cursor">Mouse cursor to use for the cursor image.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.MouseCursor">
             <summary>
             Describes a mouse cursor.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseCursor.Arrow">
             <summary>
             Gets the default arrow cursor.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseCursor.IBeam">
             <summary>
             Gets the cursor that appears when the mouse is over text editing regions.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseCursor.Wait">
             <summary>
             Gets the waiting cursor that appears while the application/system is busy.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseCursor.Crosshair">
             <summary>
             Gets the crosshair ("+") cursor.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseCursor.WaitArrow">
             <summary>
             Gets the cross between Arrow and Wait cursors.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseCursor.SizeNWSE">
             <summary>
             Gets the northwest/southeast ("\") cursor.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseCursor.SizeNESW">
             <summary>
             Gets the northeast/southwest ("/") cursor.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseCursor.SizeWE">
             <summary>
             Gets the horizontal west/east ("-") cursor.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseCursor.SizeNS">
             <summary>
             Gets the vertical north/south ("|") cursor.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseCursor.SizeAll">
             <summary>
             Gets the size all cursor which points in all directions.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseCursor.No">
             <summary>
             Gets the cursor that points that something is invalid, usually a cross.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseCursor.Hand">
             <summary>
             Gets the hand cursor, usually used for web links.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.MouseCursor.FromTexture2D(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32)">
             <summary>
             Creates a mouse cursor from the specified texture.
             </summary>
             <param name="texture">Texture to use as the cursor image.</param>
             <param name="originx">X cordinate of the image that will be used for mouse position.</param>
             <param name="originy">Y cordinate of the image that will be used for mouse position.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.MouseState">
             <summary>
             Represents a mouse state with cursor position and button press information.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.MouseState.#ctor(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState,Microsoft.Xna.Framework.Input.ButtonState)">
             <summary>
             Initializes a new instance of the MouseState.
             </summary>
             <param name="x">Horizontal position of the mouse in relation to the window.</param>
             <param name="y">Vertical position of the mouse in relation to the window.</param>
             <param name="scrollWheel">Mouse scroll wheel's value.</param>
             <param name="leftButton">Left mouse button's state.</param>
             <param name="middleButton">Middle mouse button's state.</param>
             <param name="rightButton">Right mouse button's state.</param>
             <param name="xButton1">XBUTTON1's state.</param>
             <param name="xButton2">XBUTTON2's state.</param>
             <remarks>Normally <see cref="M:Microsoft.Xna.Framework.Input.Mouse.GetState" /> should be used to get mouse current state. The constructor is provided for simulating mouse input.</remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.MouseState.op_Equality(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState)">
             <summary>
             Compares whether two MouseState instances are equal.
             </summary>
             <param name="left">MouseState instance on the left of the equal sign.</param>
             <param name="right">MouseState instance  on the right of the equal sign.</param>
             <returns>true if the instances are equal; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.MouseState.op_Inequality(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState)">
             <summary>
             Compares whether two MouseState instances are not equal.
             </summary>
             <param name="left">MouseState instance on the left of the equal sign.</param>
             <param name="right">MouseState instance  on the right of the equal sign.</param>
             <returns>true if the objects are not equal; false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.MouseState.Equals(System.Object)">
             <summary>
             Compares whether current instance is equal to specified object.
             </summary>
             <param name="obj">The MouseState to compare.</param>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.MouseState.GetHashCode">
             <summary>
             Gets the hash code for MouseState instance.
             </summary>
             <returns>Hash code of the object.</returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseState.X">
             <summary>
             Gets horizontal position of the cursor in relation to the window.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseState.Y">
             <summary>
             Gets vertical position of the cursor in relation to the window.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseState.Position">
             <summary>
             Gets cursor position.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseState.LeftButton">
             <summary>
             Gets state of the left mouse button.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseState.MiddleButton">
             <summary>
             Gets state of the middle mouse button.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseState.RightButton">
             <summary>
             Gets state of the right mouse button.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseState.ScrollWheelValue">
             <summary>
             Returns cumulative scroll wheel value since the game start.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseState.XButton1">
             <summary>
             Gets state of the XButton1.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.MouseState.XButton2">
             <summary>
             Gets state of the XButton2.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.Touch.GestureSample">
             <summary>
             Represents data from a multi-touch gesture over a span of time.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.GestureSample.GestureType">
             <summary>
             Gets the type of the gesture.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.GestureSample.Timestamp">
             <summary>
             Gets the starting time for this multi-touch gesture sample.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.GestureSample.Position">
             <summary>
             Gets the position of the first touch-point in the gesture sample.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.GestureSample.Position2">
             <summary>
             Gets the position of the second touch-point in the gesture sample.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.GestureSample.Delta">
             <summary>
             Gets the delta information for the first touch-point in the gesture sample.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.GestureSample.Delta2">
             <summary>
             Gets the delta information for the second touch-point in the gesture sample.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.GestureSample.#ctor(Microsoft.Xna.Framework.Input.Touch.GestureType,System.TimeSpan,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
             <summary>
             Initializes a new <see cref="T:Microsoft.Xna.Framework.Input.Touch.GestureSample" />.
             </summary>
             <param name="gestureType"><see cref="T:Microsoft.Xna.Framework.Input.Touch.GestureType" /></param>
             <param name="timestamp"></param>
             <param name="position"></param>
             <param name="position2"></param>
             <param name="delta"></param>
             <param name="delta2"></param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.Touch.GestureType">
             <summary>
             Enumuration of values that represent different gestures that can be processed by <see cref="M:Microsoft.Xna.Framework.Input.Touch.TouchPanel.ReadGesture" />.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.GestureType.None">
             <summary>
             No gestures.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.GestureType.Tap">
             <summary>
             The user touched a single point.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.GestureType.DragComplete">
             <summary>
             States completion of a drag gesture(VerticalDrag, HorizontalDrag, or FreeDrag).
             </summary>
             <remarks>No position or delta information is available for this sample.</remarks>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.GestureType.Flick">
             <summary>
             States that a touch was combined with a quick swipe.
             </summary>    
             <remarks>Flicks does not contain position information. The velocity of it can be read from <see cref="P:Microsoft.Xna.Framework.Input.Touch.GestureSample.Delta" /></remarks>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.GestureType.FreeDrag">
             <summary>
             The use touched a point and then performed a free-form drag.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.GestureType.Hold">
             <summary>        
             The use touched a single point for approximately one second.
             </summary>
             <remarks>As this is a single event, it will not be contionusly fired while the user is holding the touch-point.</remarks>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.GestureType.HorizontalDrag">
             <summary>
             The user touched the screen and performed either left to right or right to left drag gesture.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.GestureType.Pinch">
             <summary>
             The user either converged or diverged two touch-points on the screen which is like a two-finger drag.
             </summary>
             <remarks>When this gesture-type is enabled and two fingers are down, it takes precedence over drag gestures.</remarks>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.GestureType.PinchComplete">
             <summary>
             An in-progress pinch operation was completed.
             </summary>
             <remarks>No position or delta information is available for this sample.</remarks>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.GestureType.DoubleTap">
             <summary>
             The user tapped the device twice which is always preceded by a Tap gesture.
             </summary>
             <remarks>If the time between two touchs are long enough, insted two seperate single Tap gestures will be generated.</remarks>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.GestureType.VerticalDrag">
             <summary>
             The user touched the screen and performed either top to bottom or bottom to top drag gesture.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.Touch.TouchCollection">
             <summary>
             Provides state information for a touch screen enabled device.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsConnected">
             <summary>
             States if a touch screen is available.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.#ctor(Microsoft.Xna.Framework.Input.Touch.TouchLocation[])">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchCollection" /> with a pre-determined set of touch locations.
             </summary>
             <param name="touches">Array of <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> items to initialize with.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.FindById(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation@)">
             <summary>
             Returns <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> specified by ID.
             </summary>
             <param name="id"></param>
             <param name="touchLocation"></param>
             <returns></returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchCollection.IsReadOnly">
             <summary>
             States if touch collection is read only.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.IndexOf(Microsoft.Xna.Framework.Input.Touch.TouchLocation)">
             <summary>
             Returns the index of the first occurrence of specified <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> item in the collection.
             </summary>
             <param name="item"><see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> to query.</param>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Insert(System.Int32,Microsoft.Xna.Framework.Input.Touch.TouchLocation)">
             <summary>
             Inserts a <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> item into the indicated position.
             </summary>
             <param name="index">The position to insert into.</param>
             <param name="item">The <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> item to insert.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.RemoveAt(System.Int32)">
             <summary>
             Removes the <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> item at specified index.
             </summary>
             <param name="index">Index of the item that will be removed from collection.</param>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Item(System.Int32)">
             <summary>
             Gets or sets the item at the specified index of the collection.
             </summary>
             <param name="index">Position of the item.</param>
             <returns><see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Add(Microsoft.Xna.Framework.Input.Touch.TouchLocation)">
             <summary>
             Adds a <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> to the collection.
             </summary>
             <param name="item">The <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> item to be added. </param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Clear">
             <summary>
             Clears all the items in collection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Contains(Microsoft.Xna.Framework.Input.Touch.TouchLocation)">
             <summary>
             Returns true if specified <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> item exists in the collection, false otherwise./&gt;
             </summary>
             <param name="item">The <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> item to query for.</param>
             <returns>Returns true if queried item is found, false otherwise.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.CopyTo(Microsoft.Xna.Framework.Input.Touch.TouchLocation[],System.Int32)">
             <summary>
             Copies the <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" />collection to specified array starting from the given index.
             </summary>
             <param name="array">The array to copy <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> items.</param>
             <param name="arrayIndex">The starting index of the copy operation.</param>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Count">
             <summary>
             Returns the number of <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> items that exist in the collection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Remove(Microsoft.Xna.Framework.Input.Touch.TouchLocation)">
             <summary>
             Removes the specified <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> item from the collection.
             </summary>
             <param name="item">The <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> item to remove.</param>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.GetEnumerator">
             <summary>
             Returns an enumerator for the <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchCollection" />.
             </summary>
             <returns>Enumerable list of <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> objects.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#Generic#IEnumerable{Microsoft#Xna#Framework#Input#Touch#TouchLocation}#GetEnumerator">
             <summary>
             Returns an enumerator for the <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchCollection" />.
             </summary>
             <returns>Enumerable list of <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchLocation" /> objects.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.System#Collections#IEnumerable#GetEnumerator">
             <summary>
             Returns an enumerator for the <see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchCollection" />.
             </summary>
             <returns>Enumerable list of objects.</returns>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Enumerator">
             <summary>
             Provides the ability to iterate through the TouchLocations in an TouchCollection.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Enumerator.Current">
             <summary>
             Gets the current element in the TouchCollection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Enumerator.MoveNext">
             <summary>
             Advances the enumerator to the next element of the TouchCollection.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchCollection.Enumerator.Dispose">
             <summary>
             Immediately releases the unmanaged resources used by this object.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchLocation._id">
             <summary>
            Attributes 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchLocation.SameFrameReleased">
             <summary>
             True if this touch was pressed and released on the same frame.
             In this case we will keep it around for the user to get by GetState that frame.
             However if they do not call GetState that frame, this touch will be forgotten.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchLocation.Invalid">
             <summary>
             Helper for assigning an invalid touch location.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchLocation.AsMovedState">
             <summary>
             Returns a copy of the touch with the state changed to moved.
             </summary>
             <returns>The new touch location.</returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchLocation.UpdateState(Microsoft.Xna.Framework.Input.Touch.TouchLocation)">
             <summary>
             Updates the touch location using the new event.
             </summary>
             <param name="touchEvent">The next event for this touch location.</param>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.Touch.TouchLocationState">
             <summary>
             Holds the possible state information for a touch location..
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchLocationState.Invalid">
             <summary>
             This touch location position is invalid.
             </summary>
             <remarks>Typically, you will encounter this state when a new touch location attempts to get the previous state of itself.</remarks>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchLocationState.Moved">
             <summary>
             This touch location position was updated or pressed at the same position.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchLocationState.Pressed">
             <summary>
             This touch location position is new. 
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchLocationState.Released">
             <summary>
             This touch location position was released. 
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.Touch.TouchPanel">
             <summary>
             Allows retrieval of information from Touch Panel device.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchPanel.GetState">
             <summary>
             Gets the current state of the touch panel.
             </summary>
             <returns><see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchCollection" /></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchPanel.ReadGesture">
             <summary>
             Returns the next available gesture on touch panel device.
             </summary>
             <returns><see cref="T:Microsoft.Xna.Framework.Input.Touch.GestureSample" /></returns>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.WindowHandle">
             <summary>
             The window handle of the touch panel. Purely for Xna compatibility.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayHeight">
             <summary>
             Gets or sets the display height of the touch panel.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayOrientation">
             <summary>
             Gets or sets the display orientation of the touch panel.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.DisplayWidth">
             <summary>
             Gets or sets the display width of the touch panel.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.EnabledGestures">
             <summary>
             Gets or sets enabled gestures.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanel.IsGestureAvailable">
             <summary>
             Returns true if a touch gesture is available.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities">
             <summary>
             Allows retrieval of capabilities information from touch panel device.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities.IsConnected">
             <summary>
             Returns true if a device is available for use.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities.MaximumTouchCount">
             <summary>
             Returns the maximum number of touch locations tracked by the touch panel device.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.MouseTouchId">
             <summary>
             The reserved touchId for all mouse touch points.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchPanelState._touchState">
             <summary>
             The current touch state.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchPanelState._gestureState">
             <summary>
             The current gesture state.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchPanelState._touchScale">
             <summary>
             The positional scale to apply to touch input.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchPanelState._displaySize">
             <summary>
             The current size of the display.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchPanelState._nextTouchId">
             <summary>
             The next touch location identifier.
             The value 1 is reserved for the mouse touch point.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.CurrentTimestamp">
             <summary>
             The current timestamp that we use for setting the timestamp of new TouchLocations
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchPanelState._touchIds">
             <summary>
             The mapping between platform specific touch ids
             and the touch ids we assign to touch locations.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.WindowHandle">
             <summary>
             The window handle of the touch panel. Purely for Xna compatibility.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.GetCapabilities">
             <summary>
             Returns capabilities of touch panel device.
             </summary>
             <returns><see cref="T:Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities" /></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.AgeTouches(System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Touch.TouchLocation})">
             <summary>
             Age all the touches, so any that were Pressed become Moved, and any that were Released are removed
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.ApplyTouch(System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Touch.TouchLocation},Microsoft.Xna.Framework.Input.Touch.TouchLocation)">
             <summary>
             Apply the given new touch to the state. If it is a Pressed it will be added as a new touch, otherwise we update the existing touch it matches
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.ReleaseAllTouches">
             <summary>
             This will release all touch locations.  It should only be 
             called on platforms where touch state is reset all at once.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.DisplayHeight">
             <summary>
             Gets or sets the display height of the touch panel.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.DisplayOrientation">
             <summary>
             Gets or sets the display orientation of the touch panel.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.DisplayWidth">
             <summary>
             Gets or sets the display width of the touch panel.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.EnabledGestures">
             <summary>
             Gets or sets enabled gestures.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.IsGestureAvailable">
             <summary>
             Returns true if a touch gesture is available.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.ReadGesture">
             <summary>
             Returns the next available gesture on touch panel device.
             </summary>
             <returns><see cref="T:Microsoft.Xna.Framework.Input.Touch.GestureSample" /></returns>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchPanelState.TapJitterTolerance">
             <summary>
             Maximum distance a touch location can wiggle and 
             not be considered to have moved.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchPanelState._pinchTouch">
             <summary>
             The pinch touch locations.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchPanelState._pinchGestureStarted">
             <summary>
             If true the pinch touch locations are valid and
             a pinch gesture has begun.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchPanelState._tapDisabled">
             <summary>
             Used to disable emitting of tap gestures.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Input.Touch.TouchPanelState._holdDisabled">
             <summary>
             Used to disable emitting of hold gestures.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Album.Duration">
             <summary>
             Gets the duration of the Album.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Album.Genre">
             <summary>
             Gets the Genre of the Album.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Album.HasArt">
             <summary>
             Gets a value indicating whether the Album has associated album art.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Album.IsDisposed">
             <summary>
             Gets a value indicating whether the object is disposed.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Album.Name">
             <summary>
             Gets the name of the Album.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Album.Songs">
             <summary>
             Gets a SongCollection that contains the songs on the album.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.Album.Dispose">
             <summary>
             Immediately releases the unmanaged resources used by this object.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.Album.GetAlbumArt">
             <summary>
             Returns the stream that contains the album art image data.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.Album.GetThumbnail">
             <summary>
             Returns the stream that contains the album thumbnail image data.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.Album.ToString">
             <summary>
             Returns a String representation of this Album.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.Album.GetHashCode">
             <summary>
             Gets the hash code for this instance.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.AlbumCollection.Count">
             <summary>
             Gets the number of Album objects in the AlbumCollection.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.AlbumCollection.IsDisposed">
             <summary>
             Gets a value indicating whether the object is disposed.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.AlbumCollection.Item(System.Int32)">
             <summary>
             Gets the Album at the specified index in the AlbumCollection.
             </summary>
             <param name="index">Index of the Album to get.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.AlbumCollection.Dispose">
             <summary>
             Immediately releases the unmanaged resources used by this object.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Artist.Albums">
             <summary>
             Gets the AlbumCollection for the Artist.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Artist.IsDisposed">
             <summary>
             Gets a value indicating whether the object is disposed.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Artist.Name">
             <summary>
             Gets the name of the Artist.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Artist.Songs">
             <summary>
             Gets the SongCollection for the Artist.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.Artist.Dispose">
             <summary>
             Immediately releases the unmanaged resources used by this object.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.Artist.ToString">
             <summary>
             Returns a String representation of the Artist.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.Artist.GetHashCode">
             <summary>
             Gets the hash code for this instance.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Genre.Albums">
             <summary>
             Gets the AlbumCollection for the Genre.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Genre.IsDisposed">
             <summary>
             Gets a value indicating whether the object is disposed.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Genre.Name">
             <summary>
             Gets the name of the Genre.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Genre.Songs">
             <summary>
             Gets the SongCollection for the Genre.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.Genre.Dispose">
             <summary>
             Immediately releases the unmanaged resources used by this object.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.Genre.ToString">
             <summary>
             Returns a String representation of the Genre.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.Genre.GetHashCode">
             <summary>
             Gets the hash code for this instance.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.MediaLibrary.Load(System.Action{System.Int32})">
             <summary>
             Load the contents of MediaLibrary. This blocking call might take up to a few minutes depending on the platform and the size of the user's music library.
             </summary>
             <param name="progressCallback">Callback that reports back the progress of the music library loading in percents (0-100).</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song)">
             <summary>
             Play clears the current playback queue, and then queues up the specified song for playback. 
             Playback starts immediately at the beginning of the song.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.MediaPlayer.Play(Microsoft.Xna.Framework.Media.Song,System.Nullable{System.TimeSpan})">
             <summary>
             Play clears the current playback queue, and then queues up the specified song for playback. 
             Playback starts immediately at the given position of the song.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Song.Album">
             <summary>
             Gets the Album on which the Song appears.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Song.Artist">
             <summary>
             Gets the Artist of the Song.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Song.Genre">
             <summary>
             Gets the Genre of the Song.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.Song.SetEventHandler(Microsoft.Xna.Framework.Media.Song.FinishedPlayingHandler)">
             <summary>
             Set the event handler for "Finished Playing". Done this way to prevent multiple bindings.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Media.VideoSoundtrackType">
             <summary>
             Type of sounds in a video
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Media.VideoSoundtrackType.Music">
             <summary>
             This video contains only music.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Media.VideoSoundtrackType.Dialog">
             <summary>
             This video contains only dialog.
             </summary>
            </member>
        <member name="F:Microsoft.Xna.Framework.Media.VideoSoundtrackType.MusicAndDialog">
             <summary>
             This video contains music and dialog.
             </summary>
            </member>
        <member name="T:Microsoft.Xna.Framework.Media.Video">
             <summary>
             Represents a video.
             </summary>
             <summary>
             Represents a video.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Video.FileName">
             <summary>
             I actually think this is a file PATH...
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Video.Duration">
             <summary>
             Gets the duration of the Video.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Video.FramesPerSecond">
             <summary>
             Gets the frame rate of this video.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Video.Height">
             <summary>
             Gets the height of this video, in pixels.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Video.VideoSoundtrackType">
             <summary>
             Gets the VideoSoundtrackType for this video.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.Video.Width">
             <summary>
             Gets the width of this video, in pixels.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.IsDisposed">
             <summary>
             Gets a value that indicates whether the object is disposed.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.IsLooped">
             <summary>
             Gets a value that indicates whether the player is playing video in a loop.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.IsMuted">
             <summary>
             Gets or sets the muted setting for the video player.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.PlayPosition">
             <summary>
             Gets the play position within the currently playing video.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.State">
             <summary>
             Gets the media playback state, MediaState.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.Video">
             <summary>
             Gets the Video that is currently playing.
             </summary>
            </member>
        <member name="P:Microsoft.Xna.Framework.Media.VideoPlayer.Volume">
             <summary>
             Video player volume, from 0.0f (silence) to 1.0f (full volume relative to the current device volume).
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.GetTexture">
             <summary>
             Retrieves a Texture2D containing the current frame of video being played.
             </summary>
             <returns>The current frame of video.</returns>
             <exception cref="T:System.InvalidOperationException">Thrown if no video is set on the player</exception>
             <exception cref="T:System.InvalidOperationException">Thrown if the platform was unable to get a texture in a reasonable amount of time. Often the platform specific media code is running
             in a different thread or process. Note: This may be a change from XNA behaviour</exception>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.Pause">
             <summary>
             Pauses the currently playing video.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.Play(Microsoft.Xna.Framework.Media.Video)">
             <summary>
             Plays a Video.
             </summary>
             <param name="video">Video to play.</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.Resume">
             <summary>
             Resumes a paused video.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.Stop">
             <summary>
             Stops playing a video.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Media.VideoPlayer.Dispose">
             <summary>
             Immediately releases the unmanaged resources used by this object.
             </summary>
            </member>
        <member name="M:MonoGame.Utilities.Hash.ComputeHash(System.Byte[])">
             <summary>
             Compute a hash from a byte array.
             </summary>
             <remarks>
             Modified FNV Hash in C#
             http://stackoverflow.com/a/468084
             </remarks>
            </member>
        <member name="M:MonoGame.Utilities.Hash.ComputeHash(System.IO.Stream)">
             <summary>
             Compute a hash from the content of a stream and restore the position.
             </summary>
             <remarks>
             Modified FNV Hash in C#
             http://stackoverflow.com/a/468084
             </remarks>
            </member>
        <member name="M:Microsoft.Xna.Framework.Utilities.FileHelpers.ResolveRelativePath(System.String,System.String)">
             <summary>
             Combines the filePath and relativeFile based on relativeFile being a file in the same location as filePath.
             Relative directory operators (..) are also resolved
             </summary>
             <example>"A\B\C.txt","D.txt" becomes "A\B\D.txt"</example>
             <example>"A\B\C.txt","..\D.txt" becomes "A\D.txt"</example>
             <param name="filePath">Path to the file we are starting from</param>
             <param name="relativeFile">Relative location of another file to resolve the path to</param>
            </member>
        <member name="M:Microsoft.Xna.Framework.Utilities.ReflectionHelpers.IsConcreteClass(System.Type)">
             <summary>
             Returns true if the given type represents a non-object type that is not abstract.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Utilities.ReflectionHelpers.PropertyIsPublic(System.Reflection.PropertyInfo)">
             <summary>
             Returns true if the get method of the given property exist and are public.
             Note that we allow a getter-only property to be serialized (and deserialized),
             *if* CanDeserializeIntoExistingObject is true for the property type.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Utilities.ReflectionHelpers.IsAssignableFrom(System.Type,System.Object)">
             <summary>
             Returns true if the given type can be assigned the given value
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Utilities.ReflectionHelpers.IsAssignableFromType(System.Type,System.Type)">
             <summary>
             Returns true if the given type can be assigned a value with the given object type
             </summary>
            </member>
        <member name="T:MonoGame.Utilities.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream" />.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read()</c> and <c>Write()</c> operations.  Either compression or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.
             </para>
            
             <para>
             This class is similar to DeflateStream, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:MonoGame.Utilities.GZipStream" />.
             </para>
             </remarks>
             <seealso cref="T:MonoGame.Utilities.GZipStream" />
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.#ctor(System.IO.Stream,MonoGame.Utilities.CompressionMode)">
             <summary>
             Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c>
               will use the default compression level. The "captive" stream will be
               closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a <c>ZlibStream</c> to compress a file, and writes the
             compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.#ctor(System.IO.Stream,MonoGame.Utilities.CompressionMode,MonoGame.Utilities.CompressionLevel)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
               The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
               This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
               compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.#ctor(System.IO.Stream,MonoGame.Utilities.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the captive stream should be left open after
               Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
               the default compression level.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream" /> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen" /> parameter to leave the stream
               open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.#ctor(System.IO.Stream,MonoGame.Utilities.CompressionMode,MonoGame.Utilities.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify
               whether the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive
               stream remain open after the deflation or inflation occurs.  By
               default, after <c>Close()</c> is called on the stream, the captive
               stream is also closed. In some cases this is not desired, for example
               if the stream is a <see cref="T:System.IO.MemoryStream" /> that will be
               re-read after compression.  Specify true for the <paramref name="leaveOpen" /> parameter to leave the stream open.
             </para>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after
             inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is
             effective only when mode is <c>CompressionMode.Compress</c>.
             </param>
            </member>
        <member name="P:MonoGame.Utilities.ZlibStream.FlushMode">
             <summary>
             This property sets the flush behavior on the stream.
             Sorry, though, not sure exactly how to describe all the various settings.
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.ZlibStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes. The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.ZlibStream.TotalIn">
             <summary> Returns the total number of bytes input so far.</summary>
            </member>
        <member name="P:MonoGame.Utilities.ZlibStream.TotalOut">
             <summary> Returns the total number of bytes output so far.</summary>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.Dispose(System.Boolean)">
             <summary>
               Dispose the stream.
             </summary>
             <remarks>
               <para>
                 This may or may not result in a <c>Close()</c> call on the captive
                 stream.  See the constructors that have a <c>leaveOpen</c> parameter
                 for more information.
               </para>
               <para>
                 This method may be invoked in two distinct scenarios.  If disposing
                 == true, the method has been called directly or indirectly by a
                 user's code, for example via the public Dispose() method. In this
                 case, both managed and unmanaged resources can be referenced and
                 disposed.  If disposing == false, the method has been called by the
                 runtime from inside the object finalizer and this method should not
                 reference other objects; in that case only unmanaged resources must
                 be referenced or disposed.
               </para>
             </remarks>
             <param name="disposing">
               indicates whether the Dispose method was invoked by user code.
             </param>
            </member>
        <member name="P:MonoGame.Utilities.ZlibStream.CanRead">
             <summary>
             Indicates whether the stream can be read.
             </summary>
             <remarks>
             The return value depends on whether the captive stream supports reading.
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.ZlibStream.CanSeek">
             <summary>
             Indicates whether the stream supports Seek operations.
             </summary>
             <remarks>
             Always returns false.
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.ZlibStream.CanWrite">
             <summary>
             Indicates whether the stream can be written.
             </summary>
             <remarks>
             The return value depends on whether the captive stream supports writing.
             </remarks>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.Flush">
             <summary>
             Flush the stream.
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.ZlibStream.Length">
             <summary>
             Reading this property always throws a <see cref="T:System.NotSupportedException" />.
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.ZlibStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotSupportedException" />. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while reading,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               providing an uncompressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
               use the <c>ZlibStream</c> to decompress data while reading, you can create
               a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
               readable compressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data will be decompressed as it is read.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
               not both.
             </para>
            
             </remarks>
            
             <param name="buffer">
             The buffer into which the read data should be placed.</param>
            
             <param name="offset">
             the offset within that data array to put the first byte read.</param>
            
             <param name="count">the number of bytes to read.</param>
            
             <returns>the number of bytes read</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             Calling this method always throws a <see cref="T:System.NotSupportedException" />.
             </summary>
             <param name="offset">
               The offset to seek to....
               IF THIS METHOD ACTUALLY DID ANYTHING.
             </param>
             <param name="origin">
               The reference specifying how to apply the offset....  IF
               THIS METHOD ACTUALLY DID ANYTHING.
             </param>
            
             <returns>nothing. This method always throws.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.SetLength(System.Int64)">
             <summary>
             Calling this method always throws a <see cref="T:System.NotSupportedException" />.
             </summary>
             <param name="value">
               The new value for the stream length....  IF
               THIS METHOD ACTUALLY DID ANYTHING.
             </param>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while writing,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               and a writable output stream.  Then call <c>Write()</c> on that
               <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
               the output stream will be the compressed form of the data written.  If you
               wish to use the <c>ZlibStream</c> to decompress data while writing, you
               can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that stream,
               providing previously compressed data. The data sent to the output stream
               will be the decompressed form of the data written.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:MonoGame.Utilities.ZlibStream.UncompressString(System.Byte[])" />.
             </remarks>
            
             <seealso cref="M:MonoGame.Utilities.ZlibStream.UncompressString(System.Byte[])" />
             <seealso cref="M:MonoGame.Utilities.ZlibStream.CompressBuffer(System.Byte[])" />
             <seealso cref="M:MonoGame.Utilities.GZipStream.CompressString(System.String)" />
            
             <param name="s">
               A string to compress.  The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:MonoGame.Utilities.ZlibStream.UncompressBuffer(System.Byte[])" />.
             </remarks>
            
             <seealso cref="M:MonoGame.Utilities.ZlibStream.CompressString(System.String)" />
             <seealso cref="M:MonoGame.Utilities.ZlibStream.UncompressBuffer(System.Byte[])" />
            
             <param name="b">
             A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a single string.
             </summary>
            
             <seealso cref="M:MonoGame.Utilities.ZlibStream.CompressString(System.String)" />
             <seealso cref="M:MonoGame.Utilities.ZlibStream.UncompressBuffer(System.Byte[])" />
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a byte array.
             </summary>
            
             <seealso cref="M:MonoGame.Utilities.ZlibStream.CompressBuffer(System.Byte[])" />
             <seealso cref="M:MonoGame.Utilities.ZlibStream.UncompressString(System.Byte[])" />
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The data in uncompressed form</returns>
            </member>
        <member name="T:MonoGame.Utilities.ZlibConstants">
             <summary>
             A bunch of constants used in the Zlib interface.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibConstants.WindowBitsMax">
             <summary>
             The maximum number of window bits for the Deflate algorithm.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibConstants.WindowBitsDefault">
             <summary>
             The default number of window bits for the Deflate algorithm.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibConstants.Z_OK">
             <summary>
             indicates everything is A-OK
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibConstants.Z_STREAM_END">
             <summary>
             Indicates that the last operation reached the end of the stream.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibConstants.Z_NEED_DICT">
             <summary>
             The operation ended in need of a dictionary. 
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibConstants.Z_STREAM_ERROR">
             <summary>
             There was an error with the stream - not enough data, not open and readable, etc.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibConstants.Z_DATA_ERROR">
             <summary>
             There was an error with the data - not enough data, bad data, etc.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibConstants.Z_BUF_ERROR">
             <summary>
             There was an error with the working buffer.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibConstants.WorkingBufferSizeDefault">
             <summary>
             The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibConstants.WorkingBufferSizeMin">
             <summary>
             The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
             </summary>
            </member>
        <member name="T:MonoGame.Utilities.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
            </member>
        <member name="F:MonoGame.Utilities.ZlibCodec.InputBuffer">
             <summary>
             The buffer from which data is taken.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibCodec.NextIn">
             <summary>
             An index into the InputBuffer array, indicating where to start reading. 
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibCodec.AvailableBytesIn">
             <summary>
             The number of bytes available in the InputBuffer, starting at NextIn. 
             </summary>
             <remarks>
             Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
             The class will update this number as calls to Inflate/Deflate are made.
             </remarks>
            </member>
        <member name="F:MonoGame.Utilities.ZlibCodec.TotalBytesIn">
             <summary>
             Total number of bytes read so far, through all calls to Inflate()/Deflate().
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibCodec.OutputBuffer">
             <summary>
             Buffer to store output data.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibCodec.NextOut">
             <summary>
             An index into the OutputBuffer array, indicating where to start writing. 
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibCodec.AvailableBytesOut">
             <summary>
             The number of bytes available in the OutputBuffer, starting at NextOut. 
             </summary>
             <remarks>
             Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
             The class will update this number as calls to Inflate/Deflate are made.
             </remarks>
            </member>
        <member name="F:MonoGame.Utilities.ZlibCodec.TotalBytesOut">
             <summary>
             Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibCodec.Message">
             <summary>
             used for diagnostics, when something goes wrong!
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibCodec.CompressLevel">
             <summary>
             The compression level to use in this codec.  Useful only in compression mode.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.ZlibCodec.WindowBits">
             <summary>
             The number of Window Bits to use.  
             </summary>
             <remarks>
             This gauges the size of the sliding window, and hence the 
             compression effectiveness as well as memory consumption. It's best to just leave this 
             setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
             a 32k window.  
             </remarks>
            </member>
        <member name="F:MonoGame.Utilities.ZlibCodec.Strategy">
             <summary>
             The compression strategy to use.
             </summary>
             <remarks>
             This is only effective in compression.  The theory offered by ZLIB is that different
             strategies could potentially produce significant differences in compression behavior
             for different data sets.  Unfortunately I don't have any good recommendations for how
             to set it differently.  When I tested changing the strategy I got minimally different
             compression performance. It's best to leave this property alone if you don't have a
             good feel for it.  Or, you may want to produce a test harness that runs through the
             different strategy options and evaluates them on different file types. If you do that,
             let me know your results.
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.ZlibCodec.Adler32">
             <summary>
             The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
             </summary>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.#ctor">
             <summary>
             Create a ZlibCodec.
             </summary>
             <remarks>
             If you use this default constructor, you will later have to explicitly call 
             InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
             or decompress. 
             </remarks>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.#ctor(MonoGame.Utilities.CompressionMode)">
             <summary>
             Create a ZlibCodec that either compresses or decompresses.
             </summary>
             <param name="mode">
             Indicates whether the codec should compress (deflate) or decompress (inflate).
             </param>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.InitializeInflate">
             <summary>
             Initialize the inflation state. 
             </summary>
             <remarks>
             It is not necessary to call this before using the ZlibCodec to inflate data; 
             It is implicitly called when you call the constructor.
             </remarks>
             <returns>Z_OK if everything goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.InitializeInflate(System.Int32)">
             <summary>
             Initialize the ZlibCodec for inflation, with the specified number of window bits. 
             </summary>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if all goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.Inflate(MonoGame.Utilities.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.EndInflate">
             <summary>
             Ends an inflation session. 
             </summary>
             <remarks>
             Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
             After calling this you cannot call Inflate() without a intervening call to one of the
             InitializeInflate() overloads.
             </remarks>
             <returns>Z_OK if everything goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.SyncInflate">
             <summary>
             I don't know what this does!
             </summary>
             <returns>Z_OK if everything goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.InitializeDeflate">
             <summary>
             Initialize the ZlibCodec for deflation operation.
             </summary>
             <remarks>
             The codec will use the MAX window bits and the default level of compression.
             </remarks>
             <example>
             <code>
              int bufferSize = 40000;
              byte[] CompressedBytes = new byte[bufferSize];
              byte[] DecompressedBytes = new byte[bufferSize];
              
              ZlibCodec compressor = new ZlibCodec();
              
              compressor.InitializeDeflate(CompressionLevel.Default);
              
              compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
              compressor.NextIn = 0;
              compressor.AvailableBytesIn = compressor.InputBuffer.Length;
              
              compressor.OutputBuffer = CompressedBytes;
              compressor.NextOut = 0;
              compressor.AvailableBytesOut = CompressedBytes.Length;
              
              while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
              {
                compressor.Deflate(FlushType.None);
              }
              
              while (true)
              {
                int rc= compressor.Deflate(FlushType.Finish);
                if (rc == ZlibConstants.Z_STREAM_END) break;
              }
              
              compressor.EndDeflate();
               
             </code>
             </example>
             <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.InitializeDeflate(MonoGame.Utilities.CompressionLevel)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
             </summary>
             <remarks>
             The codec will use the maximum window bits (15) and the specified
             CompressionLevel.  It will emit a ZLIB stream as it compresses.
             </remarks>
             <param name="level">The compression level for the codec.</param>
             <returns>Z_OK if all goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.InitializeDeflate(MonoGame.Utilities.CompressionLevel,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
             and the explicit flag governing whether to emit an RFC1950 header byte pair.
             </summary>
             <remarks>
             The codec will use the maximum window bits (15) and the specified CompressionLevel.
             If you want to generate a zlib stream, you should specify true for
             wantRfc1950Header. In this case, the library will emit a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  
             </remarks>
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <returns>Z_OK if all goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.InitializeDeflate(MonoGame.Utilities.CompressionLevel,System.Int32)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
             and the specified number of window bits. 
             </summary>
             <remarks>
             The codec will use the specified number of window bits and the specified CompressionLevel.
             </remarks>
             <param name="level">The compression level for the codec.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.InitializeDeflate(MonoGame.Utilities.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.Deflate(MonoGame.Utilities.FlushType)">
             <summary>
             Deflate one batch of data.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer before calling this method.
             </remarks>
             <example>
             <code>
             private void DeflateBuffer(CompressionLevel level)
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec compressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                 MemoryStream ms = new MemoryStream();
             
                 int rc = compressor.InitializeDeflate(level);
             
                 compressor.InputBuffer = UncompressedBytes;
                 compressor.NextIn = 0;
                 compressor.AvailableBytesIn = UncompressedBytes.Length;
             
                 compressor.OutputBuffer = buffer;
             
                 // pass 1: deflate 
                 do
                 {
                     compressor.NextOut = 0;
                     compressor.AvailableBytesOut = buffer.Length;
                     rc = compressor.Deflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("deflating: " + compressor.Message);
             
                     ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                 }
                 while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     compressor.NextOut = 0;
                     compressor.AvailableBytesOut = buffer.Length;
                     rc = compressor.Deflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("deflating: " + compressor.Message);
             
                     if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                 }
                 while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
             
                 compressor.EndDeflate();
             
                 ms.Seek(0, SeekOrigin.Begin);
                 CompressedBytes = new byte[compressor.TotalBytesOut];
                 ms.Read(CompressedBytes, 0, CompressedBytes.Length);
             }
             </code>
             </example>
             <param name="flush">whether to flush all data as you deflate. Generally you will want to 
             use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
             flush everything. 
             </param>
             <returns>Z_OK if all goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.EndDeflate">
             <summary>
             End a deflation session.
             </summary>
             <remarks>
             Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
             </remarks>
             <returns>Z_OK if all goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.ResetDeflate">
             <summary>
             Reset a codec for another deflation session.
             </summary>
             <remarks>
             Call this to reset the deflation state.  For example if a thread is deflating
             non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
             block and before the next Deflate(None) of the second block.
             </remarks>
             <returns>Z_OK if all goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.SetDeflateParams(MonoGame.Utilities.CompressionLevel,MonoGame.Utilities.CompressionStrategy)">
             <summary>
             Set the CompressionStrategy and CompressionLevel for a deflation session.
             </summary>
             <param name="level">the level of compression to use.</param>
             <param name="strategy">the strategy to use for compression.</param>
             <returns>Z_OK if all goes well.</returns>
            </member>
        <member name="M:MonoGame.Utilities.ZlibCodec.SetDictionary(System.Byte[])">
             <summary>
             Set the dictionary to be used for either Inflation or Deflation.
             </summary>
             <param name="dictionary">The dictionary bytes to use.</param>
             <returns>Z_OK if all goes well.</returns>
            </member>
        <member name="T:MonoGame.Utilities.FlushType">
             <summary>
             Describes how to flush the current deflate operation.
             </summary>
             <remarks>
             The different FlushType values are useful when using a Deflate in a streaming application.
             </remarks>
            </member>
        <member name="F:MonoGame.Utilities.FlushType.None">
             <summary>No flush at all.</summary>
            </member>
        <member name="F:MonoGame.Utilities.FlushType.Partial">
             <summary>Closes the current block, but doesn't flush it to
             the output. Used internally only in hypothetical
             scenarios.  This was supposed to be removed by Zlib, but it is
             still in use in some edge cases.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.FlushType.Sync">
             <summary>
             Use this during compression to specify that all pending output should be
             flushed to the output buffer and the output should be aligned on a byte
             boundary.  You might use this in a streaming communication scenario, so that
             the decompressor can get all input data available so far.  When using this
             with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
             enough output space has been provided before the call.  Flushing will
             degrade compression and so it should be used only when necessary.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.FlushType.Full">
             <summary>
             Use this during compression to specify that all output should be flushed, as
             with <c>FlushType.Sync</c>, but also, the compression state should be reset
             so that decompression can restart from this point if previous compressed
             data has been damaged or if random access is desired.  Using
             <c>FlushType.Full</c> too often can significantly degrade the compression.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.FlushType.Finish">
             <summary>Signals the end of the compression/decompression stream.</summary>
            </member>
        <member name="T:MonoGame.Utilities.CompressionLevel">
             <summary>
             The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.None">
             <summary>
             None means that the data will be simply stored, with no change at all.
             If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
             cannot be opened with the default zip reader. Use a different CompressionLevel.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.Level0">
             <summary>
             Same as None.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.BestSpeed">
             <summary>
             The fastest but least effective compression.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.Level1">
             <summary>
             A synonym for BestSpeed.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.Level2">
             <summary>
             A little slower, but better, than level 1.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.Level3">
             <summary>
             A little slower, but better, than level 2.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.Level4">
             <summary>
             A little slower, but better, than level 3.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.Level5">
             <summary>
             A little slower than level 4, but with better compression.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.Default">
             <summary>
             The default compression level, with a good balance of speed and compression efficiency.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.Level6">
             <summary>
             A synonym for Default.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.Level7">
             <summary>
             Pretty good compression!
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.Level8">
             <summary>
              Better compression than Level7!
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.BestCompression">
             <summary>
             The "best" compression, where best means greatest reduction in size of the input data stream.
             This is also the slowest compression.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionLevel.Level9">
             <summary>
             A synonym for BestCompression.
             </summary>
            </member>
        <member name="T:MonoGame.Utilities.CompressionStrategy">
             <summary>
             Describes options for how the compression algorithm is executed.  Different strategies
             work better on different sorts of data.  The strategy parameter can affect the compression
             ratio and the speed of compression but not the correctness of the compresssion.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionStrategy.Default">
             <summary>
             The default strategy is probably the best for normal data.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionStrategy.Filtered">
             <summary>
             The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
             filter or predictor.  By this definition, filtered data consists mostly of small
             values with a somewhat random distribution.  In this case, the compression algorithm
             is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
             coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionStrategy.HuffmanOnly">
             <summary>
             Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
             string matching.
             </summary>
            </member>
        <member name="T:MonoGame.Utilities.CompressionMode">
             <summary>
             An enum to specify the direction of transcoding - whether to compress or decompress.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionMode.Compress">
             <summary>
             Used to specify that the stream should compress the data.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.CompressionMode.Decompress">
             <summary>
             Used to specify that the stream should decompress the data.
             </summary>
            </member>
        <member name="T:MonoGame.Utilities.ZlibException">
             <summary>
             A general purpose exception class for exceptions in the Zlib library.
             </summary>
            </member>
        <member name="M:MonoGame.Utilities.ZlibException.#ctor">
             <summary>
             The ZlibException class captures exception information generated
             by the Zlib library.
             </summary>
            </member>
        <member name="M:MonoGame.Utilities.ZlibException.#ctor(System.String)">
             <summary>
             This ctor collects a message attached to the exception.
             </summary>
             <param name="s">the message for the exception.</param>
            </member>
        <member name="M:MonoGame.Utilities.SharedUtils.URShift(System.Int32,System.Int32)">
             <summary>
             Performs an unsigned bitwise right shift with the specified number
             </summary>
             <param name="number">Number to operate on</param>
             <param name="bits">Ammount of bits to shift</param>
             <returns>The resulting number from the shift operation</returns>
            </member>
        <member name="M:MonoGame.Utilities.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
            
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
            </member>
        <member name="T:MonoGame.Utilities.Adler">
             <summary>
             Computes an Adler-32 checksum.
             </summary>
             <remarks>
             The Adler checksum is similar to a CRC checksum, but faster to compute, though less
             reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
             is a required part of the "ZLIB" standard.  Applications will almost never need to
             use this class directly.
             </remarks>
            
             <exclude />
            </member>
        <member name="M:MonoGame.Utilities.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Calculates the Adler32 checksum.
             </summary>
             <remarks>
               <para>
                 This is used within ZLIB.  You probably don't need to use this directly.
               </para>
             </remarks>
             <example>
                To compute an Adler32 checksum on a byte array:
              <code>
                var adler = Adler.Adler32(0, null, 0, 0);
                adler = Adler.Adler32(adler, buffer, index, length);
              </code>
             </example>
            </member>
        <member name="M:MonoGame.Utilities.Tree.DistanceCode(System.Int32)">
             <summary>
             Map from a distance to a distance code.
             </summary>
             <remarks> 
             No side effects. _dist_code[256] and _dist_code[257] are never used.
             </remarks>
            </member>
        <member name="T:MonoGame.Utilities.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream" />. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
            
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
            </member>
        <member name="F:MonoGame.Utilities.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.GZipStream.Crc32">
             <summary>
             The CRC on the GZIP stream.
             </summary>
             <remarks>
             This is used for internal error checking. You probably don't need to look at this property.
             </remarks>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.#ctor(System.IO.Stream,MonoGame.Utilities.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n &gt; 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n &gt; 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  &gt; 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.#ctor(System.IO.Stream,MonoGame.Utilities.CompressionMode,MonoGame.Utilities.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.#ctor(System.IO.Stream,MonoGame.Utilities.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen" /> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:MonoGame.Utilities.CompressionMode" /> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:MonoGame.Utilities.GZipStream.#ctor(System.IO.Stream,MonoGame.Utilities.CompressionMode,MonoGame.Utilities.CompressionLevel,System.Boolean)" />.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.#ctor(System.IO.Stream,MonoGame.Utilities.CompressionMode,MonoGame.Utilities.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen" /> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
            </member>
        <member name="P:MonoGame.Utilities.GZipStream.FlushMode">
             <summary>
             This property sets the flush behavior on the stream.
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.GZipStream.TotalIn">
             <summary> Returns the total number of bytes input so far.</summary>
            </member>
        <member name="P:MonoGame.Utilities.GZipStream.TotalOut">
             <summary> Returns the total number of bytes output so far.</summary>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.Dispose(System.Boolean)">
             <summary>
               Dispose the stream.
             </summary>
             <remarks>
               <para>
                 This may or may not result in a <c>Close()</c> call on the captive
                 stream.  See the constructors that have a <c>leaveOpen</c> parameter
                 for more information.
               </para>
               <para>
                 This method may be invoked in two distinct scenarios.  If disposing
                 == true, the method has been called directly or indirectly by a
                 user's code, for example via the internal Dispose() method. In this
                 case, both managed and unmanaged resources can be referenced and
                 disposed.  If disposing == false, the method has been called by the
                 runtime from inside the object finalizer and this method should not
                 reference other objects; in that case only unmanaged resources must
                 be referenced or disposed.
               </para>
             </remarks>
             <param name="disposing">
               indicates whether the Dispose method was invoked by user code.
             </param>
            </member>
        <member name="P:MonoGame.Utilities.GZipStream.CanRead">
             <summary>
             Indicates whether the stream can be read.
             </summary>
             <remarks>
             The return value depends on whether the captive stream supports reading.
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.GZipStream.CanSeek">
             <summary>
             Indicates whether the stream supports Seek operations.
             </summary>
             <remarks>
             Always returns false.
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.GZipStream.CanWrite">
             <summary>
             Indicates whether the stream can be written.
             </summary>
             <remarks>
             The return value depends on whether the captive stream supports writing.
             </remarks>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.Flush">
             <summary>
             Flush the stream.
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.GZipStream.Length">
             <summary>
             Reading this property always throws a <see cref="T:System.NotImplementedException" />.
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException" />. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
               Calling this method always throws a <see cref="T:System.NotImplementedException" />.
             </summary>
             <param name="offset">irrelevant; it will always throw!</param>
             <param name="origin">irrelevant; it will always throw!</param>
             <returns>irrelevant!</returns>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.SetLength(System.Int64)">
             <summary>
               Calling this method always throws a <see cref="T:System.NotImplementedException" />.
             </summary>
             <param name="value">irrelevant; this method will always throw!</param>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:MonoGame.Utilities.GZipStream.UncompressString(System.Byte[])" />.
             </remarks>
            
             <seealso cref="M:MonoGame.Utilities.GZipStream.UncompressString(System.Byte[])" />
             <seealso cref="M:MonoGame.Utilities.GZipStream.CompressBuffer(System.Byte[])" />
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:MonoGame.Utilities.GZipStream.UncompressBuffer(System.Byte[])" />.
             </remarks>
            
             <seealso cref="M:MonoGame.Utilities.GZipStream.CompressString(System.String)" />
             <seealso cref="M:MonoGame.Utilities.GZipStream.UncompressBuffer(System.Byte[])" />
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:MonoGame.Utilities.GZipStream.CompressString(System.String)" />
             <seealso cref="M:MonoGame.Utilities.GZipStream.UncompressBuffer(System.Byte[])" />
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
            </member>
        <member name="M:MonoGame.Utilities.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:MonoGame.Utilities.GZipStream.CompressBuffer(System.Byte[])" />
             <seealso cref="M:MonoGame.Utilities.GZipStream.UncompressString(System.Byte[])" />
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
            </member>
        <member name="T:MonoGame.Utilities.CRC32">
             <summary>
               Computes a CRC-32. The CRC-32 algorithm is parameterized - you
               can set the polynomial and enable or disable bit
               reversal. This can be used for GZIP, BZip2, or ZIP.
             </summary>
             <remarks>
               This type is used internally by DotNetZip; it is generally not used
               directly by applications wishing to create, read, or manipulate zip
               archive files.
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.CRC32.TotalBytesRead">
             <summary>
               Indicates the total number of bytes applied to the CRC.
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.CRC32.Crc32Result">
             <summary>
             Indicates the current CRC for all blocks slurped in.
             </summary>
            </member>
        <member name="M:MonoGame.Utilities.CRC32.GetCrc32(System.IO.Stream)">
             <summary>
             Returns the CRC32 for the specified stream.
             </summary>
             <param name="input">The stream over which to calculate the CRC32</param>
             <returns>the CRC32 calculation</returns>
            </member>
        <member name="M:MonoGame.Utilities.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
             <summary>
             Returns the CRC32 for the specified stream, and writes the input into the
             output stream.
             </summary>
             <param name="input">The stream over which to calculate the CRC32</param>
             <param name="output">The stream into which to deflate the input</param>
             <returns>the CRC32 calculation</returns>
            </member>
        <member name="M:MonoGame.Utilities.CRC32.ComputeCrc32(System.Int32,System.Byte)">
             <summary>
               Get the CRC32 for the given (word,byte) combo.  This is a
               computation defined by PKzip for PKZIP 2.0 (weak) encryption.
             </summary>
             <param name="W">The word to start with.</param>
             <param name="B">The byte to combine it with.</param>
             <returns>The CRC-ized result.</returns>
            </member>
        <member name="M:MonoGame.Utilities.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Update the value for the running CRC32 using the given block of bytes.
             This is useful when using the CRC32() class in a Stream.
             </summary>
             <param name="block">block of bytes to slurp</param>
             <param name="offset">starting point in the block</param>
             <param name="count">how many bytes within the block to slurp</param>
            </member>
        <member name="M:MonoGame.Utilities.CRC32.UpdateCRC(System.Byte)">
             <summary>
               Process one byte in the CRC.
             </summary>
             <param name="b">the byte to include into the CRC .  </param>
            </member>
        <member name="M:MonoGame.Utilities.CRC32.UpdateCRC(System.Byte,System.Int32)">
             <summary>
               Process a run of N identical bytes into the CRC.
             </summary>
             <remarks>
               <para>
                 This method serves as an optimization for updating the CRC when a
                 run of identical bytes is found. Rather than passing in a buffer of
                 length n, containing all identical bytes b, this method accepts the
                 byte value and the length of the (virtual) buffer - the length of
                 the run.
               </para>
             </remarks>
             <param name="b">the byte to include into the CRC.  </param>
             <param name="n">the number of times that byte should be repeated. </param>
            </member>
        <member name="M:MonoGame.Utilities.CRC32.Combine(System.Int32,System.Int32)">
             <summary>
               Combines the given CRC32 value with the current running total.
             </summary>
             <remarks>
               This is useful when using a divide-and-conquer approach to
               calculating a CRC.  Multiple threads can each calculate a
               CRC32 on a segment of the data, and then combine the
               individual CRC32 values at the end.
             </remarks>
             <param name="crc">the crc value to be combined with this one</param>
             <param name="length">the length of data the CRC value was calculated on</param>
            </member>
        <member name="M:MonoGame.Utilities.CRC32.#ctor">
             <summary>
               Create an instance of the CRC32 class using the default settings: no
               bit reversal, and a polynomial of 0xEDB88320.
             </summary>
            </member>
        <member name="M:MonoGame.Utilities.CRC32.#ctor(System.Boolean)">
             <summary>
               Create an instance of the CRC32 class, specifying whether to reverse
               data bits or not.
             </summary>
             <param name="reverseBits">
               specify true if the instance should reverse data bits.
             </param>
             <remarks>
               <para>
                 In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                 want a CRC32 with compatibility with BZip2, you should pass true
                 here. In the CRC-32 used by GZIP and PKZIP, the bits are not
                 reversed; Therefore if you want a CRC32 with compatibility with
                 those, you should pass false.
               </para>
             </remarks>
            </member>
        <member name="M:MonoGame.Utilities.CRC32.#ctor(System.Int32,System.Boolean)">
             <summary>
               Create an instance of the CRC32 class, specifying the polynomial and
               whether to reverse data bits or not.
             </summary>
             <param name="polynomial">
               The polynomial to use for the CRC, expressed in the reversed (LSB)
               format: the highest ordered bit in the polynomial value is the
               coefficient of the 0th power; the second-highest order bit is the
               coefficient of the 1 power, and so on. Expressed this way, the
               polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
             </param>
             <param name="reverseBits">
               specify true if the instance should reverse data bits.
             </param>
            
             <remarks>
               <para>
                 In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                 want a CRC32 with compatibility with BZip2, you should pass true
                 here for the <c>reverseBits</c> parameter. In the CRC-32 used by
                 GZIP and PKZIP, the bits are not reversed; Therefore if you want a
                 CRC32 with compatibility with those, you should pass false for the
                 <c>reverseBits</c> parameter.
               </para>
             </remarks>
            </member>
        <member name="M:MonoGame.Utilities.CRC32.Reset">
             <summary>
               Reset the CRC-32 class - clear the CRC "remainder register."
             </summary>
             <remarks>
               <para>
                 Use this when employing a single instance of this class to compute
                 multiple, distinct CRCs on multiple, distinct data blocks.
               </para>
             </remarks>
            </member>
        <member name="T:MonoGame.Utilities.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
            </member>
        <member name="M:MonoGame.Utilities.CrcCalculatorStream.#ctor(System.IO.Stream)">
             <summary>
             The default constructor.
             </summary>
             <remarks>
               <para>
                 Instances returned from this constructor will leave the underlying
                 stream open upon Close().  The stream uses the default CRC32
                 algorithm, which implies a polynomial of 0xEDB88320.
               </para>
             </remarks>
             <param name="stream">The underlying stream</param>
            </member>
        <member name="M:MonoGame.Utilities.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
             <summary>
               The constructor allows the caller to specify how to handle the
               underlying stream at close.
             </summary>
             <remarks>
               <para>
                 The stream uses the default CRC32 algorithm, which implies a
                 polynomial of 0xEDB88320.
               </para>
             </remarks>
             <param name="stream">The underlying stream</param>
             <param name="leaveOpen">true to leave the underlying stream
             open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
            </member>
        <member name="M:MonoGame.Utilities.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
             <summary>
               A constructor allowing the specification of the length of the stream
               to read.
             </summary>
             <remarks>
               <para>
                 The stream uses the default CRC32 algorithm, which implies a
                 polynomial of 0xEDB88320.
               </para>
               <para>
                 Instances returned from this constructor will leave the underlying
                 stream open upon Close().
               </para>
             </remarks>
             <param name="stream">The underlying stream</param>
             <param name="length">The length of the stream to slurp</param>
            </member>
        <member name="M:MonoGame.Utilities.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
             <summary>
               A constructor allowing the specification of the length of the stream
               to read, as well as whether to keep the underlying stream open upon
               Close().
             </summary>
             <remarks>
               <para>
                 The stream uses the default CRC32 algorithm, which implies a
                 polynomial of 0xEDB88320.
               </para>
             </remarks>
             <param name="stream">The underlying stream</param>
             <param name="length">The length of the stream to slurp</param>
             <param name="leaveOpen">true to leave the underlying stream
             open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
            </member>
        <member name="M:MonoGame.Utilities.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean,MonoGame.Utilities.CRC32)">
             <summary>
               A constructor allowing the specification of the length of the stream
               to read, as well as whether to keep the underlying stream open upon
               Close(), and the CRC32 instance to use.
             </summary>
             <remarks>
               <para>
                 The stream uses the specified CRC32 instance, which allows the
                 application to specify how the CRC gets calculated.
               </para>
             </remarks>
             <param name="stream">The underlying stream</param>
             <param name="length">The length of the stream to slurp</param>
             <param name="leaveOpen">true to leave the underlying stream
             open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
             <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
            </member>
        <member name="P:MonoGame.Utilities.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
               Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
               This is either the total number of bytes read, or the total number of
               bytes written, depending on the direction of this stream.
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.CrcCalculatorStream.Crc">
             <summary>
               Provides the current CRC for all blocks slurped in.
             </summary>
             <remarks>
               <para>
                 The running total of the CRC is kept as data is written or read
                 through the stream.  read this property after all reads or writes to
                 get an accurate CRC for the entire stream.
               </para>
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.CrcCalculatorStream.LeaveOpen">
             <summary>
               Indicates whether the underlying stream will be left open when the
               <c>CrcCalculatorStream</c> is Closed.
             </summary>
             <remarks>
               <para>
                 Set this at any point before calling <see cref="!:Close()" />.
               </para>
             </remarks>
            </member>
        <member name="M:MonoGame.Utilities.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read from the stream
             </summary>
             <param name="buffer">the buffer to read</param>
             <param name="offset">the offset at which to start</param>
             <param name="count">the number of bytes to read</param>
             <returns>the number of bytes actually read</returns>
            </member>
        <member name="M:MonoGame.Utilities.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write to the stream.
             </summary>
             <param name="buffer">the buffer from which to write</param>
             <param name="offset">the offset at which to start writing</param>
             <param name="count">the number of bytes to write</param>
            </member>
        <member name="P:MonoGame.Utilities.CrcCalculatorStream.CanRead">
             <summary>
             Indicates whether the stream supports reading.
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.CrcCalculatorStream.CanSeek">
             <summary>
               Indicates whether the stream supports seeking.
             </summary>
             <remarks>
               <para>
                 Always returns false.
               </para>
             </remarks>
            </member>
        <member name="P:MonoGame.Utilities.CrcCalculatorStream.CanWrite">
             <summary>
             Indicates whether the stream supports writing.
             </summary>
            </member>
        <member name="M:MonoGame.Utilities.CrcCalculatorStream.Flush">
             <summary>
             Flush the stream.
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.CrcCalculatorStream.Length">
             <summary>
               Returns the length of the underlying stream.
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.CrcCalculatorStream.Position">
             <summary>
               The getter for this property returns the total bytes read.
               If you use the setter, it will throw
             <see cref="T:System.NotSupportedException" />.
             </summary>
            </member>
        <member name="M:MonoGame.Utilities.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             Seeking is not supported on this stream. This method always throws
             <see cref="T:System.NotSupportedException" />
             </summary>
             <param name="offset">N/A</param>
             <param name="origin">N/A</param>
             <returns>N/A</returns>
            </member>
        <member name="M:MonoGame.Utilities.CrcCalculatorStream.SetLength(System.Int64)">
             <summary>
             This method always throws
             <see cref="T:System.NotSupportedException" />
             </summary>
             <param name="value">N/A</param>
            </member>
        <member name="T:MonoGame.Utilities.Iso88591Encoding">
             <summary>
             A custom encoding class that provides encoding capabilities for the
             'Western European (ISO)' encoding under Silverlight.<br />
             This class was generated by a tool. For more information, visit
             http://www.hardcodet.net/2010/03/silverlight-text-encoding-class-generator
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.Iso88591Encoding.WebName">
             <summary>
             Gets the name registered with the
             Internet Assigned Numbers Authority (IANA) for the current encoding.
             </summary>
             <returns>
             The IANA name for the current <see cref="T:System.Text.Encoding" />.
             </returns>
            </member>
        <member name="P:MonoGame.Utilities.Iso88591Encoding.FallbackCharacter">
             <summary>
             A character that can be set in order to make the encoding class
             more fault tolerant. If this property is set, the encoding class will
             use this property instead of throwing an exception if an unsupported
             byte value is being passed for decoding.
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.Iso88591Encoding.FallbackByte">
             <summary>
             A byte value that corresponds to the <see cref="P:MonoGame.Utilities.Iso88591Encoding.FallbackCharacter" />.
             It is used in encoding scenarios in case an unsupported character is
             being passed for encoding.
             </summary>
            </member>
        <member name="M:MonoGame.Utilities.Iso88591Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             <summary>
             Encodes a set of characters from the specified character array into the specified byte array.
             </summary>
             <returns>
             The actual number of bytes written into <paramref name="bytes" />.
             </returns>
             <param name="chars">The character array containing the set of characters to encode. 
             </param><param name="charIndex">The index of the first character to encode. 
             </param><param name="charCount">The number of characters to encode. 
             </param><param name="bytes">The byte array to contain the resulting sequence of bytes.
             </param><param name="byteIndex">The index at which to start writing the resulting sequence of bytes. 
             </param>
            </member>
        <member name="M:MonoGame.Utilities.Iso88591Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
             <summary>
             Decodes a sequence of bytes from the specified byte array into the specified character array.
             </summary>
             <returns>
             The actual number of characters written into <paramref name="chars" />.
             </returns>
             <param name="bytes">The byte array containing the sequence of bytes to decode. 
             </param><param name="byteIndex">The index of the first byte to decode. 
             </param><param name="byteCount">The number of bytes to decode. 
             </param><param name="chars">The character array to contain the resulting set of characters. 
             </param><param name="charIndex">The index at which to start writing the resulting set of characters. 
             </param>
            </member>
        <member name="M:MonoGame.Utilities.Iso88591Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
             <summary>
             Calculates the number of bytes produced by encoding a set of characters
             from the specified character array.
             </summary>
             <returns>
             The number of bytes produced by encoding the specified characters. This class
             always returns the value of <paramref name="count" />.
             </returns>
            </member>
        <member name="M:MonoGame.Utilities.Iso88591Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Calculates the number of characters produced by decoding a sequence
             of bytes from the specified byte array.
             </summary>
             <returns>
             The number of characters produced by decoding the specified sequence of bytes. This class
             always returns the value of <paramref name="count" />. 
             </returns>
            </member>
        <member name="M:MonoGame.Utilities.Iso88591Encoding.GetMaxByteCount(System.Int32)">
             <summary>
             Calculates the maximum number of bytes produced by encoding the specified number of characters.
             </summary>
             <returns>
             The maximum number of bytes produced by encoding the specified number of characters. This
             class always returns the value of <paramref name="charCount" />.
             </returns>
             <param name="charCount">The number of characters to encode. 
             </param>
            </member>
        <member name="M:MonoGame.Utilities.Iso88591Encoding.GetMaxCharCount(System.Int32)">
             <summary>
             Calculates the maximum number of characters produced by decoding the specified number of bytes.
             </summary>
             <returns>
             The maximum number of characters produced by decoding the specified number of bytes. This class
             always returns the value of <paramref name="byteCount" />.
             </returns>
             <param name="byteCount">The number of bytes to decode.</param> 
            </member>
        <member name="P:MonoGame.Utilities.Iso88591Encoding.CharacterCount">
             <summary>
             Gets the number of characters that are supported by this encoding.
             This property returns a maximum value of 256, as the encoding class
             only supports single byte encodings (1 byte == 256 possible values).
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.Iso88591Encoding.byteToChar">
             <summary>
             This table contains characters in an array. The index within the
             array corresponds to the encoding's mapping of bytes to characters
             (e.g. if a byte value of 5 is used to encode the character 'x', this
             character will be stored at the array index 5.
             </summary>
            </member>
        <member name="F:MonoGame.Utilities.Iso88591Encoding.charToByte">
             <summary>
             This dictionary is used to resolve byte values for a given character.
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.Png.PngChunk.Length">
             <summary>
             Length of Data field
             </summary>
            </member>
        <member name="P:MonoGame.Utilities.Png.PngChunk.Crc">
             <summary>
             CRC of both Type and Data fields, but not Length field
             </summary>
            </member>
        <member name="M:MonoGame.Utilities.Png.PngCrc.BuildCrcTable">
             <summary>
             Build CRC lookup table for performance (once-off)
             </summary>
            </member>
        <member name="M:MonoGame.Utilities.Png.PngWriter.GetOptimalFilteredScanline(System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Applies all PNG filters to the given scanline and returns the filtered scanline that is deemed
             to be most compressible, using lowest total variation as proxy for compressibility.
             </summary>
             <param name="rawScanline"></param>
             <param name="previousScanline"></param>
             <param name="bytesPerPixel"></param>
             <returns></returns>
            </member>
        <member name="M:MonoGame.Utilities.Png.PngWriter.CalculateTotalVariation(System.Byte[])">
             <summary>
             Calculates the total variation of given byte array.  Total variation is the sum of the absolute values of
             neighbour differences.
             </summary>
             <param name="input"></param>
             <returns></returns>
            </member>
        <member name="M:Microsoft.Xna.Framework.Utilities.ByteBufferPool.Get(System.Int32)">
             <summary>
             Get a buffer that is at least as big as size.
             </summary>
            </member>
        <member name="M:Microsoft.Xna.Framework.Utilities.ByteBufferPool.Return(System.Byte[])">
             <summary>
             Return the given buffer to the pool.
             </summary>
             <param name="buffer"></param>
            </member>
        <member name="E:Microsoft.Xna.Framework.GameWindow.TextInput">
             <summary>
             Use this event to retrieve text for objects like textbox's.
             This event is not raised by noncharacter keys.
             This event also supports key repeat.
             </summary>
            </member>
    </members>
</doc>
